/* tslint:disable */
/* eslint-disable */
/*
Snyk API

Snyk helps software-driven businesses develop fast and stay secure. Continuously find and fix vulnerabilities for npm, Maven, NuGet, RubyGems, PyPI and more.

The version of the OpenAPI document: REST


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BulkPackageUrlsRequestBody } from '../models';
// @ts-ignore
import { BulkPackageUrlsRequestBodyData } from '../models';
// @ts-ignore
import { ErrorDocument } from '../models';
// @ts-ignore
import { IssuesByGroupId401Response } from '../models';
// @ts-ignore
import { IssuesByGroupId403Response } from '../models';
// @ts-ignore
import { IssuesByGroupId404Response } from '../models';
// @ts-ignore
import { IssuesByGroupId500Response } from '../models';
// @ts-ignore
import { IssuesByGroupIdResponse } from '../models';
// @ts-ignore
import { IssuesGetById401Response } from '../models';
// @ts-ignore
import { IssuesGetById403Response } from '../models';
// @ts-ignore
import { IssuesGetById404Response } from '../models';
// @ts-ignore
import { IssuesGetById409Response } from '../models';
// @ts-ignore
import { IssuesGetById500Response } from '../models';
// @ts-ignore
import { IssuesGetByIdResponse } from '../models';
// @ts-ignore
import { IssuesGetByIssueId400Response } from '../models';
// @ts-ignore
import { IssuesGetByIssueId401Response } from '../models';
// @ts-ignore
import { IssuesGetByIssueId403Response } from '../models';
// @ts-ignore
import { IssuesGetByIssueId404Response } from '../models';
// @ts-ignore
import { IssuesGetByIssueId409Response } from '../models';
// @ts-ignore
import { IssuesGetByIssueId500Response } from '../models';
// @ts-ignore
import { IssuesGetByIssueIdResponse } from '../models';
// @ts-ignore
import { IssuesListByOrgId403Response } from '../models';
// @ts-ignore
import { IssuesListByOrgId404Response } from '../models';
// @ts-ignore
import { IssuesListByOrgId500Response } from '../models';
// @ts-ignore
import { IssuesListByOrgIdResponse } from '../models';
// @ts-ignore
import { IssuesResponse } from '../models';
// @ts-ignore
import { IssuesWithPurlsResponse } from '../models';
// @ts-ignore
import { ScanItemType } from '../models';
// @ts-ignore
import { TypeDef } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * IssuesApi - axios parameter creator
 * @export
 */
export const IssuesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get a list of a group\'s issues.
         * @summary Get issues by group ID
         * @param {string} version The requested version of the endpoint to process the request
         * @param {string} groupId Group ID
         * @param {string} [startingAfter] Return the page of results immediately after this cursor
         * @param {string} [endingBefore] Return the page of results immediately before this cursor
         * @param {number} [limit] Number of results to return per page
         * @param {string} [scanItemId] A scan item id to filter issues through their scan item relationship.
         * @param {ScanItemType} [scanItemType] A scan item types to filter issues through their scan item relationship.
         * @param {TypeDef} [type] An issue type to filter issues.
         * @param {string} [updatedBefore] A filter to select issues updated before this date.
         * @param {string} [updatedAfter] A filter to select issues updated after this date.
         * @param {string} [createdBefore] A filter to select issues created before this date.
         * @param {string} [createdAfter] A filter to select issues created after this date.
         * @param {Array<'info' | 'low' | 'medium' | 'high' | 'critical'>} [effectiveSeverityLevel] One or more effective severity levels to filter issues.
         * @param {Array<'open' | 'resolved'>} [status] An issue\&#39;s status
         * @param {boolean} [ignored] Whether an issue is ignored or not.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        byGroupId: async (version: string, groupId: string, startingAfter?: string, endingBefore?: string, limit?: number, scanItemId?: string, scanItemType?: ScanItemType, type?: TypeDef, updatedBefore?: string, updatedAfter?: string, createdBefore?: string, createdAfter?: string, effectiveSeverityLevel?: Array<'info' | 'low' | 'medium' | 'high' | 'critical'>, status?: Array<'open' | 'resolved'>, ignored?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('byGroupId', 'version', version)
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('byGroupId', 'groupId', groupId)
            const localVarPath = `/groups/{group_id}/issues`
                .replace(`{${"group_id"}}`, encodeURIComponent(String(groupId !== undefined ? groupId : `-group_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }

            if (startingAfter !== undefined) {
                localVarQueryParameter['starting_after'] = startingAfter;
            }

            if (endingBefore !== undefined) {
                localVarQueryParameter['ending_before'] = endingBefore;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (scanItemId !== undefined) {
                localVarQueryParameter['scan_item.id'] = scanItemId;
            }

            if (scanItemType !== undefined) {
                localVarQueryParameter['scan_item.type'] = scanItemType;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (updatedBefore !== undefined) {
                localVarQueryParameter['updated_before'] = (updatedBefore as any instanceof Date) ?
                    (updatedBefore as any).toISOString() :
                    updatedBefore;
            }

            if (updatedAfter !== undefined) {
                localVarQueryParameter['updated_after'] = (updatedAfter as any instanceof Date) ?
                    (updatedAfter as any).toISOString() :
                    updatedAfter;
            }

            if (createdBefore !== undefined) {
                localVarQueryParameter['created_before'] = (createdBefore as any instanceof Date) ?
                    (createdBefore as any).toISOString() :
                    createdBefore;
            }

            if (createdAfter !== undefined) {
                localVarQueryParameter['created_after'] = (createdAfter as any instanceof Date) ?
                    (createdAfter as any).toISOString() :
                    createdAfter;
            }

            if (effectiveSeverityLevel) {
                localVarQueryParameter['effective_severity_level'] = effectiveSeverityLevel.join(COLLECTION_FORMATS.csv);
            }

            if (status) {
                localVarQueryParameter['status'] = status.join(COLLECTION_FORMATS.csv);
            }

            if (ignored !== undefined) {
                localVarQueryParameter['ignored'] = ignored;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/groups/{group_id}/issues',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an issue
         * @summary Get an issue
         * @param {string} version The requested version of the endpoint to process the request
         * @param {string} orgId Org ID
         * @param {string} issueId Issue ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (version: string, orgId: string, issueId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('getById', 'version', version)
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getById', 'orgId', orgId)
            // verify required parameter 'issueId' is not null or undefined
            assertParamExists('getById', 'issueId', issueId)
            const localVarPath = `/orgs/{org_id}/issues/{issue_id}`
                .replace(`{${"org_id"}}`, encodeURIComponent(String(orgId !== undefined ? orgId : `-org_id-`)))
                .replace(`{${"issue_id"}}`, encodeURIComponent(String(issueId !== undefined ? issueId : `-issue_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/orgs/{org_id}/issues/{issue_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an issue
         * @summary Get an issue
         * @param {string} version The requested version of the endpoint to process the request
         * @param {string} groupId Group ID
         * @param {string} issueId Issue ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByIssueId: async (version: string, groupId: string, issueId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('getByIssueId', 'version', version)
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('getByIssueId', 'groupId', groupId)
            // verify required parameter 'issueId' is not null or undefined
            assertParamExists('getByIssueId', 'issueId', issueId)
            const localVarPath = `/groups/{group_id}/issues/{issue_id}`
                .replace(`{${"group_id"}}`, encodeURIComponent(String(groupId !== undefined ? groupId : `-group_id-`)))
                .replace(`{${"issue_id"}}`, encodeURIComponent(String(issueId !== undefined ? issueId : `-issue_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/groups/{group_id}/issues/{issue_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of an organization\'s issues.
         * @summary Get issues by org ID
         * @param {string} version The requested version of the endpoint to process the request
         * @param {string} orgId Org ID
         * @param {string} [startingAfter] Return the page of results immediately after this cursor
         * @param {string} [endingBefore] Return the page of results immediately before this cursor
         * @param {number} [limit] Number of results to return per page
         * @param {string} [scanItemId] A scan item id to filter issues through their scan item relationship.
         * @param {ScanItemType} [scanItemType] A scan item types to filter issues through their scan item relationship.
         * @param {TypeDef} [type] An issue type to filter issues.
         * @param {string} [updatedBefore] A filter to select issues updated before this date.
         * @param {string} [updatedAfter] A filter to select issues updated after this date.
         * @param {string} [createdBefore] A filter to select issues created before this date.
         * @param {string} [createdAfter] A filter to select issues created after this date.
         * @param {Array<'info' | 'low' | 'medium' | 'high' | 'critical'>} [effectiveSeverityLevel] One or more effective severity levels to filter issues.
         * @param {Array<'open' | 'resolved'>} [status] An issue\&#39;s status
         * @param {boolean} [ignored] Whether an issue is ignored or not.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listByOrgId: async (version: string, orgId: string, startingAfter?: string, endingBefore?: string, limit?: number, scanItemId?: string, scanItemType?: ScanItemType, type?: TypeDef, updatedBefore?: string, updatedAfter?: string, createdBefore?: string, createdAfter?: string, effectiveSeverityLevel?: Array<'info' | 'low' | 'medium' | 'high' | 'critical'>, status?: Array<'open' | 'resolved'>, ignored?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('listByOrgId', 'version', version)
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('listByOrgId', 'orgId', orgId)
            const localVarPath = `/orgs/{org_id}/issues`
                .replace(`{${"org_id"}}`, encodeURIComponent(String(orgId !== undefined ? orgId : `-org_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }

            if (startingAfter !== undefined) {
                localVarQueryParameter['starting_after'] = startingAfter;
            }

            if (endingBefore !== undefined) {
                localVarQueryParameter['ending_before'] = endingBefore;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (scanItemId !== undefined) {
                localVarQueryParameter['scan_item.id'] = scanItemId;
            }

            if (scanItemType !== undefined) {
                localVarQueryParameter['scan_item.type'] = scanItemType;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (updatedBefore !== undefined) {
                localVarQueryParameter['updated_before'] = (updatedBefore as any instanceof Date) ?
                    (updatedBefore as any).toISOString() :
                    updatedBefore;
            }

            if (updatedAfter !== undefined) {
                localVarQueryParameter['updated_after'] = (updatedAfter as any instanceof Date) ?
                    (updatedAfter as any).toISOString() :
                    updatedAfter;
            }

            if (createdBefore !== undefined) {
                localVarQueryParameter['created_before'] = (createdBefore as any instanceof Date) ?
                    (createdBefore as any).toISOString() :
                    createdBefore;
            }

            if (createdAfter !== undefined) {
                localVarQueryParameter['created_after'] = (createdAfter as any instanceof Date) ?
                    (createdAfter as any).toISOString() :
                    createdAfter;
            }

            if (effectiveSeverityLevel) {
                localVarQueryParameter['effective_severity_level'] = effectiveSeverityLevel.join(COLLECTION_FORMATS.csv);
            }

            if (status) {
                localVarQueryParameter['status'] = status.join(COLLECTION_FORMATS.csv);
            }

            if (ignored !== undefined) {
                localVarQueryParameter['ignored'] = ignored;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/orgs/{org_id}/issues',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query issues for a specific package version identified by Package URL (purl). Snyk returns only direct vulnerabilities. Transitive vulnerabilities (from dependencies) are not returned because they can vary depending on context.
         * @summary List issues for a package
         * @param {string} version The requested version of the endpoint to process the request
         * @param {string} purl A URI-encoded Package URL (purl). Supported purl types are apk, cargo, cocoapods, composer, deb, gem, generic, golang, hex, maven, npm, nuget, pub, pypi, rpm, and swift. A version for the package is also required.
         * @param {string} orgId Unique identifier for an organization
         * @param {number} [offset] Specify the number of results to skip before returning results. Must be greater than or equal to 0. Default is 0.
         * @param {number} [limit] Specify the number of results to return. Must be greater than 0 and less than 1000. Default is 1000.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listByPackage: async (version: string, purl: string, orgId: string, offset?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('listByPackage', 'version', version)
            // verify required parameter 'purl' is not null or undefined
            assertParamExists('listByPackage', 'purl', purl)
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('listByPackage', 'orgId', orgId)
            const localVarPath = `/orgs/{org_id}/packages/{purl}/issues`
                .replace(`{${"purl"}}`, encodeURIComponent(String(purl !== undefined ? purl : `-purl-`)))
                .replace(`{${"org_id"}}`, encodeURIComponent(String(orgId !== undefined ? orgId : `-org_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/orgs/{org_id}/packages/{purl}/issues',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint is not available to all customers. If you are interested please contact support. Query issues for a batch of packages identified by Package URL (purl). Only direct vulnerabilities are returned, transitive vulnerabilities (from dependencies) are not returned because they can vary depending on context.
         * @summary List issues for a given set of packages  (Currently not available to all customers)
         * @param {string} version The requested version of the endpoint to process the request
         * @param {string} orgId Unique identifier for an organization
         * @param {BulkPackageUrlsRequestBody} bulkPackageUrlsRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryForPackages: async (version: string, orgId: string, bulkPackageUrlsRequestBody: BulkPackageUrlsRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('queryForPackages', 'version', version)
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('queryForPackages', 'orgId', orgId)
            // verify required parameter 'bulkPackageUrlsRequestBody' is not null or undefined
            assertParamExists('queryForPackages', 'bulkPackageUrlsRequestBody', bulkPackageUrlsRequestBody)
            const localVarPath = `/orgs/{org_id}/packages/issues`
                .replace(`{${"org_id"}}`, encodeURIComponent(String(orgId !== undefined ? orgId : `-org_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: bulkPackageUrlsRequestBody,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/orgs/{org_id}/packages/issues',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(bulkPackageUrlsRequestBody, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IssuesApi - functional programming interface
 * @export
 */
export const IssuesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IssuesApiAxiosParamCreator(configuration)
    return {
        /**
         * Get a list of a group\'s issues.
         * @summary Get issues by group ID
         * @param {IssuesApiByGroupIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async byGroupId(requestParameters: IssuesApiByGroupIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IssuesByGroupIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.byGroupId(requestParameters.version, requestParameters.groupId, requestParameters.startingAfter, requestParameters.endingBefore, requestParameters.limit, requestParameters.scanItemId, requestParameters.scanItemType, requestParameters.type, requestParameters.updatedBefore, requestParameters.updatedAfter, requestParameters.createdBefore, requestParameters.createdAfter, requestParameters.effectiveSeverityLevel, requestParameters.status, requestParameters.ignored, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get an issue
         * @summary Get an issue
         * @param {IssuesApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: IssuesApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IssuesGetByIssueIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.version, requestParameters.orgId, requestParameters.issueId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get an issue
         * @summary Get an issue
         * @param {IssuesApiGetByIssueIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByIssueId(requestParameters: IssuesApiGetByIssueIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IssuesGetByIssueIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByIssueId(requestParameters.version, requestParameters.groupId, requestParameters.issueId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of an organization\'s issues.
         * @summary Get issues by org ID
         * @param {IssuesApiListByOrgIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listByOrgId(requestParameters: IssuesApiListByOrgIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IssuesByGroupIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listByOrgId(requestParameters.version, requestParameters.orgId, requestParameters.startingAfter, requestParameters.endingBefore, requestParameters.limit, requestParameters.scanItemId, requestParameters.scanItemType, requestParameters.type, requestParameters.updatedBefore, requestParameters.updatedAfter, requestParameters.createdBefore, requestParameters.createdAfter, requestParameters.effectiveSeverityLevel, requestParameters.status, requestParameters.ignored, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Query issues for a specific package version identified by Package URL (purl). Snyk returns only direct vulnerabilities. Transitive vulnerabilities (from dependencies) are not returned because they can vary depending on context.
         * @summary List issues for a package
         * @param {IssuesApiListByPackageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listByPackage(requestParameters: IssuesApiListByPackageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IssuesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listByPackage(requestParameters.version, requestParameters.purl, requestParameters.orgId, requestParameters.offset, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint is not available to all customers. If you are interested please contact support. Query issues for a batch of packages identified by Package URL (purl). Only direct vulnerabilities are returned, transitive vulnerabilities (from dependencies) are not returned because they can vary depending on context.
         * @summary List issues for a given set of packages  (Currently not available to all customers)
         * @param {IssuesApiQueryForPackagesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryForPackages(requestParameters: IssuesApiQueryForPackagesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IssuesWithPurlsResponse>> {
            const bulkPackageUrlsRequestBody: BulkPackageUrlsRequestBody = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.queryForPackages(requestParameters.version, requestParameters.orgId, bulkPackageUrlsRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * IssuesApi - factory interface
 * @export
 */
export const IssuesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IssuesApiFp(configuration)
    return {
        /**
         * Get a list of a group\'s issues.
         * @summary Get issues by group ID
         * @param {IssuesApiByGroupIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        byGroupId(requestParameters: IssuesApiByGroupIdRequest, options?: AxiosRequestConfig): AxiosPromise<IssuesByGroupIdResponse> {
            return localVarFp.byGroupId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an issue
         * @summary Get an issue
         * @param {IssuesApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: IssuesApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<IssuesGetByIssueIdResponse> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an issue
         * @summary Get an issue
         * @param {IssuesApiGetByIssueIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByIssueId(requestParameters: IssuesApiGetByIssueIdRequest, options?: AxiosRequestConfig): AxiosPromise<IssuesGetByIssueIdResponse> {
            return localVarFp.getByIssueId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of an organization\'s issues.
         * @summary Get issues by org ID
         * @param {IssuesApiListByOrgIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listByOrgId(requestParameters: IssuesApiListByOrgIdRequest, options?: AxiosRequestConfig): AxiosPromise<IssuesByGroupIdResponse> {
            return localVarFp.listByOrgId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Query issues for a specific package version identified by Package URL (purl). Snyk returns only direct vulnerabilities. Transitive vulnerabilities (from dependencies) are not returned because they can vary depending on context.
         * @summary List issues for a package
         * @param {IssuesApiListByPackageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listByPackage(requestParameters: IssuesApiListByPackageRequest, options?: AxiosRequestConfig): AxiosPromise<IssuesResponse> {
            return localVarFp.listByPackage(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint is not available to all customers. If you are interested please contact support. Query issues for a batch of packages identified by Package URL (purl). Only direct vulnerabilities are returned, transitive vulnerabilities (from dependencies) are not returned because they can vary depending on context.
         * @summary List issues for a given set of packages  (Currently not available to all customers)
         * @param {IssuesApiQueryForPackagesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryForPackages(requestParameters: IssuesApiQueryForPackagesRequest, options?: AxiosRequestConfig): AxiosPromise<IssuesWithPurlsResponse> {
            return localVarFp.queryForPackages(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for byGroupId operation in IssuesApi.
 * @export
 * @interface IssuesApiByGroupIdRequest
 */
export type IssuesApiByGroupIdRequest = {
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof IssuesApiByGroupId
    */
    readonly version: string
    
    /**
    * Group ID
    * @type {string}
    * @memberof IssuesApiByGroupId
    */
    readonly groupId: string
    
    /**
    * Return the page of results immediately after this cursor
    * @type {string}
    * @memberof IssuesApiByGroupId
    */
    readonly startingAfter?: string
    
    /**
    * Return the page of results immediately before this cursor
    * @type {string}
    * @memberof IssuesApiByGroupId
    */
    readonly endingBefore?: string
    
    /**
    * Number of results to return per page
    * @type {number}
    * @memberof IssuesApiByGroupId
    */
    readonly limit?: number
    
    /**
    * A scan item id to filter issues through their scan item relationship.
    * @type {string}
    * @memberof IssuesApiByGroupId
    */
    readonly scanItemId?: string
    
    /**
    * A scan item types to filter issues through their scan item relationship.
    * @type {ScanItemType}
    * @memberof IssuesApiByGroupId
    */
    readonly scanItemType?: ScanItemType
    
    /**
    * An issue type to filter issues.
    * @type {TypeDef}
    * @memberof IssuesApiByGroupId
    */
    readonly type?: TypeDef
    
    /**
    * A filter to select issues updated before this date.
    * @type {string}
    * @memberof IssuesApiByGroupId
    */
    readonly updatedBefore?: string
    
    /**
    * A filter to select issues updated after this date.
    * @type {string}
    * @memberof IssuesApiByGroupId
    */
    readonly updatedAfter?: string
    
    /**
    * A filter to select issues created before this date.
    * @type {string}
    * @memberof IssuesApiByGroupId
    */
    readonly createdBefore?: string
    
    /**
    * A filter to select issues created after this date.
    * @type {string}
    * @memberof IssuesApiByGroupId
    */
    readonly createdAfter?: string
    
    /**
    * One or more effective severity levels to filter issues.
    * @type {Array<'info' | 'low' | 'medium' | 'high' | 'critical'>}
    * @memberof IssuesApiByGroupId
    */
    readonly effectiveSeverityLevel?: Array<'info' | 'low' | 'medium' | 'high' | 'critical'>
    
    /**
    * An issue\'s status
    * @type {Array<'open' | 'resolved'>}
    * @memberof IssuesApiByGroupId
    */
    readonly status?: Array<'open' | 'resolved'>
    
    /**
    * Whether an issue is ignored or not.
    * @type {boolean}
    * @memberof IssuesApiByGroupId
    */
    readonly ignored?: boolean
    
}

/**
 * Request parameters for getById operation in IssuesApi.
 * @export
 * @interface IssuesApiGetByIdRequest
 */
export type IssuesApiGetByIdRequest = {
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof IssuesApiGetById
    */
    readonly version: string
    
    /**
    * Org ID
    * @type {string}
    * @memberof IssuesApiGetById
    */
    readonly orgId: string
    
    /**
    * Issue ID
    * @type {string}
    * @memberof IssuesApiGetById
    */
    readonly issueId: string
    
}

/**
 * Request parameters for getByIssueId operation in IssuesApi.
 * @export
 * @interface IssuesApiGetByIssueIdRequest
 */
export type IssuesApiGetByIssueIdRequest = {
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof IssuesApiGetByIssueId
    */
    readonly version: string
    
    /**
    * Group ID
    * @type {string}
    * @memberof IssuesApiGetByIssueId
    */
    readonly groupId: string
    
    /**
    * Issue ID
    * @type {string}
    * @memberof IssuesApiGetByIssueId
    */
    readonly issueId: string
    
}

/**
 * Request parameters for listByOrgId operation in IssuesApi.
 * @export
 * @interface IssuesApiListByOrgIdRequest
 */
export type IssuesApiListByOrgIdRequest = {
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof IssuesApiListByOrgId
    */
    readonly version: string
    
    /**
    * Org ID
    * @type {string}
    * @memberof IssuesApiListByOrgId
    */
    readonly orgId: string
    
    /**
    * Return the page of results immediately after this cursor
    * @type {string}
    * @memberof IssuesApiListByOrgId
    */
    readonly startingAfter?: string
    
    /**
    * Return the page of results immediately before this cursor
    * @type {string}
    * @memberof IssuesApiListByOrgId
    */
    readonly endingBefore?: string
    
    /**
    * Number of results to return per page
    * @type {number}
    * @memberof IssuesApiListByOrgId
    */
    readonly limit?: number
    
    /**
    * A scan item id to filter issues through their scan item relationship.
    * @type {string}
    * @memberof IssuesApiListByOrgId
    */
    readonly scanItemId?: string
    
    /**
    * A scan item types to filter issues through their scan item relationship.
    * @type {ScanItemType}
    * @memberof IssuesApiListByOrgId
    */
    readonly scanItemType?: ScanItemType
    
    /**
    * An issue type to filter issues.
    * @type {TypeDef}
    * @memberof IssuesApiListByOrgId
    */
    readonly type?: TypeDef
    
    /**
    * A filter to select issues updated before this date.
    * @type {string}
    * @memberof IssuesApiListByOrgId
    */
    readonly updatedBefore?: string
    
    /**
    * A filter to select issues updated after this date.
    * @type {string}
    * @memberof IssuesApiListByOrgId
    */
    readonly updatedAfter?: string
    
    /**
    * A filter to select issues created before this date.
    * @type {string}
    * @memberof IssuesApiListByOrgId
    */
    readonly createdBefore?: string
    
    /**
    * A filter to select issues created after this date.
    * @type {string}
    * @memberof IssuesApiListByOrgId
    */
    readonly createdAfter?: string
    
    /**
    * One or more effective severity levels to filter issues.
    * @type {Array<'info' | 'low' | 'medium' | 'high' | 'critical'>}
    * @memberof IssuesApiListByOrgId
    */
    readonly effectiveSeverityLevel?: Array<'info' | 'low' | 'medium' | 'high' | 'critical'>
    
    /**
    * An issue\'s status
    * @type {Array<'open' | 'resolved'>}
    * @memberof IssuesApiListByOrgId
    */
    readonly status?: Array<'open' | 'resolved'>
    
    /**
    * Whether an issue is ignored or not.
    * @type {boolean}
    * @memberof IssuesApiListByOrgId
    */
    readonly ignored?: boolean
    
}

/**
 * Request parameters for listByPackage operation in IssuesApi.
 * @export
 * @interface IssuesApiListByPackageRequest
 */
export type IssuesApiListByPackageRequest = {
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof IssuesApiListByPackage
    */
    readonly version: string
    
    /**
    * A URI-encoded Package URL (purl). Supported purl types are apk, cargo, cocoapods, composer, deb, gem, generic, golang, hex, maven, npm, nuget, pub, pypi, rpm, and swift. A version for the package is also required.
    * @type {string}
    * @memberof IssuesApiListByPackage
    */
    readonly purl: string
    
    /**
    * Unique identifier for an organization
    * @type {string}
    * @memberof IssuesApiListByPackage
    */
    readonly orgId: string
    
    /**
    * Specify the number of results to skip before returning results. Must be greater than or equal to 0. Default is 0.
    * @type {number}
    * @memberof IssuesApiListByPackage
    */
    readonly offset?: number
    
    /**
    * Specify the number of results to return. Must be greater than 0 and less than 1000. Default is 1000.
    * @type {number}
    * @memberof IssuesApiListByPackage
    */
    readonly limit?: number
    
}

/**
 * Request parameters for queryForPackages operation in IssuesApi.
 * @export
 * @interface IssuesApiQueryForPackagesRequest
 */
export type IssuesApiQueryForPackagesRequest = {
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof IssuesApiQueryForPackages
    */
    readonly version: string
    
    /**
    * Unique identifier for an organization
    * @type {string}
    * @memberof IssuesApiQueryForPackages
    */
    readonly orgId: string
    
} & BulkPackageUrlsRequestBody

/**
 * IssuesApiGenerated - object-oriented interface
 * @export
 * @class IssuesApiGenerated
 * @extends {BaseAPI}
 */
export class IssuesApiGenerated extends BaseAPI {
    /**
     * Get a list of a group\'s issues.
     * @summary Get issues by group ID
     * @param {IssuesApiByGroupIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssuesApiGenerated
     */
    public byGroupId(requestParameters: IssuesApiByGroupIdRequest, options?: AxiosRequestConfig) {
        return IssuesApiFp(this.configuration).byGroupId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get an issue
     * @summary Get an issue
     * @param {IssuesApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssuesApiGenerated
     */
    public getById(requestParameters: IssuesApiGetByIdRequest, options?: AxiosRequestConfig) {
        return IssuesApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get an issue
     * @summary Get an issue
     * @param {IssuesApiGetByIssueIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssuesApiGenerated
     */
    public getByIssueId(requestParameters: IssuesApiGetByIssueIdRequest, options?: AxiosRequestConfig) {
        return IssuesApiFp(this.configuration).getByIssueId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of an organization\'s issues.
     * @summary Get issues by org ID
     * @param {IssuesApiListByOrgIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssuesApiGenerated
     */
    public listByOrgId(requestParameters: IssuesApiListByOrgIdRequest, options?: AxiosRequestConfig) {
        return IssuesApiFp(this.configuration).listByOrgId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query issues for a specific package version identified by Package URL (purl). Snyk returns only direct vulnerabilities. Transitive vulnerabilities (from dependencies) are not returned because they can vary depending on context.
     * @summary List issues for a package
     * @param {IssuesApiListByPackageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssuesApiGenerated
     */
    public listByPackage(requestParameters: IssuesApiListByPackageRequest, options?: AxiosRequestConfig) {
        return IssuesApiFp(this.configuration).listByPackage(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint is not available to all customers. If you are interested please contact support. Query issues for a batch of packages identified by Package URL (purl). Only direct vulnerabilities are returned, transitive vulnerabilities (from dependencies) are not returned because they can vary depending on context.
     * @summary List issues for a given set of packages  (Currently not available to all customers)
     * @param {IssuesApiQueryForPackagesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssuesApiGenerated
     */
    public queryForPackages(requestParameters: IssuesApiQueryForPackagesRequest, options?: AxiosRequestConfig) {
        return IssuesApiFp(this.configuration).queryForPackages(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
