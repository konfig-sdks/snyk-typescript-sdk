/* tslint:disable */
/* eslint-disable */
/*
Snyk API

Missing description placeholder

The version of the OpenAPI document: REST


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CollectionCreateNewResponse } from '../models';
// @ts-ignore
import { CollectionEditCollectionResponse } from '../models';
// @ts-ignore
import { CollectionGetByIdResponse } from '../models';
// @ts-ignore
import { CollectionGetListResponse } from '../models';
// @ts-ignore
import { CreateCollectionRequest } from '../models';
// @ts-ignore
import { CreateCollectionRequestData } from '../models';
// @ts-ignore
import { DeleteProjectsFromCollectionRequest } from '../models';
// @ts-ignore
import { DeleteProjectsFromCollectionRequestDataInner } from '../models';
// @ts-ignore
import { ErrorDocument } from '../models';
// @ts-ignore
import { GetProjectsOfCollectionResponse } from '../models';
// @ts-ignore
import { UpdateCollectionRequest } from '../models';
// @ts-ignore
import { UpdateCollectionRequestData } from '../models';
// @ts-ignore
import { UpdateCollectionWithProjectsRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CollectionApi - axios parameter creator
 * @export
 */
export const CollectionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add projects to a collection by specifying an array of either project ids or target ids (for targets, the respective projects will be added, but they won\'t be updated when the target changes)
         * @summary Add projects to a collection
         * @param {string} version The requested version of the endpoint to process the request
         * @param {string} orgId Org ID
         * @param {string} collectionId Unique identifier for a collection
         * @param {UpdateCollectionWithProjectsRequest} [updateCollectionWithProjectsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addProjectsTo: async (version: string, orgId: string, collectionId: string, updateCollectionWithProjectsRequest?: UpdateCollectionWithProjectsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('addProjectsTo', 'version', version)
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('addProjectsTo', 'orgId', orgId)
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('addProjectsTo', 'collectionId', collectionId)
            const localVarPath = `/orgs/{org_id}/collections/{collection_id}/relationships/projects`
                .replace(`{${"org_id"}}`, encodeURIComponent(String(orgId !== undefined ? orgId : `-org_id-`)))
                .replace(`{${"collection_id"}}`, encodeURIComponent(String(collectionId !== undefined ? collectionId : `-collection_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateCollectionWithProjectsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/orgs/{org_id}/collections/{collection_id}/relationships/projects',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateCollectionWithProjectsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a collection
         * @summary Create a collection
         * @param {string} version The requested version of the endpoint to process the request
         * @param {string} orgId Org ID
         * @param {CreateCollectionRequest} [createCollectionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNew: async (version: string, orgId: string, createCollectionRequest?: CreateCollectionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('createNew', 'version', version)
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('createNew', 'orgId', orgId)
            const localVarPath = `/orgs/{org_id}/collections`
                .replace(`{${"org_id"}}`, encodeURIComponent(String(orgId !== undefined ? orgId : `-org_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createCollectionRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/orgs/{org_id}/collections',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createCollectionRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Edit a collection
         * @summary Edit a collection
         * @param {string} version The requested version of the endpoint to process the request
         * @param {string} orgId Org ID
         * @param {string} collectionId Unique identifier for a collection
         * @param {UpdateCollectionRequest} [updateCollectionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editCollection: async (version: string, orgId: string, collectionId: string, updateCollectionRequest?: UpdateCollectionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('editCollection', 'version', version)
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('editCollection', 'orgId', orgId)
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('editCollection', 'collectionId', collectionId)
            const localVarPath = `/orgs/{org_id}/collections/{collection_id}`
                .replace(`{${"org_id"}}`, encodeURIComponent(String(orgId !== undefined ? orgId : `-org_id-`)))
                .replace(`{${"collection_id"}}`, encodeURIComponent(String(collectionId !== undefined ? collectionId : `-collection_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateCollectionRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/orgs/{org_id}/collections/{collection_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateCollectionRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a collection
         * @summary Get a collection
         * @param {string} version The requested version of the endpoint to process the request
         * @param {string} orgId Org ID
         * @param {string} collectionId Unique identifier for a collection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (version: string, orgId: string, collectionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('getById', 'version', version)
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getById', 'orgId', orgId)
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('getById', 'collectionId', collectionId)
            const localVarPath = `/orgs/{org_id}/collections/{collection_id}`
                .replace(`{${"org_id"}}`, encodeURIComponent(String(orgId !== undefined ? orgId : `-org_id-`)))
                .replace(`{${"collection_id"}}`, encodeURIComponent(String(collectionId !== undefined ? collectionId : `-collection_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/orgs/{org_id}/collections/{collection_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return a list of organization\'s collections with issues counts  and projects count.
         * @summary Get collections
         * @param {string} version The requested version of the endpoint to process the request
         * @param {string} orgId Org ID
         * @param {string} [startingAfter] Return the page of results immediately after this cursor
         * @param {string} [endingBefore] Return the page of results immediately before this cursor
         * @param {number} [limit] Number of results to return per page
         * @param {'name' | 'projectsCount' | 'issues'} [sort] Return collections sorted by the specified attributes
         * @param {'ASC' | 'DESC'} [direction] Return collections sorted in the specified direction
         * @param {string} [name] Return collections which names include the provided string
         * @param {boolean} [isGenerated] Return collections where is_generated matches the provided boolean
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList: async (version: string, orgId: string, startingAfter?: string, endingBefore?: string, limit?: number, sort?: 'name' | 'projectsCount' | 'issues', direction?: 'ASC' | 'DESC', name?: string, isGenerated?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('getList', 'version', version)
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getList', 'orgId', orgId)
            const localVarPath = `/orgs/{org_id}/collections`
                .replace(`{${"org_id"}}`, encodeURIComponent(String(orgId !== undefined ? orgId : `-org_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }

            if (startingAfter !== undefined) {
                localVarQueryParameter['starting_after'] = startingAfter;
            }

            if (endingBefore !== undefined) {
                localVarQueryParameter['ending_before'] = endingBefore;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (isGenerated !== undefined) {
                localVarQueryParameter['is_generated'] = isGenerated;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/orgs/{org_id}/collections',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return a list of organization\'s projects that are from the specified collection.
         * @summary Get projects from the specified collection
         * @param {string} version The requested version of the endpoint to process the request
         * @param {string} orgId Org ID
         * @param {string} collectionId Unique identifier for a collection
         * @param {string} [startingAfter] Return the page of results immediately after this cursor
         * @param {string} [endingBefore] Return the page of results immediately before this cursor
         * @param {number} [limit] Number of results to return per page
         * @param {'imported' | 'last_tested_at' | 'issues'} [sort] Return projects sorted by the specified attributes
         * @param {'ASC' | 'DESC'} [direction] Return projects sorted in the specified direction
         * @param {Array<string>} [targetId] Return projects that belong to the provided targets
         * @param {Array<'vuln-groups' | 'clean-groups'>} [show] Return projects that are with or without issues
         * @param {Array<'acr' | 'api' | 'artifactory-cr' | 'aws-lambda' | 'azure-functions' | 'azure-repos' | 'bitbucket-cloud' | 'bitbucket-connect-app' | 'bitbucket-server' | 'cli' | 'cloud-foundry' | 'digitalocean-cr' | 'docker-hub' | 'ecr' | 'gcr' | 'github-cr' | 'github-enterprise' | 'github' | 'gitlab-cr' | 'gitlab' | 'google-artifact-cr' | 'harbor-cr' | 'heroku' | 'ibm-cloud' | 'kubernetes' | 'nexus-cr' | 'pivotal' | 'quay-cr' | 'terraform-cloud'>} [integration] Return projects that match the provided integration types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjects: async (version: string, orgId: string, collectionId: string, startingAfter?: string, endingBefore?: string, limit?: number, sort?: 'imported' | 'last_tested_at' | 'issues', direction?: 'ASC' | 'DESC', targetId?: Array<string>, show?: Array<'vuln-groups' | 'clean-groups'>, integration?: Array<'acr' | 'api' | 'artifactory-cr' | 'aws-lambda' | 'azure-functions' | 'azure-repos' | 'bitbucket-cloud' | 'bitbucket-connect-app' | 'bitbucket-server' | 'cli' | 'cloud-foundry' | 'digitalocean-cr' | 'docker-hub' | 'ecr' | 'gcr' | 'github-cr' | 'github-enterprise' | 'github' | 'gitlab-cr' | 'gitlab' | 'google-artifact-cr' | 'harbor-cr' | 'heroku' | 'ibm-cloud' | 'kubernetes' | 'nexus-cr' | 'pivotal' | 'quay-cr' | 'terraform-cloud'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('getProjects', 'version', version)
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getProjects', 'orgId', orgId)
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('getProjects', 'collectionId', collectionId)
            const localVarPath = `/orgs/{org_id}/collections/{collection_id}/relationships/projects`
                .replace(`{${"org_id"}}`, encodeURIComponent(String(orgId !== undefined ? orgId : `-org_id-`)))
                .replace(`{${"collection_id"}}`, encodeURIComponent(String(collectionId !== undefined ? collectionId : `-collection_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }

            if (startingAfter !== undefined) {
                localVarQueryParameter['starting_after'] = startingAfter;
            }

            if (endingBefore !== undefined) {
                localVarQueryParameter['ending_before'] = endingBefore;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (targetId) {
                localVarQueryParameter['target_id'] = targetId;
            }

            if (show) {
                localVarQueryParameter['show'] = show;
            }

            if (integration) {
                localVarQueryParameter['integration'] = integration;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/orgs/{org_id}/collections/{collection_id}/relationships/projects',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a collection
         * @summary Delete a collection
         * @param {string} version The requested version of the endpoint to process the request
         * @param {string} orgId Org ID
         * @param {string} collectionId Unique identifier for a collection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeById: async (version: string, orgId: string, collectionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('removeById', 'version', version)
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('removeById', 'orgId', orgId)
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('removeById', 'collectionId', collectionId)
            const localVarPath = `/orgs/{org_id}/collections/{collection_id}`
                .replace(`{${"org_id"}}`, encodeURIComponent(String(orgId !== undefined ? orgId : `-org_id-`)))
                .replace(`{${"collection_id"}}`, encodeURIComponent(String(collectionId !== undefined ? collectionId : `-collection_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/orgs/{org_id}/collections/{collection_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove projects from a collection by specifying an array of either project ids or target ids (for targets, the respective projects will be removed)
         * @summary Remove projects from a collection
         * @param {string} version The requested version of the endpoint to process the request
         * @param {string} orgId Org ID
         * @param {string} collectionId Unique identifier for a collection
         * @param {DeleteProjectsFromCollectionRequest} [deleteProjectsFromCollectionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeProjects: async (version: string, orgId: string, collectionId: string, deleteProjectsFromCollectionRequest?: DeleteProjectsFromCollectionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('removeProjects', 'version', version)
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('removeProjects', 'orgId', orgId)
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('removeProjects', 'collectionId', collectionId)
            const localVarPath = `/orgs/{org_id}/collections/{collection_id}/relationships/projects`
                .replace(`{${"org_id"}}`, encodeURIComponent(String(orgId !== undefined ? orgId : `-org_id-`)))
                .replace(`{${"collection_id"}}`, encodeURIComponent(String(collectionId !== undefined ? collectionId : `-collection_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: deleteProjectsFromCollectionRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/orgs/{org_id}/collections/{collection_id}/relationships/projects',
                httpMethod: 'DELETE'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(deleteProjectsFromCollectionRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CollectionApi - functional programming interface
 * @export
 */
export const CollectionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CollectionApiAxiosParamCreator(configuration)
    return {
        /**
         * Add projects to a collection by specifying an array of either project ids or target ids (for targets, the respective projects will be added, but they won\'t be updated when the target changes)
         * @summary Add projects to a collection
         * @param {CollectionApiAddProjectsToRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addProjectsTo(requestParameters: CollectionApiAddProjectsToRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const updateCollectionWithProjectsRequest: UpdateCollectionWithProjectsRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addProjectsTo(requestParameters.version, requestParameters.orgId, requestParameters.collectionId, updateCollectionWithProjectsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a collection
         * @summary Create a collection
         * @param {CollectionApiCreateNewRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNew(requestParameters: CollectionApiCreateNewRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionCreateNewResponse>> {
            const createCollectionRequest: CreateCollectionRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNew(requestParameters.version, requestParameters.orgId, createCollectionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Edit a collection
         * @summary Edit a collection
         * @param {CollectionApiEditCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editCollection(requestParameters: CollectionApiEditCollectionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionEditCollectionResponse>> {
            const updateCollectionRequest: UpdateCollectionRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.editCollection(requestParameters.version, requestParameters.orgId, requestParameters.collectionId, updateCollectionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a collection
         * @summary Get a collection
         * @param {CollectionApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: CollectionApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionGetByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.version, requestParameters.orgId, requestParameters.collectionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Return a list of organization\'s collections with issues counts  and projects count.
         * @summary Get collections
         * @param {CollectionApiGetListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getList(requestParameters: CollectionApiGetListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionGetListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getList(requestParameters.version, requestParameters.orgId, requestParameters.startingAfter, requestParameters.endingBefore, requestParameters.limit, requestParameters.sort, requestParameters.direction, requestParameters.name, requestParameters.isGenerated, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Return a list of organization\'s projects that are from the specified collection.
         * @summary Get projects from the specified collection
         * @param {CollectionApiGetProjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjects(requestParameters: CollectionApiGetProjectsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetProjectsOfCollectionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjects(requestParameters.version, requestParameters.orgId, requestParameters.collectionId, requestParameters.startingAfter, requestParameters.endingBefore, requestParameters.limit, requestParameters.sort, requestParameters.direction, requestParameters.targetId, requestParameters.show, requestParameters.integration, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a collection
         * @summary Delete a collection
         * @param {CollectionApiRemoveByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeById(requestParameters: CollectionApiRemoveByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeById(requestParameters.version, requestParameters.orgId, requestParameters.collectionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove projects from a collection by specifying an array of either project ids or target ids (for targets, the respective projects will be removed)
         * @summary Remove projects from a collection
         * @param {CollectionApiRemoveProjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeProjects(requestParameters: CollectionApiRemoveProjectsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const deleteProjectsFromCollectionRequest: DeleteProjectsFromCollectionRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeProjects(requestParameters.version, requestParameters.orgId, requestParameters.collectionId, deleteProjectsFromCollectionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CollectionApi - factory interface
 * @export
 */
export const CollectionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CollectionApiFp(configuration)
    return {
        /**
         * Add projects to a collection by specifying an array of either project ids or target ids (for targets, the respective projects will be added, but they won\'t be updated when the target changes)
         * @summary Add projects to a collection
         * @param {CollectionApiAddProjectsToRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addProjectsTo(requestParameters: CollectionApiAddProjectsToRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addProjectsTo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a collection
         * @summary Create a collection
         * @param {CollectionApiCreateNewRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNew(requestParameters: CollectionApiCreateNewRequest, options?: AxiosRequestConfig): AxiosPromise<CollectionCreateNewResponse> {
            return localVarFp.createNew(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Edit a collection
         * @summary Edit a collection
         * @param {CollectionApiEditCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editCollection(requestParameters: CollectionApiEditCollectionRequest, options?: AxiosRequestConfig): AxiosPromise<CollectionEditCollectionResponse> {
            return localVarFp.editCollection(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a collection
         * @summary Get a collection
         * @param {CollectionApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: CollectionApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<CollectionGetByIdResponse> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Return a list of organization\'s collections with issues counts  and projects count.
         * @summary Get collections
         * @param {CollectionApiGetListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList(requestParameters: CollectionApiGetListRequest, options?: AxiosRequestConfig): AxiosPromise<CollectionGetListResponse> {
            return localVarFp.getList(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Return a list of organization\'s projects that are from the specified collection.
         * @summary Get projects from the specified collection
         * @param {CollectionApiGetProjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjects(requestParameters: CollectionApiGetProjectsRequest, options?: AxiosRequestConfig): AxiosPromise<GetProjectsOfCollectionResponse> {
            return localVarFp.getProjects(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a collection
         * @summary Delete a collection
         * @param {CollectionApiRemoveByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeById(requestParameters: CollectionApiRemoveByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove projects from a collection by specifying an array of either project ids or target ids (for targets, the respective projects will be removed)
         * @summary Remove projects from a collection
         * @param {CollectionApiRemoveProjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeProjects(requestParameters: CollectionApiRemoveProjectsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeProjects(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addProjectsTo operation in CollectionApi.
 * @export
 * @interface CollectionApiAddProjectsToRequest
 */
export type CollectionApiAddProjectsToRequest = {
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof CollectionApiAddProjectsTo
    */
    readonly version: string
    
    /**
    * Org ID
    * @type {string}
    * @memberof CollectionApiAddProjectsTo
    */
    readonly orgId: string
    
    /**
    * Unique identifier for a collection
    * @type {string}
    * @memberof CollectionApiAddProjectsTo
    */
    readonly collectionId: string
    
} & UpdateCollectionWithProjectsRequest

/**
 * Request parameters for createNew operation in CollectionApi.
 * @export
 * @interface CollectionApiCreateNewRequest
 */
export type CollectionApiCreateNewRequest = {
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof CollectionApiCreateNew
    */
    readonly version: string
    
    /**
    * Org ID
    * @type {string}
    * @memberof CollectionApiCreateNew
    */
    readonly orgId: string
    
} & CreateCollectionRequest

/**
 * Request parameters for editCollection operation in CollectionApi.
 * @export
 * @interface CollectionApiEditCollectionRequest
 */
export type CollectionApiEditCollectionRequest = {
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof CollectionApiEditCollection
    */
    readonly version: string
    
    /**
    * Org ID
    * @type {string}
    * @memberof CollectionApiEditCollection
    */
    readonly orgId: string
    
    /**
    * Unique identifier for a collection
    * @type {string}
    * @memberof CollectionApiEditCollection
    */
    readonly collectionId: string
    
} & UpdateCollectionRequest

/**
 * Request parameters for getById operation in CollectionApi.
 * @export
 * @interface CollectionApiGetByIdRequest
 */
export type CollectionApiGetByIdRequest = {
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof CollectionApiGetById
    */
    readonly version: string
    
    /**
    * Org ID
    * @type {string}
    * @memberof CollectionApiGetById
    */
    readonly orgId: string
    
    /**
    * Unique identifier for a collection
    * @type {string}
    * @memberof CollectionApiGetById
    */
    readonly collectionId: string
    
}

/**
 * Request parameters for getList operation in CollectionApi.
 * @export
 * @interface CollectionApiGetListRequest
 */
export type CollectionApiGetListRequest = {
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof CollectionApiGetList
    */
    readonly version: string
    
    /**
    * Org ID
    * @type {string}
    * @memberof CollectionApiGetList
    */
    readonly orgId: string
    
    /**
    * Return the page of results immediately after this cursor
    * @type {string}
    * @memberof CollectionApiGetList
    */
    readonly startingAfter?: string
    
    /**
    * Return the page of results immediately before this cursor
    * @type {string}
    * @memberof CollectionApiGetList
    */
    readonly endingBefore?: string
    
    /**
    * Number of results to return per page
    * @type {number}
    * @memberof CollectionApiGetList
    */
    readonly limit?: number
    
    /**
    * Return collections sorted by the specified attributes
    * @type {'name' | 'projectsCount' | 'issues'}
    * @memberof CollectionApiGetList
    */
    readonly sort?: 'name' | 'projectsCount' | 'issues'
    
    /**
    * Return collections sorted in the specified direction
    * @type {'ASC' | 'DESC'}
    * @memberof CollectionApiGetList
    */
    readonly direction?: 'ASC' | 'DESC'
    
    /**
    * Return collections which names include the provided string
    * @type {string}
    * @memberof CollectionApiGetList
    */
    readonly name?: string
    
    /**
    * Return collections where is_generated matches the provided boolean
    * @type {boolean}
    * @memberof CollectionApiGetList
    */
    readonly isGenerated?: boolean
    
}

/**
 * Request parameters for getProjects operation in CollectionApi.
 * @export
 * @interface CollectionApiGetProjectsRequest
 */
export type CollectionApiGetProjectsRequest = {
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof CollectionApiGetProjects
    */
    readonly version: string
    
    /**
    * Org ID
    * @type {string}
    * @memberof CollectionApiGetProjects
    */
    readonly orgId: string
    
    /**
    * Unique identifier for a collection
    * @type {string}
    * @memberof CollectionApiGetProjects
    */
    readonly collectionId: string
    
    /**
    * Return the page of results immediately after this cursor
    * @type {string}
    * @memberof CollectionApiGetProjects
    */
    readonly startingAfter?: string
    
    /**
    * Return the page of results immediately before this cursor
    * @type {string}
    * @memberof CollectionApiGetProjects
    */
    readonly endingBefore?: string
    
    /**
    * Number of results to return per page
    * @type {number}
    * @memberof CollectionApiGetProjects
    */
    readonly limit?: number
    
    /**
    * Return projects sorted by the specified attributes
    * @type {'imported' | 'last_tested_at' | 'issues'}
    * @memberof CollectionApiGetProjects
    */
    readonly sort?: 'imported' | 'last_tested_at' | 'issues'
    
    /**
    * Return projects sorted in the specified direction
    * @type {'ASC' | 'DESC'}
    * @memberof CollectionApiGetProjects
    */
    readonly direction?: 'ASC' | 'DESC'
    
    /**
    * Return projects that belong to the provided targets
    * @type {Array<string>}
    * @memberof CollectionApiGetProjects
    */
    readonly targetId?: Array<string>
    
    /**
    * Return projects that are with or without issues
    * @type {Array<'vuln-groups' | 'clean-groups'>}
    * @memberof CollectionApiGetProjects
    */
    readonly show?: Array<'vuln-groups' | 'clean-groups'>
    
    /**
    * Return projects that match the provided integration types
    * @type {Array<'acr' | 'api' | 'artifactory-cr' | 'aws-lambda' | 'azure-functions' | 'azure-repos' | 'bitbucket-cloud' | 'bitbucket-connect-app' | 'bitbucket-server' | 'cli' | 'cloud-foundry' | 'digitalocean-cr' | 'docker-hub' | 'ecr' | 'gcr' | 'github-cr' | 'github-enterprise' | 'github' | 'gitlab-cr' | 'gitlab' | 'google-artifact-cr' | 'harbor-cr' | 'heroku' | 'ibm-cloud' | 'kubernetes' | 'nexus-cr' | 'pivotal' | 'quay-cr' | 'terraform-cloud'>}
    * @memberof CollectionApiGetProjects
    */
    readonly integration?: Array<'acr' | 'api' | 'artifactory-cr' | 'aws-lambda' | 'azure-functions' | 'azure-repos' | 'bitbucket-cloud' | 'bitbucket-connect-app' | 'bitbucket-server' | 'cli' | 'cloud-foundry' | 'digitalocean-cr' | 'docker-hub' | 'ecr' | 'gcr' | 'github-cr' | 'github-enterprise' | 'github' | 'gitlab-cr' | 'gitlab' | 'google-artifact-cr' | 'harbor-cr' | 'heroku' | 'ibm-cloud' | 'kubernetes' | 'nexus-cr' | 'pivotal' | 'quay-cr' | 'terraform-cloud'>
    
}

/**
 * Request parameters for removeById operation in CollectionApi.
 * @export
 * @interface CollectionApiRemoveByIdRequest
 */
export type CollectionApiRemoveByIdRequest = {
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof CollectionApiRemoveById
    */
    readonly version: string
    
    /**
    * Org ID
    * @type {string}
    * @memberof CollectionApiRemoveById
    */
    readonly orgId: string
    
    /**
    * Unique identifier for a collection
    * @type {string}
    * @memberof CollectionApiRemoveById
    */
    readonly collectionId: string
    
}

/**
 * Request parameters for removeProjects operation in CollectionApi.
 * @export
 * @interface CollectionApiRemoveProjectsRequest
 */
export type CollectionApiRemoveProjectsRequest = {
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof CollectionApiRemoveProjects
    */
    readonly version: string
    
    /**
    * Org ID
    * @type {string}
    * @memberof CollectionApiRemoveProjects
    */
    readonly orgId: string
    
    /**
    * Unique identifier for a collection
    * @type {string}
    * @memberof CollectionApiRemoveProjects
    */
    readonly collectionId: string
    
} & DeleteProjectsFromCollectionRequest

/**
 * CollectionApiGenerated - object-oriented interface
 * @export
 * @class CollectionApiGenerated
 * @extends {BaseAPI}
 */
export class CollectionApiGenerated extends BaseAPI {
    /**
     * Add projects to a collection by specifying an array of either project ids or target ids (for targets, the respective projects will be added, but they won\'t be updated when the target changes)
     * @summary Add projects to a collection
     * @param {CollectionApiAddProjectsToRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionApiGenerated
     */
    public addProjectsTo(requestParameters: CollectionApiAddProjectsToRequest, options?: AxiosRequestConfig) {
        return CollectionApiFp(this.configuration).addProjectsTo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a collection
     * @summary Create a collection
     * @param {CollectionApiCreateNewRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionApiGenerated
     */
    public createNew(requestParameters: CollectionApiCreateNewRequest, options?: AxiosRequestConfig) {
        return CollectionApiFp(this.configuration).createNew(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Edit a collection
     * @summary Edit a collection
     * @param {CollectionApiEditCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionApiGenerated
     */
    public editCollection(requestParameters: CollectionApiEditCollectionRequest, options?: AxiosRequestConfig) {
        return CollectionApiFp(this.configuration).editCollection(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a collection
     * @summary Get a collection
     * @param {CollectionApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionApiGenerated
     */
    public getById(requestParameters: CollectionApiGetByIdRequest, options?: AxiosRequestConfig) {
        return CollectionApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return a list of organization\'s collections with issues counts  and projects count.
     * @summary Get collections
     * @param {CollectionApiGetListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionApiGenerated
     */
    public getList(requestParameters: CollectionApiGetListRequest, options?: AxiosRequestConfig) {
        return CollectionApiFp(this.configuration).getList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return a list of organization\'s projects that are from the specified collection.
     * @summary Get projects from the specified collection
     * @param {CollectionApiGetProjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionApiGenerated
     */
    public getProjects(requestParameters: CollectionApiGetProjectsRequest, options?: AxiosRequestConfig) {
        return CollectionApiFp(this.configuration).getProjects(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a collection
     * @summary Delete a collection
     * @param {CollectionApiRemoveByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionApiGenerated
     */
    public removeById(requestParameters: CollectionApiRemoveByIdRequest, options?: AxiosRequestConfig) {
        return CollectionApiFp(this.configuration).removeById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove projects from a collection by specifying an array of either project ids or target ids (for targets, the respective projects will be removed)
     * @summary Remove projects from a collection
     * @param {CollectionApiRemoveProjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionApiGenerated
     */
    public removeProjects(requestParameters: CollectionApiRemoveProjectsRequest, options?: AxiosRequestConfig) {
        return CollectionApiFp(this.configuration).removeProjects(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
