/* tslint:disable */
/* eslint-disable */
/*
Snyk API

Snyk helps software-driven businesses develop fast and stay secure. Continuously find and fix vulnerabilities for npm, Maven, NuGet, RubyGems, PyPI and more.

The version of the OpenAPI document: REST


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorDocument } from '../models';
// @ts-ignore
import { TargetsGetByIdResponse } from '../models';
// @ts-ignore
import { TargetsListByOrgIdResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * TargetsApi - axios parameter creator
 * @export
 */
export const TargetsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete the specified target.
         * @summary Delete target by target ID
         * @param {string} version The requested version of the endpoint to process the request
         * @param {string} orgId The id of the org to delete
         * @param {string} targetId The id of the target to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteById: async (version: string, orgId: string, targetId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('deleteById', 'version', version)
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('deleteById', 'orgId', orgId)
            // verify required parameter 'targetId' is not null or undefined
            assertParamExists('deleteById', 'targetId', targetId)
            const localVarPath = `/orgs/{org_id}/targets/{target_id}`
                .replace(`{${"org_id"}}`, encodeURIComponent(String(orgId !== undefined ? orgId : `-org_id-`)))
                .replace(`{${"target_id"}}`, encodeURIComponent(String(targetId !== undefined ? targetId : `-target_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/orgs/{org_id}/targets/{target_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a specified target for an organization.
         * @summary Get target by target ID
         * @param {string} version The requested version of the endpoint to process the request
         * @param {string} orgId The id of the org to return the target from
         * @param {string} targetId The id of the target to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (version: string, orgId: string, targetId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('getById', 'version', version)
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getById', 'orgId', orgId)
            // verify required parameter 'targetId' is not null or undefined
            assertParamExists('getById', 'targetId', targetId)
            const localVarPath = `/orgs/{org_id}/targets/{target_id}`
                .replace(`{${"org_id"}}`, encodeURIComponent(String(orgId !== undefined ? orgId : `-org_id-`)))
                .replace(`{${"target_id"}}`, encodeURIComponent(String(targetId !== undefined ? targetId : `-target_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/orgs/{org_id}/targets/{target_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of an organization\'s targets.
         * @summary Get targets by org ID
         * @param {string} version The requested version of the endpoint to process the request
         * @param {string} orgId The id of the org to return a list of targets
         * @param {string} [startingAfter] Return the page of results immediately after this cursor
         * @param {string} [endingBefore] Return the page of results immediately before this cursor
         * @param {boolean} [count] Calculate total amount of filtered results
         * @param {number} [limit] Number of results to return per page
         * @param {boolean} [isPrivate] Return targets that match the provided value of is_private
         * @param {boolean} [excludeEmpty] Return only the targets that has projects
         * @param {string} [url] Return targets that match the provided remote_url.
         * @param {Array<'bitbucket-server' | 'gitlab' | 'github-enterprise' | 'bitbucket-cloud' | 'bitbucket-connect-app' | 'azure-repos' | 'github' | 'github-cloud-app' | 'github-server-app' | 'cli' | 'docker-hub' | 'in-memory-fs' | 'acr' | 'ecr' | 'gcr' | 'artifactory-cr' | 'harbor-cr' | 'quay-cr' | 'github-cr' | 'nexus-cr' | 'nexus-private-repo' | 'digitalocean-cr' | 'gitlab-cr' | 'google-artifact-cr' | 'heroku' | 'kubernetes' | 'api' | 'aws-lambda' | 'azure-functions' | 'cloud-foundry' | 'pivotal' | 'ibm-cloud' | 'terraform-cloud'>} [sourceTypes] Return targets that match the provided source_types
         * @param {string} [displayName] Return targets with display names starting with the provided string
         * @param {string} [createdGte] Return only targets which have been created at or after the specified date. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listByOrgId: async (version: string, orgId: string, startingAfter?: string, endingBefore?: string, count?: boolean, limit?: number, isPrivate?: boolean, excludeEmpty?: boolean, url?: string, sourceTypes?: Array<'bitbucket-server' | 'gitlab' | 'github-enterprise' | 'bitbucket-cloud' | 'bitbucket-connect-app' | 'azure-repos' | 'github' | 'github-cloud-app' | 'github-server-app' | 'cli' | 'docker-hub' | 'in-memory-fs' | 'acr' | 'ecr' | 'gcr' | 'artifactory-cr' | 'harbor-cr' | 'quay-cr' | 'github-cr' | 'nexus-cr' | 'nexus-private-repo' | 'digitalocean-cr' | 'gitlab-cr' | 'google-artifact-cr' | 'heroku' | 'kubernetes' | 'api' | 'aws-lambda' | 'azure-functions' | 'cloud-foundry' | 'pivotal' | 'ibm-cloud' | 'terraform-cloud'>, displayName?: string, createdGte?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('listByOrgId', 'version', version)
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('listByOrgId', 'orgId', orgId)
            const localVarPath = `/orgs/{org_id}/targets`
                .replace(`{${"org_id"}}`, encodeURIComponent(String(orgId !== undefined ? orgId : `-org_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }

            if (startingAfter !== undefined) {
                localVarQueryParameter['starting_after'] = startingAfter;
            }

            if (endingBefore !== undefined) {
                localVarQueryParameter['ending_before'] = endingBefore;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (isPrivate !== undefined) {
                localVarQueryParameter['is_private'] = isPrivate;
            }

            if (excludeEmpty !== undefined) {
                localVarQueryParameter['exclude_empty'] = excludeEmpty;
            }

            if (url !== undefined) {
                localVarQueryParameter['url'] = url;
            }

            if (sourceTypes) {
                localVarQueryParameter['source_types'] = sourceTypes.join(COLLECTION_FORMATS.csv);
            }

            if (displayName !== undefined) {
                localVarQueryParameter['display_name'] = displayName;
            }

            if (createdGte !== undefined) {
                localVarQueryParameter['created_gte'] = (createdGte as any instanceof Date) ?
                    (createdGte as any).toISOString() :
                    createdGte;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/orgs/{org_id}/targets',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TargetsApi - functional programming interface
 * @export
 */
export const TargetsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TargetsApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete the specified target.
         * @summary Delete target by target ID
         * @param {TargetsApiDeleteByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteById(requestParameters: TargetsApiDeleteByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteById(requestParameters.version, requestParameters.orgId, requestParameters.targetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a specified target for an organization.
         * @summary Get target by target ID
         * @param {TargetsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: TargetsApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TargetsGetByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.version, requestParameters.orgId, requestParameters.targetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of an organization\'s targets.
         * @summary Get targets by org ID
         * @param {TargetsApiListByOrgIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listByOrgId(requestParameters: TargetsApiListByOrgIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TargetsListByOrgIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listByOrgId(requestParameters.version, requestParameters.orgId, requestParameters.startingAfter, requestParameters.endingBefore, requestParameters.count, requestParameters.limit, requestParameters.isPrivate, requestParameters.excludeEmpty, requestParameters.url, requestParameters.sourceTypes, requestParameters.displayName, requestParameters.createdGte, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TargetsApi - factory interface
 * @export
 */
export const TargetsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TargetsApiFp(configuration)
    return {
        /**
         * Delete the specified target.
         * @summary Delete target by target ID
         * @param {TargetsApiDeleteByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteById(requestParameters: TargetsApiDeleteByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a specified target for an organization.
         * @summary Get target by target ID
         * @param {TargetsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: TargetsApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<TargetsGetByIdResponse> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of an organization\'s targets.
         * @summary Get targets by org ID
         * @param {TargetsApiListByOrgIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listByOrgId(requestParameters: TargetsApiListByOrgIdRequest, options?: AxiosRequestConfig): AxiosPromise<TargetsListByOrgIdResponse> {
            return localVarFp.listByOrgId(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteById operation in TargetsApi.
 * @export
 * @interface TargetsApiDeleteByIdRequest
 */
export type TargetsApiDeleteByIdRequest = {
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof TargetsApiDeleteById
    */
    readonly version: string
    
    /**
    * The id of the org to delete
    * @type {string}
    * @memberof TargetsApiDeleteById
    */
    readonly orgId: string
    
    /**
    * The id of the target to delete
    * @type {string}
    * @memberof TargetsApiDeleteById
    */
    readonly targetId: string
    
}

/**
 * Request parameters for getById operation in TargetsApi.
 * @export
 * @interface TargetsApiGetByIdRequest
 */
export type TargetsApiGetByIdRequest = {
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof TargetsApiGetById
    */
    readonly version: string
    
    /**
    * The id of the org to return the target from
    * @type {string}
    * @memberof TargetsApiGetById
    */
    readonly orgId: string
    
    /**
    * The id of the target to return
    * @type {string}
    * @memberof TargetsApiGetById
    */
    readonly targetId: string
    
}

/**
 * Request parameters for listByOrgId operation in TargetsApi.
 * @export
 * @interface TargetsApiListByOrgIdRequest
 */
export type TargetsApiListByOrgIdRequest = {
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof TargetsApiListByOrgId
    */
    readonly version: string
    
    /**
    * The id of the org to return a list of targets
    * @type {string}
    * @memberof TargetsApiListByOrgId
    */
    readonly orgId: string
    
    /**
    * Return the page of results immediately after this cursor
    * @type {string}
    * @memberof TargetsApiListByOrgId
    */
    readonly startingAfter?: string
    
    /**
    * Return the page of results immediately before this cursor
    * @type {string}
    * @memberof TargetsApiListByOrgId
    */
    readonly endingBefore?: string
    
    /**
    * Calculate total amount of filtered results
    * @type {boolean}
    * @memberof TargetsApiListByOrgId
    */
    readonly count?: boolean
    
    /**
    * Number of results to return per page
    * @type {number}
    * @memberof TargetsApiListByOrgId
    */
    readonly limit?: number
    
    /**
    * Return targets that match the provided value of is_private
    * @type {boolean}
    * @memberof TargetsApiListByOrgId
    */
    readonly isPrivate?: boolean
    
    /**
    * Return only the targets that has projects
    * @type {boolean}
    * @memberof TargetsApiListByOrgId
    */
    readonly excludeEmpty?: boolean
    
    /**
    * Return targets that match the provided remote_url.
    * @type {string}
    * @memberof TargetsApiListByOrgId
    */
    readonly url?: string
    
    /**
    * Return targets that match the provided source_types
    * @type {Array<'bitbucket-server' | 'gitlab' | 'github-enterprise' | 'bitbucket-cloud' | 'bitbucket-connect-app' | 'azure-repos' | 'github' | 'github-cloud-app' | 'github-server-app' | 'cli' | 'docker-hub' | 'in-memory-fs' | 'acr' | 'ecr' | 'gcr' | 'artifactory-cr' | 'harbor-cr' | 'quay-cr' | 'github-cr' | 'nexus-cr' | 'nexus-private-repo' | 'digitalocean-cr' | 'gitlab-cr' | 'google-artifact-cr' | 'heroku' | 'kubernetes' | 'api' | 'aws-lambda' | 'azure-functions' | 'cloud-foundry' | 'pivotal' | 'ibm-cloud' | 'terraform-cloud'>}
    * @memberof TargetsApiListByOrgId
    */
    readonly sourceTypes?: Array<'bitbucket-server' | 'gitlab' | 'github-enterprise' | 'bitbucket-cloud' | 'bitbucket-connect-app' | 'azure-repos' | 'github' | 'github-cloud-app' | 'github-server-app' | 'cli' | 'docker-hub' | 'in-memory-fs' | 'acr' | 'ecr' | 'gcr' | 'artifactory-cr' | 'harbor-cr' | 'quay-cr' | 'github-cr' | 'nexus-cr' | 'nexus-private-repo' | 'digitalocean-cr' | 'gitlab-cr' | 'google-artifact-cr' | 'heroku' | 'kubernetes' | 'api' | 'aws-lambda' | 'azure-functions' | 'cloud-foundry' | 'pivotal' | 'ibm-cloud' | 'terraform-cloud'>
    
    /**
    * Return targets with display names starting with the provided string
    * @type {string}
    * @memberof TargetsApiListByOrgId
    */
    readonly displayName?: string
    
    /**
    * Return only targets which have been created at or after the specified date. 
    * @type {string}
    * @memberof TargetsApiListByOrgId
    */
    readonly createdGte?: string
    
}

/**
 * TargetsApiGenerated - object-oriented interface
 * @export
 * @class TargetsApiGenerated
 * @extends {BaseAPI}
 */
export class TargetsApiGenerated extends BaseAPI {
    /**
     * Delete the specified target.
     * @summary Delete target by target ID
     * @param {TargetsApiDeleteByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TargetsApiGenerated
     */
    public deleteById(requestParameters: TargetsApiDeleteByIdRequest, options?: AxiosRequestConfig) {
        return TargetsApiFp(this.configuration).deleteById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a specified target for an organization.
     * @summary Get target by target ID
     * @param {TargetsApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TargetsApiGenerated
     */
    public getById(requestParameters: TargetsApiGetByIdRequest, options?: AxiosRequestConfig) {
        return TargetsApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of an organization\'s targets.
     * @summary Get targets by org ID
     * @param {TargetsApiListByOrgIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TargetsApiGenerated
     */
    public listByOrgId(requestParameters: TargetsApiListByOrgIdRequest, options?: AxiosRequestConfig) {
        return TargetsApiFp(this.configuration).listByOrgId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
