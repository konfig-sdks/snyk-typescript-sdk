/* tslint:disable */
/* eslint-disable */
/*
Snyk API

Snyk helps software-driven businesses develop fast and stay secure. Continuously find and fix vulnerabilities for npm, Maven, NuGet, RubyGems, PyPI and more.

The version of the OpenAPI document: REST


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AppPatchRequest } from '../models';
// @ts-ignore
import { AppPatchRequestData } from '../models';
// @ts-ignore
import { AppPostRequest } from '../models';
// @ts-ignore
import { AppPostRequestData } from '../models';
// @ts-ignore
import { AppPostResponse } from '../models';
// @ts-ignore
import { AppsByInstallId401Response } from '../models';
// @ts-ignore
import { AppsByInstallId403Response } from '../models';
// @ts-ignore
import { AppsByInstallId404Response } from '../models';
// @ts-ignore
import { AppsByInstallId409Response } from '../models';
// @ts-ignore
import { AppsByInstallId500Response } from '../models';
// @ts-ignore
import { AppsByInstallIdResponse } from '../models';
// @ts-ignore
import { AppsCreateInstallSecret400Response } from '../models';
// @ts-ignore
import { AppsCreateInstallSecret401Response } from '../models';
// @ts-ignore
import { AppsCreateInstallSecret403Response } from '../models';
// @ts-ignore
import { AppsCreateInstallSecret404Response } from '../models';
// @ts-ignore
import { AppsCreateInstallSecret409Response } from '../models';
// @ts-ignore
import { AppsCreateInstallSecret500Response } from '../models';
// @ts-ignore
import { AppsCreateInstallSecretRequest } from '../models';
// @ts-ignore
import { AppsCreateInstallSecretRequestData } from '../models';
// @ts-ignore
import { AppsCreateInstallSecretResponse } from '../models';
// @ts-ignore
import { AppsCreateNewAppForOrganization401Response } from '../models';
// @ts-ignore
import { AppsCreateNewAppForOrganization403Response } from '../models';
// @ts-ignore
import { AppsCreateNewAppForOrganization404Response } from '../models';
// @ts-ignore
import { AppsCreateNewAppForOrganization409Response } from '../models';
// @ts-ignore
import { AppsCreateNewAppForOrganization500Response } from '../models';
// @ts-ignore
import { AppsCreateNewAppForOrganizationResponse } from '../models';
// @ts-ignore
import { AppsCreateOrganizationApp401Response } from '../models';
// @ts-ignore
import { AppsCreateOrganizationApp403Response } from '../models';
// @ts-ignore
import { AppsCreateOrganizationApp404Response } from '../models';
// @ts-ignore
import { AppsCreateOrganizationApp409Response } from '../models';
// @ts-ignore
import { AppsCreateOrganizationApp500Response } from '../models';
// @ts-ignore
import { AppsCreateOrganizationAppResponse } from '../models';
// @ts-ignore
import { AppsDeleteAppById401Response } from '../models';
// @ts-ignore
import { AppsDeleteAppById403Response } from '../models';
// @ts-ignore
import { AppsDeleteAppById404Response } from '../models';
// @ts-ignore
import { AppsDeleteAppById409Response } from '../models';
// @ts-ignore
import { AppsDeleteAppById500Response } from '../models';
// @ts-ignore
import { AppsDeleteAppByIdResponse } from '../models';
// @ts-ignore
import { AppsDeleteByAppId401Response } from '../models';
// @ts-ignore
import { AppsDeleteByAppId403Response } from '../models';
// @ts-ignore
import { AppsDeleteByAppId404Response } from '../models';
// @ts-ignore
import { AppsDeleteByAppId409Response } from '../models';
// @ts-ignore
import { AppsDeleteByAppId500Response } from '../models';
// @ts-ignore
import { AppsDeleteByAppIdResponse } from '../models';
// @ts-ignore
import { AppsGetActiveSessions400Response } from '../models';
// @ts-ignore
import { AppsGetActiveSessions401Response } from '../models';
// @ts-ignore
import { AppsGetActiveSessions403Response } from '../models';
// @ts-ignore
import { AppsGetActiveSessions404Response } from '../models';
// @ts-ignore
import { AppsGetActiveSessions409Response } from '../models';
// @ts-ignore
import { AppsGetActiveSessions500Response } from '../models';
// @ts-ignore
import { AppsGetActiveSessionsResponse } from '../models';
// @ts-ignore
import { AppsGetByAppId400Response } from '../models';
// @ts-ignore
import { AppsGetByAppId401Response } from '../models';
// @ts-ignore
import { AppsGetByAppId403Response } from '../models';
// @ts-ignore
import { AppsGetByAppId404Response } from '../models';
// @ts-ignore
import { AppsGetByAppId409Response } from '../models';
// @ts-ignore
import { AppsGetByAppId500Response } from '../models';
// @ts-ignore
import { AppsGetByAppIdResponse } from '../models';
// @ts-ignore
import { AppsGetByClientId400Response } from '../models';
// @ts-ignore
import { AppsGetByClientId401Response } from '../models';
// @ts-ignore
import { AppsGetByClientId403Response } from '../models';
// @ts-ignore
import { AppsGetByClientId404Response } from '../models';
// @ts-ignore
import { AppsGetByClientId409Response } from '../models';
// @ts-ignore
import { AppsGetByClientId500Response } from '../models';
// @ts-ignore
import { AppsGetByClientIdResponse } from '../models';
// @ts-ignore
import { AppsInstallGroupApp400Response } from '../models';
// @ts-ignore
import { AppsInstallGroupApp401Response } from '../models';
// @ts-ignore
import { AppsInstallGroupApp403Response } from '../models';
// @ts-ignore
import { AppsInstallGroupApp404Response } from '../models';
// @ts-ignore
import { AppsInstallGroupApp409Response } from '../models';
// @ts-ignore
import { AppsInstallGroupApp500Response } from '../models';
// @ts-ignore
import { AppsInstallGroupAppRequest } from '../models';
// @ts-ignore
import { AppsInstallGroupAppRequestData } from '../models';
// @ts-ignore
import { AppsInstallGroupAppRequestRelationships } from '../models';
// @ts-ignore
import { AppsInstallGroupAppResponse } from '../models';
// @ts-ignore
import { AppsInstallSnykAppToOrg400Response } from '../models';
// @ts-ignore
import { AppsInstallSnykAppToOrg401Response } from '../models';
// @ts-ignore
import { AppsInstallSnykAppToOrg403Response } from '../models';
// @ts-ignore
import { AppsInstallSnykAppToOrg404Response } from '../models';
// @ts-ignore
import { AppsInstallSnykAppToOrg409Response } from '../models';
// @ts-ignore
import { AppsInstallSnykAppToOrg500Response } from '../models';
// @ts-ignore
import { AppsInstallSnykAppToOrgRequest } from '../models';
// @ts-ignore
import { AppsInstallSnykAppToOrgRequestData } from '../models';
// @ts-ignore
import { AppsInstallSnykAppToOrgRequestRelationships } from '../models';
// @ts-ignore
import { AppsInstallSnykAppToOrgResponse } from '../models';
// @ts-ignore
import { AppsListAppBots400Response } from '../models';
// @ts-ignore
import { AppsListAppBots401Response } from '../models';
// @ts-ignore
import { AppsListAppBots403Response } from '../models';
// @ts-ignore
import { AppsListAppBots404Response } from '../models';
// @ts-ignore
import { AppsListAppBots409Response } from '../models';
// @ts-ignore
import { AppsListAppBots500Response } from '../models';
// @ts-ignore
import { AppsListAppBotsResponse } from '../models';
// @ts-ignore
import { AppsListApps400Response } from '../models';
// @ts-ignore
import { AppsListApps401Response } from '../models';
// @ts-ignore
import { AppsListApps403Response } from '../models';
// @ts-ignore
import { AppsListApps404Response } from '../models';
// @ts-ignore
import { AppsListApps409Response } from '../models';
// @ts-ignore
import { AppsListApps500Response } from '../models';
// @ts-ignore
import { AppsListAppsResponse } from '../models';
// @ts-ignore
import { AppsListGroupAppInstalls400Response } from '../models';
// @ts-ignore
import { AppsListGroupAppInstalls401Response } from '../models';
// @ts-ignore
import { AppsListGroupAppInstalls403Response } from '../models';
// @ts-ignore
import { AppsListGroupAppInstalls404Response } from '../models';
// @ts-ignore
import { AppsListGroupAppInstalls409Response } from '../models';
// @ts-ignore
import { AppsListGroupAppInstalls500Response } from '../models';
// @ts-ignore
import { AppsListGroupAppInstallsResponse } from '../models';
// @ts-ignore
import { AppsListOrgApps400Response } from '../models';
// @ts-ignore
import { AppsListOrgApps401Response } from '../models';
// @ts-ignore
import { AppsListOrgApps403Response } from '../models';
// @ts-ignore
import { AppsListOrgApps404Response } from '../models';
// @ts-ignore
import { AppsListOrgApps409Response } from '../models';
// @ts-ignore
import { AppsListOrgApps500Response } from '../models';
// @ts-ignore
import { AppsListOrgAppsResponse } from '../models';
// @ts-ignore
import { AppsListOrgCreations400Response } from '../models';
// @ts-ignore
import { AppsListOrgCreations401Response } from '../models';
// @ts-ignore
import { AppsListOrgCreations403Response } from '../models';
// @ts-ignore
import { AppsListOrgCreations404Response } from '../models';
// @ts-ignore
import { AppsListOrgCreations409Response } from '../models';
// @ts-ignore
import { AppsListOrgCreations500Response } from '../models';
// @ts-ignore
import { AppsListOrgCreationsResponse } from '../models';
// @ts-ignore
import { AppsListOrgInstalls400Response } from '../models';
// @ts-ignore
import { AppsListOrgInstalls401Response } from '../models';
// @ts-ignore
import { AppsListOrgInstalls403Response } from '../models';
// @ts-ignore
import { AppsListOrgInstalls404Response } from '../models';
// @ts-ignore
import { AppsListOrgInstalls409Response } from '../models';
// @ts-ignore
import { AppsListOrgInstalls500Response } from '../models';
// @ts-ignore
import { AppsListOrgInstallsResponse } from '../models';
// @ts-ignore
import { AppsListUserInstalledApps400Response } from '../models';
// @ts-ignore
import { AppsListUserInstalledApps401Response } from '../models';
// @ts-ignore
import { AppsListUserInstalledApps403Response } from '../models';
// @ts-ignore
import { AppsListUserInstalledApps404Response } from '../models';
// @ts-ignore
import { AppsListUserInstalledApps409Response } from '../models';
// @ts-ignore
import { AppsListUserInstalledApps500Response } from '../models';
// @ts-ignore
import { AppsListUserInstalledAppsResponse } from '../models';
// @ts-ignore
import { AppsManageClientSecretForSnykApp200Response } from '../models';
// @ts-ignore
import { AppsManageClientSecretForSnykApp400Response } from '../models';
// @ts-ignore
import { AppsManageClientSecretForSnykApp401Response } from '../models';
// @ts-ignore
import { AppsManageClientSecretForSnykApp403Response } from '../models';
// @ts-ignore
import { AppsManageClientSecretForSnykApp404Response } from '../models';
// @ts-ignore
import { AppsManageClientSecretForSnykApp409Response } from '../models';
// @ts-ignore
import { AppsManageClientSecretForSnykApp500Response } from '../models';
// @ts-ignore
import { AppsManageClientSecretForSnykAppRequest } from '../models';
// @ts-ignore
import { AppsManageClientSecretForSnykAppRequest1 } from '../models';
// @ts-ignore
import { AppsManageClientSecretForSnykAppResponse } from '../models';
// @ts-ignore
import { AppsManageClientSecrets400Response } from '../models';
// @ts-ignore
import { AppsManageClientSecrets401Response } from '../models';
// @ts-ignore
import { AppsManageClientSecrets403Response } from '../models';
// @ts-ignore
import { AppsManageClientSecrets404Response } from '../models';
// @ts-ignore
import { AppsManageClientSecrets409Response } from '../models';
// @ts-ignore
import { AppsManageClientSecrets500Response } from '../models';
// @ts-ignore
import { AppsManageClientSecretsRequest } from '../models';
// @ts-ignore
import { AppsManageClientSecretsResponse } from '../models';
// @ts-ignore
import { AppsRevokeAppById401Response } from '../models';
// @ts-ignore
import { AppsRevokeAppById403Response } from '../models';
// @ts-ignore
import { AppsRevokeAppById404Response } from '../models';
// @ts-ignore
import { AppsRevokeAppById409Response } from '../models';
// @ts-ignore
import { AppsRevokeAppById500Response } from '../models';
// @ts-ignore
import { AppsRevokeAppByIdResponse } from '../models';
// @ts-ignore
import { AppsRevokeBotAuthorization401Response } from '../models';
// @ts-ignore
import { AppsRevokeBotAuthorization403Response } from '../models';
// @ts-ignore
import { AppsRevokeBotAuthorization404Response } from '../models';
// @ts-ignore
import { AppsRevokeBotAuthorization409Response } from '../models';
// @ts-ignore
import { AppsRevokeBotAuthorization500Response } from '../models';
// @ts-ignore
import { AppsRevokeBotAuthorizationResponse } from '../models';
// @ts-ignore
import { AppsRevokeByInstallId401Response } from '../models';
// @ts-ignore
import { AppsRevokeByInstallId403Response } from '../models';
// @ts-ignore
import { AppsRevokeByInstallId404Response } from '../models';
// @ts-ignore
import { AppsRevokeByInstallId409Response } from '../models';
// @ts-ignore
import { AppsRevokeByInstallId500Response } from '../models';
// @ts-ignore
import { AppsRevokeByInstallIdResponse } from '../models';
// @ts-ignore
import { AppsRevokeGroupAppInstall401Response } from '../models';
// @ts-ignore
import { AppsRevokeGroupAppInstall403Response } from '../models';
// @ts-ignore
import { AppsRevokeGroupAppInstall404Response } from '../models';
// @ts-ignore
import { AppsRevokeGroupAppInstall409Response } from '../models';
// @ts-ignore
import { AppsRevokeGroupAppInstall500Response } from '../models';
// @ts-ignore
import { AppsRevokeGroupAppInstallResponse } from '../models';
// @ts-ignore
import { AppsRevokeUserAppSession401Response } from '../models';
// @ts-ignore
import { AppsRevokeUserAppSession403Response } from '../models';
// @ts-ignore
import { AppsRevokeUserAppSession404Response } from '../models';
// @ts-ignore
import { AppsRevokeUserAppSession409Response } from '../models';
// @ts-ignore
import { AppsRevokeUserAppSession500Response } from '../models';
// @ts-ignore
import { AppsRevokeUserAppSessionResponse } from '../models';
// @ts-ignore
import { AppsUpdateAttributes400Response } from '../models';
// @ts-ignore
import { AppsUpdateAttributes401Response } from '../models';
// @ts-ignore
import { AppsUpdateAttributes403Response } from '../models';
// @ts-ignore
import { AppsUpdateAttributes404Response } from '../models';
// @ts-ignore
import { AppsUpdateAttributes409Response } from '../models';
// @ts-ignore
import { AppsUpdateAttributes500Response } from '../models';
// @ts-ignore
import { AppsUpdateAttributesResponse } from '../models';
// @ts-ignore
import { AppsUpdateCreationAttributesById400Response } from '../models';
// @ts-ignore
import { AppsUpdateCreationAttributesById401Response } from '../models';
// @ts-ignore
import { AppsUpdateCreationAttributesById403Response } from '../models';
// @ts-ignore
import { AppsUpdateCreationAttributesById404Response } from '../models';
// @ts-ignore
import { AppsUpdateCreationAttributesById409Response } from '../models';
// @ts-ignore
import { AppsUpdateCreationAttributesById500Response } from '../models';
// @ts-ignore
import { AppsUpdateCreationAttributesByIdResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AppsApi - axios parameter creator
 * @export
 */
export const AppsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Revoke app authorization for an Snyk Organization with install ID.
         * @summary Revoke app authorization for an Snyk Organization with install ID.
         * @param {string} version The requested version of the endpoint to process the request
         * @param {string} orgId Org ID
         * @param {string} installId Install ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        byInstallId: async (version: string, orgId: string, installId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('byInstallId', 'version', version)
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('byInstallId', 'orgId', orgId)
            // verify required parameter 'installId' is not null or undefined
            assertParamExists('byInstallId', 'installId', installId)
            const localVarPath = `/orgs/{org_id}/apps/installs/{install_id}`
                .replace(`{${"org_id"}}`, encodeURIComponent(String(orgId !== undefined ? orgId : `-org_id-`)))
                .replace(`{${"install_id"}}`, encodeURIComponent(String(installId !== undefined ? installId : `-install_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/orgs/{org_id}/apps/installs/{install_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Manage client secret for non-interactive Snyk App installations.
         * @summary Manage client secret for non-interactive Snyk App installations.
         * @param {string} version The requested version of the endpoint to process the request
         * @param {string} groupId Group ID
         * @param {string} installId Install ID
         * @param {AppsCreateInstallSecretRequest} [appsCreateInstallSecretRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createInstallSecret: async (version: string, groupId: string, installId: string, appsCreateInstallSecretRequest?: AppsCreateInstallSecretRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('createInstallSecret', 'version', version)
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('createInstallSecret', 'groupId', groupId)
            // verify required parameter 'installId' is not null or undefined
            assertParamExists('createInstallSecret', 'installId', installId)
            const localVarPath = `/groups/{group_id}/apps/installs/{install_id}/secrets`
                .replace(`{${"group_id"}}`, encodeURIComponent(String(groupId !== undefined ? groupId : `-group_id-`)))
                .replace(`{${"install_id"}}`, encodeURIComponent(String(installId !== undefined ? installId : `-install_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: appsCreateInstallSecretRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/groups/{group_id}/apps/installs/{install_id}/secrets',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(appsCreateInstallSecretRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new Snyk App for an organization.
         * @summary Create a new Snyk App for an organization.
         * @param {string} version The requested version of the endpoint to process the request
         * @param {string} orgId Org ID
         * @param {AppPostRequest} [appPostRequest] Snyk App details for app to be created.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewAppForOrganization: async (version: string, orgId: string, appPostRequest?: AppPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('createNewAppForOrganization', 'version', version)
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('createNewAppForOrganization', 'orgId', orgId)
            const localVarPath = `/orgs/{org_id}/apps/creations`
                .replace(`{${"org_id"}}`, encodeURIComponent(String(orgId !== undefined ? orgId : `-org_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: appPostRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/orgs/{org_id}/apps/creations',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(appPostRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new app for an organization. Deprecated, use /orgs/{org_id}/apps/creations instead.
         * @summary Create a new app for an organization.
         * @param {string} version The requested version of the endpoint to process the request
         * @param {string} orgId Org ID
         * @param {AppPostRequest} [appPostRequest] app to be created
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        createOrganizationApp: async (version: string, orgId: string, appPostRequest?: AppPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('createOrganizationApp', 'version', version)
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('createOrganizationApp', 'orgId', orgId)
            const localVarPath = `/orgs/{org_id}/apps`
                .replace(`{${"org_id"}}`, encodeURIComponent(String(orgId !== undefined ? orgId : `-org_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: appPostRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/orgs/{org_id}/apps',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(appPostRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an app by app id. Deprecated, use /orgs/{org_id}/apps/creations/{app_id} instead.
         * @summary Delete an app
         * @param {string} version The requested version of the endpoint to process the request
         * @param {string} orgId Org ID
         * @param {string} clientId Client ID
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        deleteAppById: async (version: string, orgId: string, clientId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('deleteAppById', 'version', version)
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('deleteAppById', 'orgId', orgId)
            // verify required parameter 'clientId' is not null or undefined
            assertParamExists('deleteAppById', 'clientId', clientId)
            const localVarPath = `/orgs/{org_id}/apps/{client_id}`
                .replace(`{${"org_id"}}`, encodeURIComponent(String(orgId !== undefined ? orgId : `-org_id-`)))
                .replace(`{${"client_id"}}`, encodeURIComponent(String(clientId !== undefined ? clientId : `-client_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/orgs/{org_id}/apps/{client_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an app by its App ID.
         * @summary Delete an app by its App ID.
         * @param {string} orgId Org ID
         * @param {string} appId App ID
         * @param {string} version The requested version of the endpoint to process the request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteByAppId: async (orgId: string, appId: string, version: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('deleteByAppId', 'orgId', orgId)
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('deleteByAppId', 'appId', appId)
            // verify required parameter 'version' is not null or undefined
            assertParamExists('deleteByAppId', 'version', version)
            const localVarPath = `/orgs/{org_id}/apps/creations/{app_id}`
                .replace(`{${"org_id"}}`, encodeURIComponent(String(orgId !== undefined ? orgId : `-org_id-`)))
                .replace(`{${"app_id"}}`, encodeURIComponent(String(appId !== undefined ? appId : `-app_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/orgs/{org_id}/apps/creations/{app_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of active OAuth sessions for the app.
         * @summary Get a list of active OAuth sessions for the app.
         * @param {string} version The requested version of the endpoint to process the request
         * @param {string} appId App ID
         * @param {string} [startingAfter] Return the page of results immediately after this cursor
         * @param {string} [endingBefore] Return the page of results immediately before this cursor
         * @param {number} [limit] Number of results to return per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActiveSessions: async (version: string, appId: string, startingAfter?: string, endingBefore?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('getActiveSessions', 'version', version)
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('getActiveSessions', 'appId', appId)
            const localVarPath = `/self/apps/{app_id}/sessions`
                .replace(`{${"app_id"}}`, encodeURIComponent(String(appId !== undefined ? appId : `-app_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }

            if (startingAfter !== undefined) {
                localVarQueryParameter['starting_after'] = startingAfter;
            }

            if (endingBefore !== undefined) {
                localVarQueryParameter['ending_before'] = endingBefore;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/self/apps/{app_id}/sessions',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a Snyk App by its App ID.
         * @summary Get a Snyk App by its App ID.
         * @param {string} orgId Org ID
         * @param {string} appId App ID
         * @param {string} version The requested version of the endpoint to process the request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByAppId: async (orgId: string, appId: string, version: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getByAppId', 'orgId', orgId)
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('getByAppId', 'appId', appId)
            // verify required parameter 'version' is not null or undefined
            assertParamExists('getByAppId', 'version', version)
            const localVarPath = `/orgs/{org_id}/apps/creations/{app_id}`
                .replace(`{${"org_id"}}`, encodeURIComponent(String(orgId !== undefined ? orgId : `-org_id-`)))
                .replace(`{${"app_id"}}`, encodeURIComponent(String(appId !== undefined ? appId : `-app_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/orgs/{org_id}/apps/creations/{app_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an App by client id. Deprecated, use /orgs/{org_id}/apps/creations/{app_id} instead.
         * @summary Get an app by client id
         * @param {string} orgId Org ID
         * @param {string} clientId Client ID
         * @param {string} version The requested version of the endpoint to process the request
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getByClientId: async (orgId: string, clientId: string, version: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getByClientId', 'orgId', orgId)
            // verify required parameter 'clientId' is not null or undefined
            assertParamExists('getByClientId', 'clientId', clientId)
            // verify required parameter 'version' is not null or undefined
            assertParamExists('getByClientId', 'version', version)
            const localVarPath = `/orgs/{org_id}/apps/{client_id}`
                .replace(`{${"org_id"}}`, encodeURIComponent(String(orgId !== undefined ? orgId : `-org_id-`)))
                .replace(`{${"client_id"}}`, encodeURIComponent(String(clientId !== undefined ? clientId : `-client_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/orgs/{org_id}/apps/{client_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Install a Snyk Apps to this group, the Snyk App must use unattended authentication eg client credentials.
         * @summary Install a Snyk Apps to this group.
         * @param {string} version The requested version of the endpoint to process the request
         * @param {string} groupId Group ID
         * @param {AppsInstallGroupAppRequest} [appsInstallGroupAppRequest] App Install to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        installGroupApp: async (version: string, groupId: string, appsInstallGroupAppRequest?: AppsInstallGroupAppRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('installGroupApp', 'version', version)
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('installGroupApp', 'groupId', groupId)
            const localVarPath = `/groups/{group_id}/apps/installs`
                .replace(`{${"group_id"}}`, encodeURIComponent(String(groupId !== undefined ? groupId : `-group_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: appsInstallGroupAppRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/groups/{group_id}/apps/installs',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(appsInstallGroupAppRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Install a Snyk Apps to this organization, the Snyk App must use unattended authentication eg client credentials.
         * @summary Install a Snyk Apps to this organization.
         * @param {string} version The requested version of the endpoint to process the request
         * @param {string} orgId Org ID
         * @param {AppsInstallSnykAppToOrgRequest} [appsInstallSnykAppToOrgRequest] App Install to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        installSnykAppToOrg: async (version: string, orgId: string, appsInstallSnykAppToOrgRequest?: AppsInstallSnykAppToOrgRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('installSnykAppToOrg', 'version', version)
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('installSnykAppToOrg', 'orgId', orgId)
            const localVarPath = `/orgs/{org_id}/apps/installs`
                .replace(`{${"org_id"}}`, encodeURIComponent(String(orgId !== undefined ? orgId : `-org_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: appsInstallSnykAppToOrgRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/orgs/{org_id}/apps/installs',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(appsInstallSnykAppToOrgRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of app bots authorized to an organization. Deprecated, use /orgs/{org_id}/apps/installs instead.
         * @summary Get a list of app bots authorized to an organization.
         * @param {string} orgId Org ID
         * @param {string} version The requested version of the endpoint to process the request
         * @param {Array<'app'>} [expand] Expand relationships.
         * @param {string} [startingAfter] Return the page of results immediately after this cursor
         * @param {string} [endingBefore] Return the page of results immediately before this cursor
         * @param {number} [limit] Number of results to return per page
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        listAppBots: async (orgId: string, version: string, expand?: Array<'app'>, startingAfter?: string, endingBefore?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('listAppBots', 'orgId', orgId)
            // verify required parameter 'version' is not null or undefined
            assertParamExists('listAppBots', 'version', version)
            const localVarPath = `/orgs/{org_id}/app_bots`
                .replace(`{${"org_id"}}`, encodeURIComponent(String(orgId !== undefined ? orgId : `-org_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (expand) {
                localVarQueryParameter['expand'] = expand.join(COLLECTION_FORMATS.csv);
            }

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }

            if (startingAfter !== undefined) {
                localVarQueryParameter['starting_after'] = startingAfter;
            }

            if (endingBefore !== undefined) {
                localVarQueryParameter['ending_before'] = endingBefore;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/orgs/{org_id}/app_bots',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of apps that can act on your behalf.
         * @summary Get a list of apps that can act on your behalf.
         * @param {string} version The requested version of the endpoint to process the request
         * @param {string} [startingAfter] Return the page of results immediately after this cursor
         * @param {string} [endingBefore] Return the page of results immediately before this cursor
         * @param {number} [limit] Number of results to return per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApps: async (version: string, startingAfter?: string, endingBefore?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('listApps', 'version', version)
            const localVarPath = `/self/apps`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }

            if (startingAfter !== undefined) {
                localVarQueryParameter['starting_after'] = startingAfter;
            }

            if (endingBefore !== undefined) {
                localVarQueryParameter['ending_before'] = endingBefore;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/self/apps',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of apps installed for a group.
         * @summary Get a list of apps installed for a group.
         * @param {string} groupId Group ID
         * @param {string} version The requested version of the endpoint to process the request
         * @param {Array<'app'>} [expand] Expand relationships.
         * @param {string} [startingAfter] Return the page of results immediately after this cursor
         * @param {string} [endingBefore] Return the page of results immediately before this cursor
         * @param {number} [limit] Number of results to return per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGroupAppInstalls: async (groupId: string, version: string, expand?: Array<'app'>, startingAfter?: string, endingBefore?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('listGroupAppInstalls', 'groupId', groupId)
            // verify required parameter 'version' is not null or undefined
            assertParamExists('listGroupAppInstalls', 'version', version)
            const localVarPath = `/groups/{group_id}/apps/installs`
                .replace(`{${"group_id"}}`, encodeURIComponent(String(groupId !== undefined ? groupId : `-group_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (expand) {
                localVarQueryParameter['expand'] = expand.join(COLLECTION_FORMATS.csv);
            }

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }

            if (startingAfter !== undefined) {
                localVarQueryParameter['starting_after'] = startingAfter;
            }

            if (endingBefore !== undefined) {
                localVarQueryParameter['ending_before'] = endingBefore;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/groups/{group_id}/apps/installs',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of apps created by an organization. Deprecated, use /orgs/{org_id}/apps/creations instead.
         * @summary Get a list of apps created by an organization.
         * @param {string} orgId Org ID
         * @param {string} version The requested version of the endpoint to process the request
         * @param {string} [startingAfter] Return the page of results immediately after this cursor
         * @param {string} [endingBefore] Return the page of results immediately before this cursor
         * @param {number} [limit] Number of results to return per page
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        listOrgApps: async (orgId: string, version: string, startingAfter?: string, endingBefore?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('listOrgApps', 'orgId', orgId)
            // verify required parameter 'version' is not null or undefined
            assertParamExists('listOrgApps', 'version', version)
            const localVarPath = `/orgs/{org_id}/apps`
                .replace(`{${"org_id"}}`, encodeURIComponent(String(orgId !== undefined ? orgId : `-org_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }

            if (startingAfter !== undefined) {
                localVarQueryParameter['starting_after'] = startingAfter;
            }

            if (endingBefore !== undefined) {
                localVarQueryParameter['ending_before'] = endingBefore;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/orgs/{org_id}/apps',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of apps created by an organization.
         * @summary Get a list of apps created by an organization.
         * @param {string} orgId Org ID
         * @param {string} version The requested version of the endpoint to process the request
         * @param {string} [startingAfter] Return the page of results immediately after this cursor
         * @param {string} [endingBefore] Return the page of results immediately before this cursor
         * @param {number} [limit] Number of results to return per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrgCreations: async (orgId: string, version: string, startingAfter?: string, endingBefore?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('listOrgCreations', 'orgId', orgId)
            // verify required parameter 'version' is not null or undefined
            assertParamExists('listOrgCreations', 'version', version)
            const localVarPath = `/orgs/{org_id}/apps/creations`
                .replace(`{${"org_id"}}`, encodeURIComponent(String(orgId !== undefined ? orgId : `-org_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }

            if (startingAfter !== undefined) {
                localVarQueryParameter['starting_after'] = startingAfter;
            }

            if (endingBefore !== undefined) {
                localVarQueryParameter['ending_before'] = endingBefore;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/orgs/{org_id}/apps/creations',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of apps installed for an organization.
         * @summary Get a list of apps installed for an organization.
         * @param {string} orgId Org ID
         * @param {string} version The requested version of the endpoint to process the request
         * @param {Array<'app'>} [expand] Expand relationships.
         * @param {string} [startingAfter] Return the page of results immediately after this cursor
         * @param {string} [endingBefore] Return the page of results immediately before this cursor
         * @param {number} [limit] Number of results to return per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrgInstalls: async (orgId: string, version: string, expand?: Array<'app'>, startingAfter?: string, endingBefore?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('listOrgInstalls', 'orgId', orgId)
            // verify required parameter 'version' is not null or undefined
            assertParamExists('listOrgInstalls', 'version', version)
            const localVarPath = `/orgs/{org_id}/apps/installs`
                .replace(`{${"org_id"}}`, encodeURIComponent(String(orgId !== undefined ? orgId : `-org_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (expand) {
                localVarQueryParameter['expand'] = expand.join(COLLECTION_FORMATS.csv);
            }

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }

            if (startingAfter !== undefined) {
                localVarQueryParameter['starting_after'] = startingAfter;
            }

            if (endingBefore !== undefined) {
                localVarQueryParameter['ending_before'] = endingBefore;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/orgs/{org_id}/apps/installs',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of apps installed for an user.
         * @summary Get a list of apps installed for an user.
         * @param {string} version The requested version of the endpoint to process the request
         * @param {Array<'app'>} [expand] Expand relationships.
         * @param {string} [startingAfter] Return the page of results immediately after this cursor
         * @param {string} [endingBefore] Return the page of results immediately before this cursor
         * @param {number} [limit] Number of results to return per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserInstalledApps: async (version: string, expand?: Array<'app'>, startingAfter?: string, endingBefore?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('listUserInstalledApps', 'version', version)
            const localVarPath = `/self/apps/installs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (expand) {
                localVarQueryParameter['expand'] = expand.join(COLLECTION_FORMATS.csv);
            }

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }

            if (startingAfter !== undefined) {
                localVarQueryParameter['starting_after'] = startingAfter;
            }

            if (endingBefore !== undefined) {
                localVarQueryParameter['ending_before'] = endingBefore;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/self/apps/installs',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Manage client secret for the Snyk App.
         * @summary Manage client secret for the Snyk App.
         * @param {string} version The requested version of the endpoint to process the request
         * @param {string} orgId Org ID
         * @param {string} appId App ID
         * @param {AppsManageClientSecretForSnykAppRequest} [appsManageClientSecretForSnykAppRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        manageClientSecretForSnykApp: async (version: string, orgId: string, appId: string, appsManageClientSecretForSnykAppRequest?: AppsManageClientSecretForSnykAppRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('manageClientSecretForSnykApp', 'version', version)
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('manageClientSecretForSnykApp', 'orgId', orgId)
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('manageClientSecretForSnykApp', 'appId', appId)
            const localVarPath = `/orgs/{org_id}/apps/creations/{app_id}/secrets`
                .replace(`{${"org_id"}}`, encodeURIComponent(String(orgId !== undefined ? orgId : `-org_id-`)))
                .replace(`{${"app_id"}}`, encodeURIComponent(String(appId !== undefined ? appId : `-app_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: appsManageClientSecretForSnykAppRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/orgs/{org_id}/apps/creations/{app_id}/secrets',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(appsManageClientSecretForSnykAppRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Manage client secret for non-interactive Snyk App installations.
         * @summary Manage client secret for non-interactive Snyk App installations.
         * @param {string} version The requested version of the endpoint to process the request
         * @param {string} orgId Org ID
         * @param {string} installId Install ID
         * @param {AppsManageClientSecretForSnykAppRequest1} [appsManageClientSecretForSnykAppRequest1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        manageClientSecretForSnykApp_1: async (version: string, orgId: string, installId: string, appsManageClientSecretForSnykAppRequest1?: AppsManageClientSecretForSnykAppRequest1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('manageClientSecretForSnykApp_1', 'version', version)
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('manageClientSecretForSnykApp_1', 'orgId', orgId)
            // verify required parameter 'installId' is not null or undefined
            assertParamExists('manageClientSecretForSnykApp_1', 'installId', installId)
            const localVarPath = `/orgs/{org_id}/apps/installs/{install_id}/secrets`
                .replace(`{${"org_id"}}`, encodeURIComponent(String(orgId !== undefined ? orgId : `-org_id-`)))
                .replace(`{${"install_id"}}`, encodeURIComponent(String(installId !== undefined ? installId : `-install_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: appsManageClientSecretForSnykAppRequest1,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/orgs/{org_id}/apps/installs/{install_id}/secrets',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(appsManageClientSecretForSnykAppRequest1, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Manage client secrets for an app. Deprecated, use /orgs/{org_id}/apps/creations/{app_id}/secrets instead.
         * @summary Manage client secrets for an app.
         * @param {string} version The requested version of the endpoint to process the request
         * @param {string} orgId Org ID
         * @param {string} clientId Client ID
         * @param {AppsManageClientSecretsRequest} [appsManageClientSecretsRequest] 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        manageClientSecrets: async (version: string, orgId: string, clientId: string, appsManageClientSecretsRequest?: AppsManageClientSecretsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('manageClientSecrets', 'version', version)
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('manageClientSecrets', 'orgId', orgId)
            // verify required parameter 'clientId' is not null or undefined
            assertParamExists('manageClientSecrets', 'clientId', clientId)
            const localVarPath = `/orgs/{org_id}/apps/{client_id}/secrets`
                .replace(`{${"org_id"}}`, encodeURIComponent(String(orgId !== undefined ? orgId : `-org_id-`)))
                .replace(`{${"client_id"}}`, encodeURIComponent(String(clientId !== undefined ? clientId : `-client_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: appsManageClientSecretsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/orgs/{org_id}/apps/{client_id}/secrets',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(appsManageClientSecretsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Revoke access for an app by app id
         * @summary Revoke an app
         * @param {string} version The requested version of the endpoint to process the request
         * @param {string} appId App ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeAppById: async (version: string, appId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('revokeAppById', 'version', version)
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('revokeAppById', 'appId', appId)
            const localVarPath = `/self/apps/{app_id}`
                .replace(`{${"app_id"}}`, encodeURIComponent(String(appId !== undefined ? appId : `-app_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/self/apps/{app_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Revoke app bot authorization. Deprecated, use /orgs/{org_id}/apps/installs/{install_id} instead.
         * @summary Revoke app bot authorization
         * @param {string} botId The ID of the app bot
         * @param {string} version The requested version of the endpoint to process the request
         * @param {string} orgId Org ID
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        revokeBotAuthorization: async (botId: string, version: string, orgId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'botId' is not null or undefined
            assertParamExists('revokeBotAuthorization', 'botId', botId)
            // verify required parameter 'version' is not null or undefined
            assertParamExists('revokeBotAuthorization', 'version', version)
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('revokeBotAuthorization', 'orgId', orgId)
            const localVarPath = `/orgs/{org_id}/app_bots/{bot_id}`
                .replace(`{${"bot_id"}}`, encodeURIComponent(String(botId !== undefined ? botId : `-bot_id-`)))
                .replace(`{${"org_id"}}`, encodeURIComponent(String(orgId !== undefined ? orgId : `-org_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/orgs/{org_id}/app_bots/{bot_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Revoke access for an app by install ID.
         * @summary Revoke access for an app by install ID.
         * @param {string} version The requested version of the endpoint to process the request
         * @param {string} installId Install ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeByInstallId: async (version: string, installId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('revokeByInstallId', 'version', version)
            // verify required parameter 'installId' is not null or undefined
            assertParamExists('revokeByInstallId', 'installId', installId)
            const localVarPath = `/self/apps/installs/{install_id}`
                .replace(`{${"install_id"}}`, encodeURIComponent(String(installId !== undefined ? installId : `-install_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/self/apps/installs/{install_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Revoke app authorization for an Snyk Group with install ID.
         * @summary Revoke app authorization for an Snyk Group with install ID.
         * @param {string} version The requested version of the endpoint to process the request
         * @param {string} groupId Group ID
         * @param {string} installId Install ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeGroupAppInstall: async (version: string, groupId: string, installId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('revokeGroupAppInstall', 'version', version)
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('revokeGroupAppInstall', 'groupId', groupId)
            // verify required parameter 'installId' is not null or undefined
            assertParamExists('revokeGroupAppInstall', 'installId', installId)
            const localVarPath = `/groups/{group_id}/apps/installs/{install_id}`
                .replace(`{${"group_id"}}`, encodeURIComponent(String(groupId !== undefined ? groupId : `-group_id-`)))
                .replace(`{${"install_id"}}`, encodeURIComponent(String(installId !== undefined ? installId : `-install_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/groups/{group_id}/apps/installs/{install_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Revoke an active user app session.
         * @summary Revoke an active user app session.
         * @param {string} version The requested version of the endpoint to process the request
         * @param {string} appId App ID
         * @param {string} sessionId Session ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeUserAppSession: async (version: string, appId: string, sessionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('revokeUserAppSession', 'version', version)
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('revokeUserAppSession', 'appId', appId)
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('revokeUserAppSession', 'sessionId', sessionId)
            const localVarPath = `/self/apps/{app_id}/sessions/{session_id}`
                .replace(`{${"app_id"}}`, encodeURIComponent(String(appId !== undefined ? appId : `-app_id-`)))
                .replace(`{${"session_id"}}`, encodeURIComponent(String(sessionId !== undefined ? sessionId : `-session_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/self/apps/{app_id}/sessions/{session_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update app attributes. Deprecated, use /orgs/{org_id}/apps/creations/{app_id} instead.
         * @summary Update app attributes that are name, redirect URIs, and access token time to live
         * @param {string} version The requested version of the endpoint to process the request
         * @param {string} orgId Org ID
         * @param {string} clientId Client ID
         * @param {AppPatchRequest} [appPatchRequest] 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        updateAttributes: async (version: string, orgId: string, clientId: string, appPatchRequest?: AppPatchRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('updateAttributes', 'version', version)
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('updateAttributes', 'orgId', orgId)
            // verify required parameter 'clientId' is not null or undefined
            assertParamExists('updateAttributes', 'clientId', clientId)
            const localVarPath = `/orgs/{org_id}/apps/{client_id}`
                .replace(`{${"org_id"}}`, encodeURIComponent(String(orgId !== undefined ? orgId : `-org_id-`)))
                .replace(`{${"client_id"}}`, encodeURIComponent(String(clientId !== undefined ? clientId : `-client_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: appPatchRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/orgs/{org_id}/apps/{client_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(appPatchRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update app creation attributes with App ID.
         * @summary Update app creation attributes such as name, redirect URIs, and access token time to live using the App ID.
         * @param {string} version The requested version of the endpoint to process the request
         * @param {string} orgId Org ID
         * @param {string} appId App ID
         * @param {AppPatchRequest} [appPatchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCreationAttributesById: async (version: string, orgId: string, appId: string, appPatchRequest?: AppPatchRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('updateCreationAttributesById', 'version', version)
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('updateCreationAttributesById', 'orgId', orgId)
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('updateCreationAttributesById', 'appId', appId)
            const localVarPath = `/orgs/{org_id}/apps/creations/{app_id}`
                .replace(`{${"org_id"}}`, encodeURIComponent(String(orgId !== undefined ? orgId : `-org_id-`)))
                .replace(`{${"app_id"}}`, encodeURIComponent(String(appId !== undefined ? appId : `-app_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: appPatchRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/orgs/{org_id}/apps/creations/{app_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(appPatchRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AppsApi - functional programming interface
 * @export
 */
export const AppsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AppsApiAxiosParamCreator(configuration)
    return {
        /**
         * Revoke app authorization for an Snyk Organization with install ID.
         * @summary Revoke app authorization for an Snyk Organization with install ID.
         * @param {AppsApiByInstallIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async byInstallId(requestParameters: AppsApiByInstallIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.byInstallId(requestParameters.version, requestParameters.orgId, requestParameters.installId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Manage client secret for non-interactive Snyk App installations.
         * @summary Manage client secret for non-interactive Snyk App installations.
         * @param {AppsApiCreateInstallSecretRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createInstallSecret(requestParameters: AppsApiCreateInstallSecretRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppsCreateInstallSecretResponse>> {
            const appsCreateInstallSecretRequest: AppsCreateInstallSecretRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createInstallSecret(requestParameters.version, requestParameters.groupId, requestParameters.installId, appsCreateInstallSecretRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new Snyk App for an organization.
         * @summary Create a new Snyk App for an organization.
         * @param {AppsApiCreateNewAppForOrganizationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewAppForOrganization(requestParameters: AppsApiCreateNewAppForOrganizationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppPostResponse>> {
            const appPostRequest: AppPostRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewAppForOrganization(requestParameters.version, requestParameters.orgId, appPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new app for an organization. Deprecated, use /orgs/{org_id}/apps/creations instead.
         * @summary Create a new app for an organization.
         * @param {AppsApiCreateOrganizationAppRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async createOrganizationApp(requestParameters: AppsApiCreateOrganizationAppRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppPostResponse>> {
            const appPostRequest: AppPostRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOrganizationApp(requestParameters.version, requestParameters.orgId, appPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete an app by app id. Deprecated, use /orgs/{org_id}/apps/creations/{app_id} instead.
         * @summary Delete an app
         * @param {AppsApiDeleteAppByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async deleteAppById(requestParameters: AppsApiDeleteAppByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAppById(requestParameters.version, requestParameters.orgId, requestParameters.clientId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete an app by its App ID.
         * @summary Delete an app by its App ID.
         * @param {AppsApiDeleteByAppIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteByAppId(requestParameters: AppsApiDeleteByAppIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteByAppId(requestParameters.orgId, requestParameters.appId, requestParameters.version, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of active OAuth sessions for the app.
         * @summary Get a list of active OAuth sessions for the app.
         * @param {AppsApiGetActiveSessionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getActiveSessions(requestParameters: AppsApiGetActiveSessionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppsGetActiveSessionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getActiveSessions(requestParameters.version, requestParameters.appId, requestParameters.startingAfter, requestParameters.endingBefore, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a Snyk App by its App ID.
         * @summary Get a Snyk App by its App ID.
         * @param {AppsApiGetByAppIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByAppId(requestParameters: AppsApiGetByAppIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppsGetByAppIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByAppId(requestParameters.orgId, requestParameters.appId, requestParameters.version, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get an App by client id. Deprecated, use /orgs/{org_id}/apps/creations/{app_id} instead.
         * @summary Get an app by client id
         * @param {AppsApiGetByClientIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async getByClientId(requestParameters: AppsApiGetByClientIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppsGetByClientIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByClientId(requestParameters.orgId, requestParameters.clientId, requestParameters.version, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Install a Snyk Apps to this group, the Snyk App must use unattended authentication eg client credentials.
         * @summary Install a Snyk Apps to this group.
         * @param {AppsApiInstallGroupAppRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async installGroupApp(requestParameters: AppsApiInstallGroupAppRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppsInstallGroupAppResponse>> {
            const appsInstallGroupAppRequest: AppsInstallGroupAppRequest = {
                data: requestParameters.data,
                relationships: requestParameters.relationships
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.installGroupApp(requestParameters.version, requestParameters.groupId, appsInstallGroupAppRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Install a Snyk Apps to this organization, the Snyk App must use unattended authentication eg client credentials.
         * @summary Install a Snyk Apps to this organization.
         * @param {AppsApiInstallSnykAppToOrgRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async installSnykAppToOrg(requestParameters: AppsApiInstallSnykAppToOrgRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppsInstallSnykAppToOrgResponse>> {
            const appsInstallSnykAppToOrgRequest: AppsInstallSnykAppToOrgRequest = {
                data: requestParameters.data,
                relationships: requestParameters.relationships
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.installSnykAppToOrg(requestParameters.version, requestParameters.orgId, appsInstallSnykAppToOrgRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of app bots authorized to an organization. Deprecated, use /orgs/{org_id}/apps/installs instead.
         * @summary Get a list of app bots authorized to an organization.
         * @param {AppsApiListAppBotsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async listAppBots(requestParameters: AppsApiListAppBotsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppsListAppBotsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAppBots(requestParameters.orgId, requestParameters.version, requestParameters.expand, requestParameters.startingAfter, requestParameters.endingBefore, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of apps that can act on your behalf.
         * @summary Get a list of apps that can act on your behalf.
         * @param {AppsApiListAppsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listApps(requestParameters: AppsApiListAppsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppsListAppsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listApps(requestParameters.version, requestParameters.startingAfter, requestParameters.endingBefore, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of apps installed for a group.
         * @summary Get a list of apps installed for a group.
         * @param {AppsApiListGroupAppInstallsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listGroupAppInstalls(requestParameters: AppsApiListGroupAppInstallsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppsListGroupAppInstallsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listGroupAppInstalls(requestParameters.groupId, requestParameters.version, requestParameters.expand, requestParameters.startingAfter, requestParameters.endingBefore, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of apps created by an organization. Deprecated, use /orgs/{org_id}/apps/creations instead.
         * @summary Get a list of apps created by an organization.
         * @param {AppsApiListOrgAppsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async listOrgApps(requestParameters: AppsApiListOrgAppsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppsListOrgAppsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listOrgApps(requestParameters.orgId, requestParameters.version, requestParameters.startingAfter, requestParameters.endingBefore, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of apps created by an organization.
         * @summary Get a list of apps created by an organization.
         * @param {AppsApiListOrgCreationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listOrgCreations(requestParameters: AppsApiListOrgCreationsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppsListOrgCreationsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listOrgCreations(requestParameters.orgId, requestParameters.version, requestParameters.startingAfter, requestParameters.endingBefore, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of apps installed for an organization.
         * @summary Get a list of apps installed for an organization.
         * @param {AppsApiListOrgInstallsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listOrgInstalls(requestParameters: AppsApiListOrgInstallsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppsListOrgInstallsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listOrgInstalls(requestParameters.orgId, requestParameters.version, requestParameters.expand, requestParameters.startingAfter, requestParameters.endingBefore, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of apps installed for an user.
         * @summary Get a list of apps installed for an user.
         * @param {AppsApiListUserInstalledAppsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserInstalledApps(requestParameters: AppsApiListUserInstalledAppsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppsListUserInstalledAppsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUserInstalledApps(requestParameters.version, requestParameters.expand, requestParameters.startingAfter, requestParameters.endingBefore, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Manage client secret for the Snyk App.
         * @summary Manage client secret for the Snyk App.
         * @param {AppsApiManageClientSecretForSnykAppRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async manageClientSecretForSnykApp(requestParameters: AppsApiManageClientSecretForSnykAppRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppsManageClientSecretForSnykAppResponse>> {
            const appsManageClientSecretForSnykAppRequest: AppsManageClientSecretForSnykAppRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.manageClientSecretForSnykApp(requestParameters.version, requestParameters.orgId, requestParameters.appId, appsManageClientSecretForSnykAppRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Manage client secret for non-interactive Snyk App installations.
         * @summary Manage client secret for non-interactive Snyk App installations.
         * @param {AppsApiManageClientSecretForSnykApp0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async manageClientSecretForSnykApp_1(requestParameters: AppsApiManageClientSecretForSnykApp0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppsManageClientSecretForSnykApp200Response>> {
            const appsManageClientSecretForSnykAppRequest1: AppsManageClientSecretForSnykAppRequest1 = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.manageClientSecretForSnykApp_1(requestParameters.version, requestParameters.orgId, requestParameters.installId, appsManageClientSecretForSnykAppRequest1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Manage client secrets for an app. Deprecated, use /orgs/{org_id}/apps/creations/{app_id}/secrets instead.
         * @summary Manage client secrets for an app.
         * @param {AppsApiManageClientSecretsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async manageClientSecrets(requestParameters: AppsApiManageClientSecretsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppsManageClientSecretsResponse>> {
            const appsManageClientSecretsRequest: AppsManageClientSecretsRequest = {
                mode: requestParameters.mode,
                secret: requestParameters.secret
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.manageClientSecrets(requestParameters.version, requestParameters.orgId, requestParameters.clientId, appsManageClientSecretsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Revoke access for an app by app id
         * @summary Revoke an app
         * @param {AppsApiRevokeAppByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async revokeAppById(requestParameters: AppsApiRevokeAppByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.revokeAppById(requestParameters.version, requestParameters.appId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Revoke app bot authorization. Deprecated, use /orgs/{org_id}/apps/installs/{install_id} instead.
         * @summary Revoke app bot authorization
         * @param {AppsApiRevokeBotAuthorizationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async revokeBotAuthorization(requestParameters: AppsApiRevokeBotAuthorizationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.revokeBotAuthorization(requestParameters.botId, requestParameters.version, requestParameters.orgId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Revoke access for an app by install ID.
         * @summary Revoke access for an app by install ID.
         * @param {AppsApiRevokeByInstallIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async revokeByInstallId(requestParameters: AppsApiRevokeByInstallIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.revokeByInstallId(requestParameters.version, requestParameters.installId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Revoke app authorization for an Snyk Group with install ID.
         * @summary Revoke app authorization for an Snyk Group with install ID.
         * @param {AppsApiRevokeGroupAppInstallRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async revokeGroupAppInstall(requestParameters: AppsApiRevokeGroupAppInstallRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.revokeGroupAppInstall(requestParameters.version, requestParameters.groupId, requestParameters.installId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Revoke an active user app session.
         * @summary Revoke an active user app session.
         * @param {AppsApiRevokeUserAppSessionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async revokeUserAppSession(requestParameters: AppsApiRevokeUserAppSessionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.revokeUserAppSession(requestParameters.version, requestParameters.appId, requestParameters.sessionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update app attributes. Deprecated, use /orgs/{org_id}/apps/creations/{app_id} instead.
         * @summary Update app attributes that are name, redirect URIs, and access token time to live
         * @param {AppsApiUpdateAttributesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async updateAttributes(requestParameters: AppsApiUpdateAttributesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppsUpdateAttributesResponse>> {
            const appPatchRequest: AppPatchRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAttributes(requestParameters.version, requestParameters.orgId, requestParameters.clientId, appPatchRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update app creation attributes with App ID.
         * @summary Update app creation attributes such as name, redirect URIs, and access token time to live using the App ID.
         * @param {AppsApiUpdateCreationAttributesByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCreationAttributesById(requestParameters: AppsApiUpdateCreationAttributesByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppsUpdateCreationAttributesByIdResponse>> {
            const appPatchRequest: AppPatchRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCreationAttributesById(requestParameters.version, requestParameters.orgId, requestParameters.appId, appPatchRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AppsApi - factory interface
 * @export
 */
export const AppsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AppsApiFp(configuration)
    return {
        /**
         * Revoke app authorization for an Snyk Organization with install ID.
         * @summary Revoke app authorization for an Snyk Organization with install ID.
         * @param {AppsApiByInstallIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        byInstallId(requestParameters: AppsApiByInstallIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.byInstallId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Manage client secret for non-interactive Snyk App installations.
         * @summary Manage client secret for non-interactive Snyk App installations.
         * @param {AppsApiCreateInstallSecretRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createInstallSecret(requestParameters: AppsApiCreateInstallSecretRequest, options?: AxiosRequestConfig): AxiosPromise<AppsCreateInstallSecretResponse> {
            return localVarFp.createInstallSecret(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new Snyk App for an organization.
         * @summary Create a new Snyk App for an organization.
         * @param {AppsApiCreateNewAppForOrganizationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewAppForOrganization(requestParameters: AppsApiCreateNewAppForOrganizationRequest, options?: AxiosRequestConfig): AxiosPromise<AppPostResponse> {
            return localVarFp.createNewAppForOrganization(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new app for an organization. Deprecated, use /orgs/{org_id}/apps/creations instead.
         * @summary Create a new app for an organization.
         * @param {AppsApiCreateOrganizationAppRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        createOrganizationApp(requestParameters: AppsApiCreateOrganizationAppRequest, options?: AxiosRequestConfig): AxiosPromise<AppPostResponse> {
            return localVarFp.createOrganizationApp(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an app by app id. Deprecated, use /orgs/{org_id}/apps/creations/{app_id} instead.
         * @summary Delete an app
         * @param {AppsApiDeleteAppByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        deleteAppById(requestParameters: AppsApiDeleteAppByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteAppById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an app by its App ID.
         * @summary Delete an app by its App ID.
         * @param {AppsApiDeleteByAppIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteByAppId(requestParameters: AppsApiDeleteByAppIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteByAppId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of active OAuth sessions for the app.
         * @summary Get a list of active OAuth sessions for the app.
         * @param {AppsApiGetActiveSessionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActiveSessions(requestParameters: AppsApiGetActiveSessionsRequest, options?: AxiosRequestConfig): AxiosPromise<AppsGetActiveSessionsResponse> {
            return localVarFp.getActiveSessions(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a Snyk App by its App ID.
         * @summary Get a Snyk App by its App ID.
         * @param {AppsApiGetByAppIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByAppId(requestParameters: AppsApiGetByAppIdRequest, options?: AxiosRequestConfig): AxiosPromise<AppsGetByAppIdResponse> {
            return localVarFp.getByAppId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an App by client id. Deprecated, use /orgs/{org_id}/apps/creations/{app_id} instead.
         * @summary Get an app by client id
         * @param {AppsApiGetByClientIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getByClientId(requestParameters: AppsApiGetByClientIdRequest, options?: AxiosRequestConfig): AxiosPromise<AppsGetByClientIdResponse> {
            return localVarFp.getByClientId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Install a Snyk Apps to this group, the Snyk App must use unattended authentication eg client credentials.
         * @summary Install a Snyk Apps to this group.
         * @param {AppsApiInstallGroupAppRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        installGroupApp(requestParameters: AppsApiInstallGroupAppRequest, options?: AxiosRequestConfig): AxiosPromise<AppsInstallGroupAppResponse> {
            return localVarFp.installGroupApp(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Install a Snyk Apps to this organization, the Snyk App must use unattended authentication eg client credentials.
         * @summary Install a Snyk Apps to this organization.
         * @param {AppsApiInstallSnykAppToOrgRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        installSnykAppToOrg(requestParameters: AppsApiInstallSnykAppToOrgRequest, options?: AxiosRequestConfig): AxiosPromise<AppsInstallSnykAppToOrgResponse> {
            return localVarFp.installSnykAppToOrg(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of app bots authorized to an organization. Deprecated, use /orgs/{org_id}/apps/installs instead.
         * @summary Get a list of app bots authorized to an organization.
         * @param {AppsApiListAppBotsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        listAppBots(requestParameters: AppsApiListAppBotsRequest, options?: AxiosRequestConfig): AxiosPromise<AppsListAppBotsResponse> {
            return localVarFp.listAppBots(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of apps that can act on your behalf.
         * @summary Get a list of apps that can act on your behalf.
         * @param {AppsApiListAppsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApps(requestParameters: AppsApiListAppsRequest, options?: AxiosRequestConfig): AxiosPromise<AppsListAppsResponse> {
            return localVarFp.listApps(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of apps installed for a group.
         * @summary Get a list of apps installed for a group.
         * @param {AppsApiListGroupAppInstallsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGroupAppInstalls(requestParameters: AppsApiListGroupAppInstallsRequest, options?: AxiosRequestConfig): AxiosPromise<AppsListGroupAppInstallsResponse> {
            return localVarFp.listGroupAppInstalls(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of apps created by an organization. Deprecated, use /orgs/{org_id}/apps/creations instead.
         * @summary Get a list of apps created by an organization.
         * @param {AppsApiListOrgAppsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        listOrgApps(requestParameters: AppsApiListOrgAppsRequest, options?: AxiosRequestConfig): AxiosPromise<AppsListOrgAppsResponse> {
            return localVarFp.listOrgApps(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of apps created by an organization.
         * @summary Get a list of apps created by an organization.
         * @param {AppsApiListOrgCreationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrgCreations(requestParameters: AppsApiListOrgCreationsRequest, options?: AxiosRequestConfig): AxiosPromise<AppsListOrgCreationsResponse> {
            return localVarFp.listOrgCreations(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of apps installed for an organization.
         * @summary Get a list of apps installed for an organization.
         * @param {AppsApiListOrgInstallsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrgInstalls(requestParameters: AppsApiListOrgInstallsRequest, options?: AxiosRequestConfig): AxiosPromise<AppsListOrgInstallsResponse> {
            return localVarFp.listOrgInstalls(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of apps installed for an user.
         * @summary Get a list of apps installed for an user.
         * @param {AppsApiListUserInstalledAppsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserInstalledApps(requestParameters: AppsApiListUserInstalledAppsRequest, options?: AxiosRequestConfig): AxiosPromise<AppsListUserInstalledAppsResponse> {
            return localVarFp.listUserInstalledApps(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Manage client secret for the Snyk App.
         * @summary Manage client secret for the Snyk App.
         * @param {AppsApiManageClientSecretForSnykAppRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        manageClientSecretForSnykApp(requestParameters: AppsApiManageClientSecretForSnykAppRequest, options?: AxiosRequestConfig): AxiosPromise<AppsManageClientSecretForSnykAppResponse> {
            return localVarFp.manageClientSecretForSnykApp(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Manage client secret for non-interactive Snyk App installations.
         * @summary Manage client secret for non-interactive Snyk App installations.
         * @param {AppsApiManageClientSecretForSnykApp0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        manageClientSecretForSnykApp_1(requestParameters: AppsApiManageClientSecretForSnykApp0Request, options?: AxiosRequestConfig): AxiosPromise<AppsManageClientSecretForSnykApp200Response> {
            return localVarFp.manageClientSecretForSnykApp_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Manage client secrets for an app. Deprecated, use /orgs/{org_id}/apps/creations/{app_id}/secrets instead.
         * @summary Manage client secrets for an app.
         * @param {AppsApiManageClientSecretsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        manageClientSecrets(requestParameters: AppsApiManageClientSecretsRequest, options?: AxiosRequestConfig): AxiosPromise<AppsManageClientSecretsResponse> {
            return localVarFp.manageClientSecrets(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Revoke access for an app by app id
         * @summary Revoke an app
         * @param {AppsApiRevokeAppByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeAppById(requestParameters: AppsApiRevokeAppByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.revokeAppById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Revoke app bot authorization. Deprecated, use /orgs/{org_id}/apps/installs/{install_id} instead.
         * @summary Revoke app bot authorization
         * @param {AppsApiRevokeBotAuthorizationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        revokeBotAuthorization(requestParameters: AppsApiRevokeBotAuthorizationRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.revokeBotAuthorization(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Revoke access for an app by install ID.
         * @summary Revoke access for an app by install ID.
         * @param {AppsApiRevokeByInstallIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeByInstallId(requestParameters: AppsApiRevokeByInstallIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.revokeByInstallId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Revoke app authorization for an Snyk Group with install ID.
         * @summary Revoke app authorization for an Snyk Group with install ID.
         * @param {AppsApiRevokeGroupAppInstallRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeGroupAppInstall(requestParameters: AppsApiRevokeGroupAppInstallRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.revokeGroupAppInstall(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Revoke an active user app session.
         * @summary Revoke an active user app session.
         * @param {AppsApiRevokeUserAppSessionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeUserAppSession(requestParameters: AppsApiRevokeUserAppSessionRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.revokeUserAppSession(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update app attributes. Deprecated, use /orgs/{org_id}/apps/creations/{app_id} instead.
         * @summary Update app attributes that are name, redirect URIs, and access token time to live
         * @param {AppsApiUpdateAttributesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        updateAttributes(requestParameters: AppsApiUpdateAttributesRequest, options?: AxiosRequestConfig): AxiosPromise<AppsUpdateAttributesResponse> {
            return localVarFp.updateAttributes(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update app creation attributes with App ID.
         * @summary Update app creation attributes such as name, redirect URIs, and access token time to live using the App ID.
         * @param {AppsApiUpdateCreationAttributesByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCreationAttributesById(requestParameters: AppsApiUpdateCreationAttributesByIdRequest, options?: AxiosRequestConfig): AxiosPromise<AppsUpdateCreationAttributesByIdResponse> {
            return localVarFp.updateCreationAttributesById(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for byInstallId operation in AppsApi.
 * @export
 * @interface AppsApiByInstallIdRequest
 */
export type AppsApiByInstallIdRequest = {
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof AppsApiByInstallId
    */
    readonly version: string
    
    /**
    * Org ID
    * @type {string}
    * @memberof AppsApiByInstallId
    */
    readonly orgId: string
    
    /**
    * Install ID
    * @type {string}
    * @memberof AppsApiByInstallId
    */
    readonly installId: string
    
}

/**
 * Request parameters for createInstallSecret operation in AppsApi.
 * @export
 * @interface AppsApiCreateInstallSecretRequest
 */
export type AppsApiCreateInstallSecretRequest = {
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof AppsApiCreateInstallSecret
    */
    readonly version: string
    
    /**
    * Group ID
    * @type {string}
    * @memberof AppsApiCreateInstallSecret
    */
    readonly groupId: string
    
    /**
    * Install ID
    * @type {string}
    * @memberof AppsApiCreateInstallSecret
    */
    readonly installId: string
    
} & AppsCreateInstallSecretRequest

/**
 * Request parameters for createNewAppForOrganization operation in AppsApi.
 * @export
 * @interface AppsApiCreateNewAppForOrganizationRequest
 */
export type AppsApiCreateNewAppForOrganizationRequest = {
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof AppsApiCreateNewAppForOrganization
    */
    readonly version: string
    
    /**
    * Org ID
    * @type {string}
    * @memberof AppsApiCreateNewAppForOrganization
    */
    readonly orgId: string
    
} & AppPostRequest

/**
 * Request parameters for createOrganizationApp operation in AppsApi.
 * @export
 * @interface AppsApiCreateOrganizationAppRequest
 */
export type AppsApiCreateOrganizationAppRequest = {
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof AppsApiCreateOrganizationApp
    */
    readonly version: string
    
    /**
    * Org ID
    * @type {string}
    * @memberof AppsApiCreateOrganizationApp
    */
    readonly orgId: string
    
} & AppPostRequest

/**
 * Request parameters for deleteAppById operation in AppsApi.
 * @export
 * @interface AppsApiDeleteAppByIdRequest
 */
export type AppsApiDeleteAppByIdRequest = {
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof AppsApiDeleteAppById
    */
    readonly version: string
    
    /**
    * Org ID
    * @type {string}
    * @memberof AppsApiDeleteAppById
    */
    readonly orgId: string
    
    /**
    * Client ID
    * @type {string}
    * @memberof AppsApiDeleteAppById
    */
    readonly clientId: string
    
}

/**
 * Request parameters for deleteByAppId operation in AppsApi.
 * @export
 * @interface AppsApiDeleteByAppIdRequest
 */
export type AppsApiDeleteByAppIdRequest = {
    
    /**
    * Org ID
    * @type {string}
    * @memberof AppsApiDeleteByAppId
    */
    readonly orgId: string
    
    /**
    * App ID
    * @type {string}
    * @memberof AppsApiDeleteByAppId
    */
    readonly appId: string
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof AppsApiDeleteByAppId
    */
    readonly version: string
    
}

/**
 * Request parameters for getActiveSessions operation in AppsApi.
 * @export
 * @interface AppsApiGetActiveSessionsRequest
 */
export type AppsApiGetActiveSessionsRequest = {
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof AppsApiGetActiveSessions
    */
    readonly version: string
    
    /**
    * App ID
    * @type {string}
    * @memberof AppsApiGetActiveSessions
    */
    readonly appId: string
    
    /**
    * Return the page of results immediately after this cursor
    * @type {string}
    * @memberof AppsApiGetActiveSessions
    */
    readonly startingAfter?: string
    
    /**
    * Return the page of results immediately before this cursor
    * @type {string}
    * @memberof AppsApiGetActiveSessions
    */
    readonly endingBefore?: string
    
    /**
    * Number of results to return per page
    * @type {number}
    * @memberof AppsApiGetActiveSessions
    */
    readonly limit?: number
    
}

/**
 * Request parameters for getByAppId operation in AppsApi.
 * @export
 * @interface AppsApiGetByAppIdRequest
 */
export type AppsApiGetByAppIdRequest = {
    
    /**
    * Org ID
    * @type {string}
    * @memberof AppsApiGetByAppId
    */
    readonly orgId: string
    
    /**
    * App ID
    * @type {string}
    * @memberof AppsApiGetByAppId
    */
    readonly appId: string
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof AppsApiGetByAppId
    */
    readonly version: string
    
}

/**
 * Request parameters for getByClientId operation in AppsApi.
 * @export
 * @interface AppsApiGetByClientIdRequest
 */
export type AppsApiGetByClientIdRequest = {
    
    /**
    * Org ID
    * @type {string}
    * @memberof AppsApiGetByClientId
    */
    readonly orgId: string
    
    /**
    * Client ID
    * @type {string}
    * @memberof AppsApiGetByClientId
    */
    readonly clientId: string
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof AppsApiGetByClientId
    */
    readonly version: string
    
}

/**
 * Request parameters for installGroupApp operation in AppsApi.
 * @export
 * @interface AppsApiInstallGroupAppRequest
 */
export type AppsApiInstallGroupAppRequest = {
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof AppsApiInstallGroupApp
    */
    readonly version: string
    
    /**
    * Group ID
    * @type {string}
    * @memberof AppsApiInstallGroupApp
    */
    readonly groupId: string
    
} & AppsInstallGroupAppRequest

/**
 * Request parameters for installSnykAppToOrg operation in AppsApi.
 * @export
 * @interface AppsApiInstallSnykAppToOrgRequest
 */
export type AppsApiInstallSnykAppToOrgRequest = {
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof AppsApiInstallSnykAppToOrg
    */
    readonly version: string
    
    /**
    * Org ID
    * @type {string}
    * @memberof AppsApiInstallSnykAppToOrg
    */
    readonly orgId: string
    
} & AppsInstallSnykAppToOrgRequest

/**
 * Request parameters for listAppBots operation in AppsApi.
 * @export
 * @interface AppsApiListAppBotsRequest
 */
export type AppsApiListAppBotsRequest = {
    
    /**
    * Org ID
    * @type {string}
    * @memberof AppsApiListAppBots
    */
    readonly orgId: string
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof AppsApiListAppBots
    */
    readonly version: string
    
    /**
    * Expand relationships.
    * @type {Array<'app'>}
    * @memberof AppsApiListAppBots
    */
    readonly expand?: Array<'app'>
    
    /**
    * Return the page of results immediately after this cursor
    * @type {string}
    * @memberof AppsApiListAppBots
    */
    readonly startingAfter?: string
    
    /**
    * Return the page of results immediately before this cursor
    * @type {string}
    * @memberof AppsApiListAppBots
    */
    readonly endingBefore?: string
    
    /**
    * Number of results to return per page
    * @type {number}
    * @memberof AppsApiListAppBots
    */
    readonly limit?: number
    
}

/**
 * Request parameters for listApps operation in AppsApi.
 * @export
 * @interface AppsApiListAppsRequest
 */
export type AppsApiListAppsRequest = {
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof AppsApiListApps
    */
    readonly version: string
    
    /**
    * Return the page of results immediately after this cursor
    * @type {string}
    * @memberof AppsApiListApps
    */
    readonly startingAfter?: string
    
    /**
    * Return the page of results immediately before this cursor
    * @type {string}
    * @memberof AppsApiListApps
    */
    readonly endingBefore?: string
    
    /**
    * Number of results to return per page
    * @type {number}
    * @memberof AppsApiListApps
    */
    readonly limit?: number
    
}

/**
 * Request parameters for listGroupAppInstalls operation in AppsApi.
 * @export
 * @interface AppsApiListGroupAppInstallsRequest
 */
export type AppsApiListGroupAppInstallsRequest = {
    
    /**
    * Group ID
    * @type {string}
    * @memberof AppsApiListGroupAppInstalls
    */
    readonly groupId: string
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof AppsApiListGroupAppInstalls
    */
    readonly version: string
    
    /**
    * Expand relationships.
    * @type {Array<'app'>}
    * @memberof AppsApiListGroupAppInstalls
    */
    readonly expand?: Array<'app'>
    
    /**
    * Return the page of results immediately after this cursor
    * @type {string}
    * @memberof AppsApiListGroupAppInstalls
    */
    readonly startingAfter?: string
    
    /**
    * Return the page of results immediately before this cursor
    * @type {string}
    * @memberof AppsApiListGroupAppInstalls
    */
    readonly endingBefore?: string
    
    /**
    * Number of results to return per page
    * @type {number}
    * @memberof AppsApiListGroupAppInstalls
    */
    readonly limit?: number
    
}

/**
 * Request parameters for listOrgApps operation in AppsApi.
 * @export
 * @interface AppsApiListOrgAppsRequest
 */
export type AppsApiListOrgAppsRequest = {
    
    /**
    * Org ID
    * @type {string}
    * @memberof AppsApiListOrgApps
    */
    readonly orgId: string
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof AppsApiListOrgApps
    */
    readonly version: string
    
    /**
    * Return the page of results immediately after this cursor
    * @type {string}
    * @memberof AppsApiListOrgApps
    */
    readonly startingAfter?: string
    
    /**
    * Return the page of results immediately before this cursor
    * @type {string}
    * @memberof AppsApiListOrgApps
    */
    readonly endingBefore?: string
    
    /**
    * Number of results to return per page
    * @type {number}
    * @memberof AppsApiListOrgApps
    */
    readonly limit?: number
    
}

/**
 * Request parameters for listOrgCreations operation in AppsApi.
 * @export
 * @interface AppsApiListOrgCreationsRequest
 */
export type AppsApiListOrgCreationsRequest = {
    
    /**
    * Org ID
    * @type {string}
    * @memberof AppsApiListOrgCreations
    */
    readonly orgId: string
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof AppsApiListOrgCreations
    */
    readonly version: string
    
    /**
    * Return the page of results immediately after this cursor
    * @type {string}
    * @memberof AppsApiListOrgCreations
    */
    readonly startingAfter?: string
    
    /**
    * Return the page of results immediately before this cursor
    * @type {string}
    * @memberof AppsApiListOrgCreations
    */
    readonly endingBefore?: string
    
    /**
    * Number of results to return per page
    * @type {number}
    * @memberof AppsApiListOrgCreations
    */
    readonly limit?: number
    
}

/**
 * Request parameters for listOrgInstalls operation in AppsApi.
 * @export
 * @interface AppsApiListOrgInstallsRequest
 */
export type AppsApiListOrgInstallsRequest = {
    
    /**
    * Org ID
    * @type {string}
    * @memberof AppsApiListOrgInstalls
    */
    readonly orgId: string
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof AppsApiListOrgInstalls
    */
    readonly version: string
    
    /**
    * Expand relationships.
    * @type {Array<'app'>}
    * @memberof AppsApiListOrgInstalls
    */
    readonly expand?: Array<'app'>
    
    /**
    * Return the page of results immediately after this cursor
    * @type {string}
    * @memberof AppsApiListOrgInstalls
    */
    readonly startingAfter?: string
    
    /**
    * Return the page of results immediately before this cursor
    * @type {string}
    * @memberof AppsApiListOrgInstalls
    */
    readonly endingBefore?: string
    
    /**
    * Number of results to return per page
    * @type {number}
    * @memberof AppsApiListOrgInstalls
    */
    readonly limit?: number
    
}

/**
 * Request parameters for listUserInstalledApps operation in AppsApi.
 * @export
 * @interface AppsApiListUserInstalledAppsRequest
 */
export type AppsApiListUserInstalledAppsRequest = {
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof AppsApiListUserInstalledApps
    */
    readonly version: string
    
    /**
    * Expand relationships.
    * @type {Array<'app'>}
    * @memberof AppsApiListUserInstalledApps
    */
    readonly expand?: Array<'app'>
    
    /**
    * Return the page of results immediately after this cursor
    * @type {string}
    * @memberof AppsApiListUserInstalledApps
    */
    readonly startingAfter?: string
    
    /**
    * Return the page of results immediately before this cursor
    * @type {string}
    * @memberof AppsApiListUserInstalledApps
    */
    readonly endingBefore?: string
    
    /**
    * Number of results to return per page
    * @type {number}
    * @memberof AppsApiListUserInstalledApps
    */
    readonly limit?: number
    
}

/**
 * Request parameters for manageClientSecretForSnykApp operation in AppsApi.
 * @export
 * @interface AppsApiManageClientSecretForSnykAppRequest
 */
export type AppsApiManageClientSecretForSnykAppRequest = {
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof AppsApiManageClientSecretForSnykApp
    */
    readonly version: string
    
    /**
    * Org ID
    * @type {string}
    * @memberof AppsApiManageClientSecretForSnykApp
    */
    readonly orgId: string
    
    /**
    * App ID
    * @type {string}
    * @memberof AppsApiManageClientSecretForSnykApp
    */
    readonly appId: string
    
} & AppsManageClientSecretForSnykAppRequest

/**
 * Request parameters for manageClientSecretForSnykApp_1 operation in AppsApi.
 * @export
 * @interface AppsApiManageClientSecretForSnykApp0Request
 */
export type AppsApiManageClientSecretForSnykApp0Request = {
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof AppsApiManageClientSecretForSnykApp0
    */
    readonly version: string
    
    /**
    * Org ID
    * @type {string}
    * @memberof AppsApiManageClientSecretForSnykApp0
    */
    readonly orgId: string
    
    /**
    * Install ID
    * @type {string}
    * @memberof AppsApiManageClientSecretForSnykApp0
    */
    readonly installId: string
    
} & AppsManageClientSecretForSnykAppRequest1

/**
 * Request parameters for manageClientSecrets operation in AppsApi.
 * @export
 * @interface AppsApiManageClientSecretsRequest
 */
export type AppsApiManageClientSecretsRequest = {
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof AppsApiManageClientSecrets
    */
    readonly version: string
    
    /**
    * Org ID
    * @type {string}
    * @memberof AppsApiManageClientSecrets
    */
    readonly orgId: string
    
    /**
    * Client ID
    * @type {string}
    * @memberof AppsApiManageClientSecrets
    */
    readonly clientId: string
    
} & AppsManageClientSecretsRequest

/**
 * Request parameters for revokeAppById operation in AppsApi.
 * @export
 * @interface AppsApiRevokeAppByIdRequest
 */
export type AppsApiRevokeAppByIdRequest = {
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof AppsApiRevokeAppById
    */
    readonly version: string
    
    /**
    * App ID
    * @type {string}
    * @memberof AppsApiRevokeAppById
    */
    readonly appId: string
    
}

/**
 * Request parameters for revokeBotAuthorization operation in AppsApi.
 * @export
 * @interface AppsApiRevokeBotAuthorizationRequest
 */
export type AppsApiRevokeBotAuthorizationRequest = {
    
    /**
    * The ID of the app bot
    * @type {string}
    * @memberof AppsApiRevokeBotAuthorization
    */
    readonly botId: string
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof AppsApiRevokeBotAuthorization
    */
    readonly version: string
    
    /**
    * Org ID
    * @type {string}
    * @memberof AppsApiRevokeBotAuthorization
    */
    readonly orgId: string
    
}

/**
 * Request parameters for revokeByInstallId operation in AppsApi.
 * @export
 * @interface AppsApiRevokeByInstallIdRequest
 */
export type AppsApiRevokeByInstallIdRequest = {
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof AppsApiRevokeByInstallId
    */
    readonly version: string
    
    /**
    * Install ID
    * @type {string}
    * @memberof AppsApiRevokeByInstallId
    */
    readonly installId: string
    
}

/**
 * Request parameters for revokeGroupAppInstall operation in AppsApi.
 * @export
 * @interface AppsApiRevokeGroupAppInstallRequest
 */
export type AppsApiRevokeGroupAppInstallRequest = {
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof AppsApiRevokeGroupAppInstall
    */
    readonly version: string
    
    /**
    * Group ID
    * @type {string}
    * @memberof AppsApiRevokeGroupAppInstall
    */
    readonly groupId: string
    
    /**
    * Install ID
    * @type {string}
    * @memberof AppsApiRevokeGroupAppInstall
    */
    readonly installId: string
    
}

/**
 * Request parameters for revokeUserAppSession operation in AppsApi.
 * @export
 * @interface AppsApiRevokeUserAppSessionRequest
 */
export type AppsApiRevokeUserAppSessionRequest = {
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof AppsApiRevokeUserAppSession
    */
    readonly version: string
    
    /**
    * App ID
    * @type {string}
    * @memberof AppsApiRevokeUserAppSession
    */
    readonly appId: string
    
    /**
    * Session ID
    * @type {string}
    * @memberof AppsApiRevokeUserAppSession
    */
    readonly sessionId: string
    
}

/**
 * Request parameters for updateAttributes operation in AppsApi.
 * @export
 * @interface AppsApiUpdateAttributesRequest
 */
export type AppsApiUpdateAttributesRequest = {
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof AppsApiUpdateAttributes
    */
    readonly version: string
    
    /**
    * Org ID
    * @type {string}
    * @memberof AppsApiUpdateAttributes
    */
    readonly orgId: string
    
    /**
    * Client ID
    * @type {string}
    * @memberof AppsApiUpdateAttributes
    */
    readonly clientId: string
    
} & AppPatchRequest

/**
 * Request parameters for updateCreationAttributesById operation in AppsApi.
 * @export
 * @interface AppsApiUpdateCreationAttributesByIdRequest
 */
export type AppsApiUpdateCreationAttributesByIdRequest = {
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof AppsApiUpdateCreationAttributesById
    */
    readonly version: string
    
    /**
    * Org ID
    * @type {string}
    * @memberof AppsApiUpdateCreationAttributesById
    */
    readonly orgId: string
    
    /**
    * App ID
    * @type {string}
    * @memberof AppsApiUpdateCreationAttributesById
    */
    readonly appId: string
    
} & AppPatchRequest

/**
 * AppsApiGenerated - object-oriented interface
 * @export
 * @class AppsApiGenerated
 * @extends {BaseAPI}
 */
export class AppsApiGenerated extends BaseAPI {
    /**
     * Revoke app authorization for an Snyk Organization with install ID.
     * @summary Revoke app authorization for an Snyk Organization with install ID.
     * @param {AppsApiByInstallIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiGenerated
     */
    public byInstallId(requestParameters: AppsApiByInstallIdRequest, options?: AxiosRequestConfig) {
        return AppsApiFp(this.configuration).byInstallId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Manage client secret for non-interactive Snyk App installations.
     * @summary Manage client secret for non-interactive Snyk App installations.
     * @param {AppsApiCreateInstallSecretRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiGenerated
     */
    public createInstallSecret(requestParameters: AppsApiCreateInstallSecretRequest, options?: AxiosRequestConfig) {
        return AppsApiFp(this.configuration).createInstallSecret(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new Snyk App for an organization.
     * @summary Create a new Snyk App for an organization.
     * @param {AppsApiCreateNewAppForOrganizationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiGenerated
     */
    public createNewAppForOrganization(requestParameters: AppsApiCreateNewAppForOrganizationRequest, options?: AxiosRequestConfig) {
        return AppsApiFp(this.configuration).createNewAppForOrganization(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new app for an organization. Deprecated, use /orgs/{org_id}/apps/creations instead.
     * @summary Create a new app for an organization.
     * @param {AppsApiCreateOrganizationAppRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof AppsApiGenerated
     */
    public createOrganizationApp(requestParameters: AppsApiCreateOrganizationAppRequest, options?: AxiosRequestConfig) {
        return AppsApiFp(this.configuration).createOrganizationApp(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an app by app id. Deprecated, use /orgs/{org_id}/apps/creations/{app_id} instead.
     * @summary Delete an app
     * @param {AppsApiDeleteAppByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof AppsApiGenerated
     */
    public deleteAppById(requestParameters: AppsApiDeleteAppByIdRequest, options?: AxiosRequestConfig) {
        return AppsApiFp(this.configuration).deleteAppById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an app by its App ID.
     * @summary Delete an app by its App ID.
     * @param {AppsApiDeleteByAppIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiGenerated
     */
    public deleteByAppId(requestParameters: AppsApiDeleteByAppIdRequest, options?: AxiosRequestConfig) {
        return AppsApiFp(this.configuration).deleteByAppId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of active OAuth sessions for the app.
     * @summary Get a list of active OAuth sessions for the app.
     * @param {AppsApiGetActiveSessionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiGenerated
     */
    public getActiveSessions(requestParameters: AppsApiGetActiveSessionsRequest, options?: AxiosRequestConfig) {
        return AppsApiFp(this.configuration).getActiveSessions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a Snyk App by its App ID.
     * @summary Get a Snyk App by its App ID.
     * @param {AppsApiGetByAppIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiGenerated
     */
    public getByAppId(requestParameters: AppsApiGetByAppIdRequest, options?: AxiosRequestConfig) {
        return AppsApiFp(this.configuration).getByAppId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get an App by client id. Deprecated, use /orgs/{org_id}/apps/creations/{app_id} instead.
     * @summary Get an app by client id
     * @param {AppsApiGetByClientIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof AppsApiGenerated
     */
    public getByClientId(requestParameters: AppsApiGetByClientIdRequest, options?: AxiosRequestConfig) {
        return AppsApiFp(this.configuration).getByClientId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Install a Snyk Apps to this group, the Snyk App must use unattended authentication eg client credentials.
     * @summary Install a Snyk Apps to this group.
     * @param {AppsApiInstallGroupAppRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiGenerated
     */
    public installGroupApp(requestParameters: AppsApiInstallGroupAppRequest, options?: AxiosRequestConfig) {
        return AppsApiFp(this.configuration).installGroupApp(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Install a Snyk Apps to this organization, the Snyk App must use unattended authentication eg client credentials.
     * @summary Install a Snyk Apps to this organization.
     * @param {AppsApiInstallSnykAppToOrgRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiGenerated
     */
    public installSnykAppToOrg(requestParameters: AppsApiInstallSnykAppToOrgRequest, options?: AxiosRequestConfig) {
        return AppsApiFp(this.configuration).installSnykAppToOrg(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of app bots authorized to an organization. Deprecated, use /orgs/{org_id}/apps/installs instead.
     * @summary Get a list of app bots authorized to an organization.
     * @param {AppsApiListAppBotsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof AppsApiGenerated
     */
    public listAppBots(requestParameters: AppsApiListAppBotsRequest, options?: AxiosRequestConfig) {
        return AppsApiFp(this.configuration).listAppBots(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of apps that can act on your behalf.
     * @summary Get a list of apps that can act on your behalf.
     * @param {AppsApiListAppsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiGenerated
     */
    public listApps(requestParameters: AppsApiListAppsRequest, options?: AxiosRequestConfig) {
        return AppsApiFp(this.configuration).listApps(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of apps installed for a group.
     * @summary Get a list of apps installed for a group.
     * @param {AppsApiListGroupAppInstallsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiGenerated
     */
    public listGroupAppInstalls(requestParameters: AppsApiListGroupAppInstallsRequest, options?: AxiosRequestConfig) {
        return AppsApiFp(this.configuration).listGroupAppInstalls(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of apps created by an organization. Deprecated, use /orgs/{org_id}/apps/creations instead.
     * @summary Get a list of apps created by an organization.
     * @param {AppsApiListOrgAppsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof AppsApiGenerated
     */
    public listOrgApps(requestParameters: AppsApiListOrgAppsRequest, options?: AxiosRequestConfig) {
        return AppsApiFp(this.configuration).listOrgApps(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of apps created by an organization.
     * @summary Get a list of apps created by an organization.
     * @param {AppsApiListOrgCreationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiGenerated
     */
    public listOrgCreations(requestParameters: AppsApiListOrgCreationsRequest, options?: AxiosRequestConfig) {
        return AppsApiFp(this.configuration).listOrgCreations(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of apps installed for an organization.
     * @summary Get a list of apps installed for an organization.
     * @param {AppsApiListOrgInstallsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiGenerated
     */
    public listOrgInstalls(requestParameters: AppsApiListOrgInstallsRequest, options?: AxiosRequestConfig) {
        return AppsApiFp(this.configuration).listOrgInstalls(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of apps installed for an user.
     * @summary Get a list of apps installed for an user.
     * @param {AppsApiListUserInstalledAppsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiGenerated
     */
    public listUserInstalledApps(requestParameters: AppsApiListUserInstalledAppsRequest, options?: AxiosRequestConfig) {
        return AppsApiFp(this.configuration).listUserInstalledApps(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Manage client secret for the Snyk App.
     * @summary Manage client secret for the Snyk App.
     * @param {AppsApiManageClientSecretForSnykAppRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiGenerated
     */
    public manageClientSecretForSnykApp(requestParameters: AppsApiManageClientSecretForSnykAppRequest, options?: AxiosRequestConfig) {
        return AppsApiFp(this.configuration).manageClientSecretForSnykApp(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Manage client secret for non-interactive Snyk App installations.
     * @summary Manage client secret for non-interactive Snyk App installations.
     * @param {AppsApiManageClientSecretForSnykApp0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiGenerated
     */
    public manageClientSecretForSnykApp_1(requestParameters: AppsApiManageClientSecretForSnykApp0Request, options?: AxiosRequestConfig) {
        return AppsApiFp(this.configuration).manageClientSecretForSnykApp_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Manage client secrets for an app. Deprecated, use /orgs/{org_id}/apps/creations/{app_id}/secrets instead.
     * @summary Manage client secrets for an app.
     * @param {AppsApiManageClientSecretsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof AppsApiGenerated
     */
    public manageClientSecrets(requestParameters: AppsApiManageClientSecretsRequest, options?: AxiosRequestConfig) {
        return AppsApiFp(this.configuration).manageClientSecrets(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Revoke access for an app by app id
     * @summary Revoke an app
     * @param {AppsApiRevokeAppByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiGenerated
     */
    public revokeAppById(requestParameters: AppsApiRevokeAppByIdRequest, options?: AxiosRequestConfig) {
        return AppsApiFp(this.configuration).revokeAppById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Revoke app bot authorization. Deprecated, use /orgs/{org_id}/apps/installs/{install_id} instead.
     * @summary Revoke app bot authorization
     * @param {AppsApiRevokeBotAuthorizationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof AppsApiGenerated
     */
    public revokeBotAuthorization(requestParameters: AppsApiRevokeBotAuthorizationRequest, options?: AxiosRequestConfig) {
        return AppsApiFp(this.configuration).revokeBotAuthorization(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Revoke access for an app by install ID.
     * @summary Revoke access for an app by install ID.
     * @param {AppsApiRevokeByInstallIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiGenerated
     */
    public revokeByInstallId(requestParameters: AppsApiRevokeByInstallIdRequest, options?: AxiosRequestConfig) {
        return AppsApiFp(this.configuration).revokeByInstallId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Revoke app authorization for an Snyk Group with install ID.
     * @summary Revoke app authorization for an Snyk Group with install ID.
     * @param {AppsApiRevokeGroupAppInstallRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiGenerated
     */
    public revokeGroupAppInstall(requestParameters: AppsApiRevokeGroupAppInstallRequest, options?: AxiosRequestConfig) {
        return AppsApiFp(this.configuration).revokeGroupAppInstall(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Revoke an active user app session.
     * @summary Revoke an active user app session.
     * @param {AppsApiRevokeUserAppSessionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiGenerated
     */
    public revokeUserAppSession(requestParameters: AppsApiRevokeUserAppSessionRequest, options?: AxiosRequestConfig) {
        return AppsApiFp(this.configuration).revokeUserAppSession(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update app attributes. Deprecated, use /orgs/{org_id}/apps/creations/{app_id} instead.
     * @summary Update app attributes that are name, redirect URIs, and access token time to live
     * @param {AppsApiUpdateAttributesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof AppsApiGenerated
     */
    public updateAttributes(requestParameters: AppsApiUpdateAttributesRequest, options?: AxiosRequestConfig) {
        return AppsApiFp(this.configuration).updateAttributes(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update app creation attributes with App ID.
     * @summary Update app creation attributes such as name, redirect URIs, and access token time to live using the App ID.
     * @param {AppsApiUpdateCreationAttributesByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiGenerated
     */
    public updateCreationAttributesById(requestParameters: AppsApiUpdateCreationAttributesByIdRequest, options?: AxiosRequestConfig) {
        return AppsApiFp(this.configuration).updateCreationAttributesById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
