/* tslint:disable */
/* eslint-disable */
/*
Snyk API

Missing description placeholder

The version of the OpenAPI document: REST


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AuditLogsSearchGroupAuditLogsResponse } from '../models';
// @ts-ignore
import { AuditLogsSearchOrganizationAuditLogsResponse } from '../models';
// @ts-ignore
import { ErrorDocument } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AuditLogsApi - axios parameter creator
 * @export
 */
export const AuditLogsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Search audit logs for a Group. Some Organization level events are supported as well as the following Group level events:   - api.access   - group.cloud_config.settings.edit   - group.create   - group.delete   - group.edit   - group.notification_settings.edit   - group.org.add   - group.org.remove   - group.policy.create   - group.policy.delete   - group.policy.edit   - group.request_access_settings.edit   - group.role.create   - group.role.delete   - group.role.edit   - group.service_account.create   - group.service_account.delete   - group.service_account.edit   - group.settings.edit   - group.settings.feature_flag.edit   - group.sso.add   - group.sso.auth0_connection.create   - group.sso.auth0_connection.edit   - group.sso.create   - group.sso.delete   - group.sso.edit   - group.sso.membership.sync   - group.sso.remove   - group.tag.create   - group.tag.delete   - group.user.add   - group.user.remove   - group.user.role.edit 
         * @summary Search Group audit logs.
         * @param {string} version The requested version of the endpoint to process the request
         * @param {string} groupId The ID of the Group.
         * @param {string} [cursor] The ID for the next page of results.
         * @param {string | Date} [from] The start date (inclusive) of the audit logs search. Example: 2023-07-27 
         * @param {string | Date} [to] The end date (inclusive) of the audit logs search. Example: 2023-07-27 
         * @param {number} [size] Number of results to return per page.
         * @param {'ASC' | 'DESC'} [sortOrder] Order in which results are returned.
         * @param {string} [userId] Filter logs by user ID.
         * @param {string} [projectId] Filter logs by project ID.
         * @param {string} [event] Filter logs by event type, cannot be used in conjunction with exclude_event parameter.
         * @param {string} [excludeEvent] Exclude event type from results, cannot be used in conjunctions with event parameter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchGroupAuditLogs: async (version: string, groupId: string, cursor?: string, from?: string | Date, to?: string | Date, size?: number, sortOrder?: 'ASC' | 'DESC', userId?: string, projectId?: string, event?: string, excludeEvent?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('searchGroupAuditLogs', 'version', version)
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('searchGroupAuditLogs', 'groupId', groupId)
            const localVarPath = `/groups/{group_id}/audit_logs/search`
                .replace(`{${"group_id"}}`, encodeURIComponent(String(groupId !== undefined ? groupId : `-group_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (from !== undefined) {
                localVarQueryParameter['from'] = (from as any instanceof Date) ?
                    (from as any).toISOString().substr(0,10) :
                    from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = (to as any instanceof Date) ?
                    (to as any).toISOString().substr(0,10) :
                    to;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sort_order'] = sortOrder;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (event !== undefined) {
                localVarQueryParameter['event'] = event;
            }

            if (excludeEvent !== undefined) {
                localVarQueryParameter['exclude_event'] = excludeEvent;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/groups/{group_id}/audit_logs/search',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search audit logs for an Organization. Supported event types:   - api.access   - org.app_bot.create   - org.app.create   - org.app.delete   - org.app.edit   - org.cloud_config.settings.edit   - org.collection.create   - org.collection.delete   - org.collection.edit   - org.create   - org.delete   - org.edit   - org.ignore_policy.edit   - org.integration.create   - org.integration.delete   - org.integration.edit   - org.integration.settings.edit   - org.language_settings.edit   - org.notification_settings.edit   - org.org_source.create   - org.org_source.delete   - org.org_source.edit   - org.policy.edit   - org.project_filter.create   - org.project_filter.delete   - org.project.add   - org.project.attributes.edit   - org.project.delete   - org.project.edit   - org.project.fix_pr.auto_open   - org.project.fix_pr.manual_open   - org.project.ignore.create   - org.project.ignore.delete   - org.project.ignore.edit   - org.project.monitor   - org.project.pr_check.edit   - org.project.remove   - org.project.settings.delete   - org.project.settings.edit   - org.project.stop_monitor   - org.project.tag.add   - org.project.tag.remove   - org.project.test   - org.request_access_settings.edit   - org.sast_settings.edit   - org.service_account.create   - org.service_account.delete   - org.service_account.edit   - org.settings.feature_flag.edit   - org.target.create   - org.target.delete   - org.user.add   - org.user.invite   - org.user.invite.accept   - org.user.invite.revoke   - org.user.invite_link.accept   - org.user.invite_link.create   - org.user.invite_link.revoke   - org.user.leave   - org.user.provision.accept   - org.user.provision.create   - org.user.provision.delete   - org.user.remove   - org.user.role.create   - org.user.role.delete   - org.user.role.details.edit   - org.user.role.edit   - org.user.role.permissions.edit   - org.webhook.add   - org.webhook.delete   - user.org.notification_settings.edit 
         * @summary Search Organization audit logs.
         * @param {string} version The requested version of the endpoint to process the request
         * @param {string} orgId The ID of the organization.
         * @param {string} [cursor] The ID for the next page of results.
         * @param {string | Date} [from] The start date (inclusive) of the audit logs search. Example: 2023-07-27 
         * @param {string | Date} [to] The end date (inclusive) of the audit logs search. Example: 2023-07-27 
         * @param {number} [size] Number of results to return per page.
         * @param {'ASC' | 'DESC'} [sortOrder] Order in which results are returned.
         * @param {string} [userId] Filter logs by user ID.
         * @param {string} [projectId] Filter logs by project ID.
         * @param {string} [event] Filter logs by event type, cannot be used in conjunction with exclude_event parameter.
         * @param {string} [excludeEvent] Exclude event type from results, cannot be used in conjunctions with event parameter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchOrganizationAuditLogs: async (version: string, orgId: string, cursor?: string, from?: string | Date, to?: string | Date, size?: number, sortOrder?: 'ASC' | 'DESC', userId?: string, projectId?: string, event?: string, excludeEvent?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('searchOrganizationAuditLogs', 'version', version)
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('searchOrganizationAuditLogs', 'orgId', orgId)
            const localVarPath = `/orgs/{org_id}/audit_logs/search`
                .replace(`{${"org_id"}}`, encodeURIComponent(String(orgId !== undefined ? orgId : `-org_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (from !== undefined) {
                localVarQueryParameter['from'] = (from as any instanceof Date) ?
                    (from as any).toISOString().substr(0,10) :
                    from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = (to as any instanceof Date) ?
                    (to as any).toISOString().substr(0,10) :
                    to;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sort_order'] = sortOrder;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (event !== undefined) {
                localVarQueryParameter['event'] = event;
            }

            if (excludeEvent !== undefined) {
                localVarQueryParameter['exclude_event'] = excludeEvent;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/orgs/{org_id}/audit_logs/search',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuditLogsApi - functional programming interface
 * @export
 */
export const AuditLogsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuditLogsApiAxiosParamCreator(configuration)
    return {
        /**
         * Search audit logs for a Group. Some Organization level events are supported as well as the following Group level events:   - api.access   - group.cloud_config.settings.edit   - group.create   - group.delete   - group.edit   - group.notification_settings.edit   - group.org.add   - group.org.remove   - group.policy.create   - group.policy.delete   - group.policy.edit   - group.request_access_settings.edit   - group.role.create   - group.role.delete   - group.role.edit   - group.service_account.create   - group.service_account.delete   - group.service_account.edit   - group.settings.edit   - group.settings.feature_flag.edit   - group.sso.add   - group.sso.auth0_connection.create   - group.sso.auth0_connection.edit   - group.sso.create   - group.sso.delete   - group.sso.edit   - group.sso.membership.sync   - group.sso.remove   - group.tag.create   - group.tag.delete   - group.user.add   - group.user.remove   - group.user.role.edit 
         * @summary Search Group audit logs.
         * @param {AuditLogsApiSearchGroupAuditLogsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchGroupAuditLogs(requestParameters: AuditLogsApiSearchGroupAuditLogsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuditLogsSearchGroupAuditLogsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchGroupAuditLogs(requestParameters.version, requestParameters.groupId, requestParameters.cursor, requestParameters.from, requestParameters.to, requestParameters.size, requestParameters.sortOrder, requestParameters.userId, requestParameters.projectId, requestParameters.event, requestParameters.excludeEvent, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Search audit logs for an Organization. Supported event types:   - api.access   - org.app_bot.create   - org.app.create   - org.app.delete   - org.app.edit   - org.cloud_config.settings.edit   - org.collection.create   - org.collection.delete   - org.collection.edit   - org.create   - org.delete   - org.edit   - org.ignore_policy.edit   - org.integration.create   - org.integration.delete   - org.integration.edit   - org.integration.settings.edit   - org.language_settings.edit   - org.notification_settings.edit   - org.org_source.create   - org.org_source.delete   - org.org_source.edit   - org.policy.edit   - org.project_filter.create   - org.project_filter.delete   - org.project.add   - org.project.attributes.edit   - org.project.delete   - org.project.edit   - org.project.fix_pr.auto_open   - org.project.fix_pr.manual_open   - org.project.ignore.create   - org.project.ignore.delete   - org.project.ignore.edit   - org.project.monitor   - org.project.pr_check.edit   - org.project.remove   - org.project.settings.delete   - org.project.settings.edit   - org.project.stop_monitor   - org.project.tag.add   - org.project.tag.remove   - org.project.test   - org.request_access_settings.edit   - org.sast_settings.edit   - org.service_account.create   - org.service_account.delete   - org.service_account.edit   - org.settings.feature_flag.edit   - org.target.create   - org.target.delete   - org.user.add   - org.user.invite   - org.user.invite.accept   - org.user.invite.revoke   - org.user.invite_link.accept   - org.user.invite_link.create   - org.user.invite_link.revoke   - org.user.leave   - org.user.provision.accept   - org.user.provision.create   - org.user.provision.delete   - org.user.remove   - org.user.role.create   - org.user.role.delete   - org.user.role.details.edit   - org.user.role.edit   - org.user.role.permissions.edit   - org.webhook.add   - org.webhook.delete   - user.org.notification_settings.edit 
         * @summary Search Organization audit logs.
         * @param {AuditLogsApiSearchOrganizationAuditLogsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchOrganizationAuditLogs(requestParameters: AuditLogsApiSearchOrganizationAuditLogsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuditLogsSearchOrganizationAuditLogsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchOrganizationAuditLogs(requestParameters.version, requestParameters.orgId, requestParameters.cursor, requestParameters.from, requestParameters.to, requestParameters.size, requestParameters.sortOrder, requestParameters.userId, requestParameters.projectId, requestParameters.event, requestParameters.excludeEvent, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuditLogsApi - factory interface
 * @export
 */
export const AuditLogsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuditLogsApiFp(configuration)
    return {
        /**
         * Search audit logs for a Group. Some Organization level events are supported as well as the following Group level events:   - api.access   - group.cloud_config.settings.edit   - group.create   - group.delete   - group.edit   - group.notification_settings.edit   - group.org.add   - group.org.remove   - group.policy.create   - group.policy.delete   - group.policy.edit   - group.request_access_settings.edit   - group.role.create   - group.role.delete   - group.role.edit   - group.service_account.create   - group.service_account.delete   - group.service_account.edit   - group.settings.edit   - group.settings.feature_flag.edit   - group.sso.add   - group.sso.auth0_connection.create   - group.sso.auth0_connection.edit   - group.sso.create   - group.sso.delete   - group.sso.edit   - group.sso.membership.sync   - group.sso.remove   - group.tag.create   - group.tag.delete   - group.user.add   - group.user.remove   - group.user.role.edit 
         * @summary Search Group audit logs.
         * @param {AuditLogsApiSearchGroupAuditLogsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchGroupAuditLogs(requestParameters: AuditLogsApiSearchGroupAuditLogsRequest, options?: AxiosRequestConfig): AxiosPromise<AuditLogsSearchGroupAuditLogsResponse> {
            return localVarFp.searchGroupAuditLogs(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Search audit logs for an Organization. Supported event types:   - api.access   - org.app_bot.create   - org.app.create   - org.app.delete   - org.app.edit   - org.cloud_config.settings.edit   - org.collection.create   - org.collection.delete   - org.collection.edit   - org.create   - org.delete   - org.edit   - org.ignore_policy.edit   - org.integration.create   - org.integration.delete   - org.integration.edit   - org.integration.settings.edit   - org.language_settings.edit   - org.notification_settings.edit   - org.org_source.create   - org.org_source.delete   - org.org_source.edit   - org.policy.edit   - org.project_filter.create   - org.project_filter.delete   - org.project.add   - org.project.attributes.edit   - org.project.delete   - org.project.edit   - org.project.fix_pr.auto_open   - org.project.fix_pr.manual_open   - org.project.ignore.create   - org.project.ignore.delete   - org.project.ignore.edit   - org.project.monitor   - org.project.pr_check.edit   - org.project.remove   - org.project.settings.delete   - org.project.settings.edit   - org.project.stop_monitor   - org.project.tag.add   - org.project.tag.remove   - org.project.test   - org.request_access_settings.edit   - org.sast_settings.edit   - org.service_account.create   - org.service_account.delete   - org.service_account.edit   - org.settings.feature_flag.edit   - org.target.create   - org.target.delete   - org.user.add   - org.user.invite   - org.user.invite.accept   - org.user.invite.revoke   - org.user.invite_link.accept   - org.user.invite_link.create   - org.user.invite_link.revoke   - org.user.leave   - org.user.provision.accept   - org.user.provision.create   - org.user.provision.delete   - org.user.remove   - org.user.role.create   - org.user.role.delete   - org.user.role.details.edit   - org.user.role.edit   - org.user.role.permissions.edit   - org.webhook.add   - org.webhook.delete   - user.org.notification_settings.edit 
         * @summary Search Organization audit logs.
         * @param {AuditLogsApiSearchOrganizationAuditLogsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchOrganizationAuditLogs(requestParameters: AuditLogsApiSearchOrganizationAuditLogsRequest, options?: AxiosRequestConfig): AxiosPromise<AuditLogsSearchOrganizationAuditLogsResponse> {
            return localVarFp.searchOrganizationAuditLogs(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for searchGroupAuditLogs operation in AuditLogsApi.
 * @export
 * @interface AuditLogsApiSearchGroupAuditLogsRequest
 */
export type AuditLogsApiSearchGroupAuditLogsRequest = {
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof AuditLogsApiSearchGroupAuditLogs
    */
    readonly version: string
    
    /**
    * The ID of the Group.
    * @type {string}
    * @memberof AuditLogsApiSearchGroupAuditLogs
    */
    readonly groupId: string
    
    /**
    * The ID for the next page of results.
    * @type {string}
    * @memberof AuditLogsApiSearchGroupAuditLogs
    */
    readonly cursor?: string
    
    /**
    * The start date (inclusive) of the audit logs search. Example: 2023-07-27 
    * @type {string | Date}
    * @memberof AuditLogsApiSearchGroupAuditLogs
    */
    readonly from?: string | Date
    
    /**
    * The end date (inclusive) of the audit logs search. Example: 2023-07-27 
    * @type {string | Date}
    * @memberof AuditLogsApiSearchGroupAuditLogs
    */
    readonly to?: string | Date
    
    /**
    * Number of results to return per page.
    * @type {number}
    * @memberof AuditLogsApiSearchGroupAuditLogs
    */
    readonly size?: number
    
    /**
    * Order in which results are returned.
    * @type {'ASC' | 'DESC'}
    * @memberof AuditLogsApiSearchGroupAuditLogs
    */
    readonly sortOrder?: 'ASC' | 'DESC'
    
    /**
    * Filter logs by user ID.
    * @type {string}
    * @memberof AuditLogsApiSearchGroupAuditLogs
    */
    readonly userId?: string
    
    /**
    * Filter logs by project ID.
    * @type {string}
    * @memberof AuditLogsApiSearchGroupAuditLogs
    */
    readonly projectId?: string
    
    /**
    * Filter logs by event type, cannot be used in conjunction with exclude_event parameter.
    * @type {string}
    * @memberof AuditLogsApiSearchGroupAuditLogs
    */
    readonly event?: string
    
    /**
    * Exclude event type from results, cannot be used in conjunctions with event parameter.
    * @type {string}
    * @memberof AuditLogsApiSearchGroupAuditLogs
    */
    readonly excludeEvent?: string
    
}

/**
 * Request parameters for searchOrganizationAuditLogs operation in AuditLogsApi.
 * @export
 * @interface AuditLogsApiSearchOrganizationAuditLogsRequest
 */
export type AuditLogsApiSearchOrganizationAuditLogsRequest = {
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof AuditLogsApiSearchOrganizationAuditLogs
    */
    readonly version: string
    
    /**
    * The ID of the organization.
    * @type {string}
    * @memberof AuditLogsApiSearchOrganizationAuditLogs
    */
    readonly orgId: string
    
    /**
    * The ID for the next page of results.
    * @type {string}
    * @memberof AuditLogsApiSearchOrganizationAuditLogs
    */
    readonly cursor?: string
    
    /**
    * The start date (inclusive) of the audit logs search. Example: 2023-07-27 
    * @type {string | Date}
    * @memberof AuditLogsApiSearchOrganizationAuditLogs
    */
    readonly from?: string | Date
    
    /**
    * The end date (inclusive) of the audit logs search. Example: 2023-07-27 
    * @type {string | Date}
    * @memberof AuditLogsApiSearchOrganizationAuditLogs
    */
    readonly to?: string | Date
    
    /**
    * Number of results to return per page.
    * @type {number}
    * @memberof AuditLogsApiSearchOrganizationAuditLogs
    */
    readonly size?: number
    
    /**
    * Order in which results are returned.
    * @type {'ASC' | 'DESC'}
    * @memberof AuditLogsApiSearchOrganizationAuditLogs
    */
    readonly sortOrder?: 'ASC' | 'DESC'
    
    /**
    * Filter logs by user ID.
    * @type {string}
    * @memberof AuditLogsApiSearchOrganizationAuditLogs
    */
    readonly userId?: string
    
    /**
    * Filter logs by project ID.
    * @type {string}
    * @memberof AuditLogsApiSearchOrganizationAuditLogs
    */
    readonly projectId?: string
    
    /**
    * Filter logs by event type, cannot be used in conjunction with exclude_event parameter.
    * @type {string}
    * @memberof AuditLogsApiSearchOrganizationAuditLogs
    */
    readonly event?: string
    
    /**
    * Exclude event type from results, cannot be used in conjunctions with event parameter.
    * @type {string}
    * @memberof AuditLogsApiSearchOrganizationAuditLogs
    */
    readonly excludeEvent?: string
    
}

/**
 * AuditLogsApiGenerated - object-oriented interface
 * @export
 * @class AuditLogsApiGenerated
 * @extends {BaseAPI}
 */
export class AuditLogsApiGenerated extends BaseAPI {
    /**
     * Search audit logs for a Group. Some Organization level events are supported as well as the following Group level events:   - api.access   - group.cloud_config.settings.edit   - group.create   - group.delete   - group.edit   - group.notification_settings.edit   - group.org.add   - group.org.remove   - group.policy.create   - group.policy.delete   - group.policy.edit   - group.request_access_settings.edit   - group.role.create   - group.role.delete   - group.role.edit   - group.service_account.create   - group.service_account.delete   - group.service_account.edit   - group.settings.edit   - group.settings.feature_flag.edit   - group.sso.add   - group.sso.auth0_connection.create   - group.sso.auth0_connection.edit   - group.sso.create   - group.sso.delete   - group.sso.edit   - group.sso.membership.sync   - group.sso.remove   - group.tag.create   - group.tag.delete   - group.user.add   - group.user.remove   - group.user.role.edit 
     * @summary Search Group audit logs.
     * @param {AuditLogsApiSearchGroupAuditLogsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditLogsApiGenerated
     */
    public searchGroupAuditLogs(requestParameters: AuditLogsApiSearchGroupAuditLogsRequest, options?: AxiosRequestConfig) {
        return AuditLogsApiFp(this.configuration).searchGroupAuditLogs(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Search audit logs for an Organization. Supported event types:   - api.access   - org.app_bot.create   - org.app.create   - org.app.delete   - org.app.edit   - org.cloud_config.settings.edit   - org.collection.create   - org.collection.delete   - org.collection.edit   - org.create   - org.delete   - org.edit   - org.ignore_policy.edit   - org.integration.create   - org.integration.delete   - org.integration.edit   - org.integration.settings.edit   - org.language_settings.edit   - org.notification_settings.edit   - org.org_source.create   - org.org_source.delete   - org.org_source.edit   - org.policy.edit   - org.project_filter.create   - org.project_filter.delete   - org.project.add   - org.project.attributes.edit   - org.project.delete   - org.project.edit   - org.project.fix_pr.auto_open   - org.project.fix_pr.manual_open   - org.project.ignore.create   - org.project.ignore.delete   - org.project.ignore.edit   - org.project.monitor   - org.project.pr_check.edit   - org.project.remove   - org.project.settings.delete   - org.project.settings.edit   - org.project.stop_monitor   - org.project.tag.add   - org.project.tag.remove   - org.project.test   - org.request_access_settings.edit   - org.sast_settings.edit   - org.service_account.create   - org.service_account.delete   - org.service_account.edit   - org.settings.feature_flag.edit   - org.target.create   - org.target.delete   - org.user.add   - org.user.invite   - org.user.invite.accept   - org.user.invite.revoke   - org.user.invite_link.accept   - org.user.invite_link.create   - org.user.invite_link.revoke   - org.user.leave   - org.user.provision.accept   - org.user.provision.create   - org.user.provision.delete   - org.user.remove   - org.user.role.create   - org.user.role.delete   - org.user.role.details.edit   - org.user.role.edit   - org.user.role.permissions.edit   - org.webhook.add   - org.webhook.delete   - user.org.notification_settings.edit 
     * @summary Search Organization audit logs.
     * @param {AuditLogsApiSearchOrganizationAuditLogsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditLogsApiGenerated
     */
    public searchOrganizationAuditLogs(requestParameters: AuditLogsApiSearchOrganizationAuditLogsRequest, options?: AxiosRequestConfig) {
        return AuditLogsApiFp(this.configuration).searchOrganizationAuditLogs(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
