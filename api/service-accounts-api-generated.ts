/* tslint:disable */
/* eslint-disable */
/*
Snyk API

Snyk helps software-driven businesses develop fast and stay secure. Continuously find and fix vulnerabilities for npm, Maven, NuGet, RubyGems, PyPI and more.

The version of the OpenAPI document: REST


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorDocument } from '../models';
// @ts-ignore
import { ServiceAccountsCreateForOrganizationRequest } from '../models';
// @ts-ignore
import { ServiceAccountsCreateForOrganizationRequestData } from '../models';
// @ts-ignore
import { ServiceAccountsCreateForOrganizationResponse } from '../models';
// @ts-ignore
import { ServiceAccountsCreateGroupRequest } from '../models';
// @ts-ignore
import { ServiceAccountsCreateGroupRequestData } from '../models';
// @ts-ignore
import { ServiceAccountsCreateGroupResponse } from '../models';
// @ts-ignore
import { ServiceAccountsGetGroupServiceAccountResponse } from '../models';
// @ts-ignore
import { ServiceAccountsGetOrganizationAccountByIdResponse } from '../models';
// @ts-ignore
import { ServiceAccountsListGroupServiceAccountsResponse } from '../models';
// @ts-ignore
import { ServiceAccountsListOrganizationServiceAccountsResponse } from '../models';
// @ts-ignore
import { ServiceAccountsManageClientSecretForOrganizationServiceAccountRequest } from '../models';
// @ts-ignore
import { ServiceAccountsManageClientSecretForOrganizationServiceAccountResponse } from '../models';
// @ts-ignore
import { ServiceAccountsManageClientSecretRequest } from '../models';
// @ts-ignore
import { ServiceAccountsManageClientSecretRequestData } from '../models';
// @ts-ignore
import { ServiceAccountsManageClientSecretResponse } from '../models';
// @ts-ignore
import { ServiceAccountsUpdateGroupNameByIdRequest } from '../models';
// @ts-ignore
import { ServiceAccountsUpdateGroupNameByIdRequestData } from '../models';
// @ts-ignore
import { ServiceAccountsUpdateGroupNameByIdResponse } from '../models';
// @ts-ignore
import { ServiceAccountsUpdateOrganizationServiceAccountNameRequest } from '../models';
// @ts-ignore
import { ServiceAccountsUpdateOrganizationServiceAccountNameRequestData } from '../models';
// @ts-ignore
import { ServiceAccountsUpdateOrganizationServiceAccountNameResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ServiceAccountsApi - axios parameter creator
 * @export
 */
export const ServiceAccountsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a service account for an organization. The service account can be used to generate access tokens.
         * @summary Create a service account for an organization.
         * @param {string} orgId The ID of the Snyk Organization that is creating and will own the service account.
         * @param {string} version The requested version of the endpoint to process the request
         * @param {ServiceAccountsCreateForOrganizationRequest} serviceAccountsCreateForOrganizationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createForOrganization: async (orgId: string, version: string, serviceAccountsCreateForOrganizationRequest: ServiceAccountsCreateForOrganizationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('createForOrganization', 'orgId', orgId)
            // verify required parameter 'version' is not null or undefined
            assertParamExists('createForOrganization', 'version', version)
            // verify required parameter 'serviceAccountsCreateForOrganizationRequest' is not null or undefined
            assertParamExists('createForOrganization', 'serviceAccountsCreateForOrganizationRequest', serviceAccountsCreateForOrganizationRequest)
            const localVarPath = `/orgs/{org_id}/service_accounts`
                .replace(`{${"org_id"}}`, encodeURIComponent(String(orgId !== undefined ? orgId : `-org_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: serviceAccountsCreateForOrganizationRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/orgs/{org_id}/service_accounts',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(serviceAccountsCreateForOrganizationRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a service account for a group. The service account can be used to generate access tokens. Currently, we only allow group service accounts using default group roles.
         * @summary Create a service account for a group.
         * @param {string} groupId The ID of the Snyk Group that is creating and owns the service account
         * @param {string} version The requested version of the endpoint to process the request
         * @param {ServiceAccountsCreateGroupRequest} serviceAccountsCreateGroupRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGroup: async (groupId: string, version: string, serviceAccountsCreateGroupRequest: ServiceAccountsCreateGroupRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('createGroup', 'groupId', groupId)
            // verify required parameter 'version' is not null or undefined
            assertParamExists('createGroup', 'version', version)
            // verify required parameter 'serviceAccountsCreateGroupRequest' is not null or undefined
            assertParamExists('createGroup', 'serviceAccountsCreateGroupRequest', serviceAccountsCreateGroupRequest)
            const localVarPath = `/groups/{group_id}/service_accounts`
                .replace(`{${"group_id"}}`, encodeURIComponent(String(groupId !== undefined ? groupId : `-group_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: serviceAccountsCreateGroupRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/groups/{group_id}/service_accounts',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(serviceAccountsCreateGroupRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Permanently delete a group-level service account by its ID.
         * @summary Delete a group service account.
         * @param {string} groupId The ID of the Snyk Group that owns the service account.
         * @param {string} serviceaccountId The ID of the service account.
         * @param {string} version The requested version of the endpoint to process the request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroupServiceAccount: async (groupId: string, serviceaccountId: string, version: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('deleteGroupServiceAccount', 'groupId', groupId)
            // verify required parameter 'serviceaccountId' is not null or undefined
            assertParamExists('deleteGroupServiceAccount', 'serviceaccountId', serviceaccountId)
            // verify required parameter 'version' is not null or undefined
            assertParamExists('deleteGroupServiceAccount', 'version', version)
            const localVarPath = `/groups/{group_id}/service_accounts/{serviceaccount_id}`
                .replace(`{${"group_id"}}`, encodeURIComponent(String(groupId !== undefined ? groupId : `-group_id-`)))
                .replace(`{${"serviceaccount_id"}}`, encodeURIComponent(String(serviceaccountId !== undefined ? serviceaccountId : `-serviceaccount_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/groups/{group_id}/service_accounts/{serviceaccount_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a service account in an organization.
         * @summary Delete a service account in an organization.
         * @param {string} orgId The ID of org to which the service account belongs.
         * @param {string} serviceaccountId The ID of the service account.
         * @param {string} version The requested version of the endpoint to process the request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrgServiceAccount: async (orgId: string, serviceaccountId: string, version: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('deleteOrgServiceAccount', 'orgId', orgId)
            // verify required parameter 'serviceaccountId' is not null or undefined
            assertParamExists('deleteOrgServiceAccount', 'serviceaccountId', serviceaccountId)
            // verify required parameter 'version' is not null or undefined
            assertParamExists('deleteOrgServiceAccount', 'version', version)
            const localVarPath = `/orgs/{org_id}/service_accounts/{serviceaccount_id}`
                .replace(`{${"org_id"}}`, encodeURIComponent(String(orgId !== undefined ? orgId : `-org_id-`)))
                .replace(`{${"serviceaccount_id"}}`, encodeURIComponent(String(serviceaccountId !== undefined ? serviceaccountId : `-serviceaccount_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/orgs/{org_id}/service_accounts/{serviceaccount_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a group-level service account by its ID.
         * @summary Get a group service account.
         * @param {string} groupId The ID of the Snyk Group that owns the service account.
         * @param {string} serviceaccountId The ID of the service account.
         * @param {string} version The requested version of the endpoint to process the request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupServiceAccount: async (groupId: string, serviceaccountId: string, version: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('getGroupServiceAccount', 'groupId', groupId)
            // verify required parameter 'serviceaccountId' is not null or undefined
            assertParamExists('getGroupServiceAccount', 'serviceaccountId', serviceaccountId)
            // verify required parameter 'version' is not null or undefined
            assertParamExists('getGroupServiceAccount', 'version', version)
            const localVarPath = `/groups/{group_id}/service_accounts/{serviceaccount_id}`
                .replace(`{${"group_id"}}`, encodeURIComponent(String(groupId !== undefined ? groupId : `-group_id-`)))
                .replace(`{${"serviceaccount_id"}}`, encodeURIComponent(String(serviceaccountId !== undefined ? serviceaccountId : `-serviceaccount_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/groups/{group_id}/service_accounts/{serviceaccount_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an organization-level service account by its ID.
         * @summary Get an organization service account.
         * @param {string} orgId The ID of the Snyk Organization that owns the service account.
         * @param {string} serviceaccountId The ID of the service account.
         * @param {string} version The requested version of the endpoint to process the request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationAccountById: async (orgId: string, serviceaccountId: string, version: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getOrganizationAccountById', 'orgId', orgId)
            // verify required parameter 'serviceaccountId' is not null or undefined
            assertParamExists('getOrganizationAccountById', 'serviceaccountId', serviceaccountId)
            // verify required parameter 'version' is not null or undefined
            assertParamExists('getOrganizationAccountById', 'version', version)
            const localVarPath = `/orgs/{org_id}/service_accounts/{serviceaccount_id}`
                .replace(`{${"org_id"}}`, encodeURIComponent(String(orgId !== undefined ? orgId : `-org_id-`)))
                .replace(`{${"serviceaccount_id"}}`, encodeURIComponent(String(serviceaccountId !== undefined ? serviceaccountId : `-serviceaccount_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/orgs/{org_id}/service_accounts/{serviceaccount_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all service accounts for a group.
         * @summary Get a list of group service accounts.
         * @param {string} groupId The ID of the Snyk Group that owns the service accounts.
         * @param {string} version The requested version of the endpoint to process the request
         * @param {string} [startingAfter] Return the page of results immediately after this cursor
         * @param {string} [endingBefore] Return the page of results immediately before this cursor
         * @param {number} [limit] Number of results to return per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGroupServiceAccounts: async (groupId: string, version: string, startingAfter?: string, endingBefore?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('listGroupServiceAccounts', 'groupId', groupId)
            // verify required parameter 'version' is not null or undefined
            assertParamExists('listGroupServiceAccounts', 'version', version)
            const localVarPath = `/groups/{group_id}/service_accounts`
                .replace(`{${"group_id"}}`, encodeURIComponent(String(groupId !== undefined ? groupId : `-group_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (startingAfter !== undefined) {
                localVarQueryParameter['starting_after'] = startingAfter;
            }

            if (endingBefore !== undefined) {
                localVarQueryParameter['ending_before'] = endingBefore;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/groups/{group_id}/service_accounts',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all service accounts for an organization.
         * @summary Get a list of organization service accounts.
         * @param {string} orgId The ID of the Snyk Organization that owns the service accounts.
         * @param {string} version The requested version of the endpoint to process the request
         * @param {string} [startingAfter] Return the page of results immediately after this cursor
         * @param {string} [endingBefore] Return the page of results immediately before this cursor
         * @param {number} [limit] Number of results to return per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrganizationServiceAccounts: async (orgId: string, version: string, startingAfter?: string, endingBefore?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('listOrganizationServiceAccounts', 'orgId', orgId)
            // verify required parameter 'version' is not null or undefined
            assertParamExists('listOrganizationServiceAccounts', 'version', version)
            const localVarPath = `/orgs/{org_id}/service_accounts`
                .replace(`{${"org_id"}}`, encodeURIComponent(String(orgId !== undefined ? orgId : `-org_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (startingAfter !== undefined) {
                localVarQueryParameter['starting_after'] = startingAfter;
            }

            if (endingBefore !== undefined) {
                localVarQueryParameter['ending_before'] = endingBefore;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/orgs/{org_id}/service_accounts',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Manage the client secret of a group service account by the service account ID.
         * @summary Manage a group service account\'s client secret.
         * @param {string} groupId The ID of the Snyk Group that owns the service account.
         * @param {string} serviceaccountId The ID of the service account.
         * @param {string} version The requested version of the endpoint to process the request
         * @param {ServiceAccountsManageClientSecretRequest} serviceAccountsManageClientSecretRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        manageClientSecret: async (groupId: string, serviceaccountId: string, version: string, serviceAccountsManageClientSecretRequest: ServiceAccountsManageClientSecretRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('manageClientSecret', 'groupId', groupId)
            // verify required parameter 'serviceaccountId' is not null or undefined
            assertParamExists('manageClientSecret', 'serviceaccountId', serviceaccountId)
            // verify required parameter 'version' is not null or undefined
            assertParamExists('manageClientSecret', 'version', version)
            // verify required parameter 'serviceAccountsManageClientSecretRequest' is not null or undefined
            assertParamExists('manageClientSecret', 'serviceAccountsManageClientSecretRequest', serviceAccountsManageClientSecretRequest)
            const localVarPath = `/groups/{group_id}/service_accounts/{serviceaccount_id}/secrets`
                .replace(`{${"group_id"}}`, encodeURIComponent(String(groupId !== undefined ? groupId : `-group_id-`)))
                .replace(`{${"serviceaccount_id"}}`, encodeURIComponent(String(serviceaccountId !== undefined ? serviceaccountId : `-serviceaccount_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: serviceAccountsManageClientSecretRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/groups/{group_id}/service_accounts/{serviceaccount_id}/secrets',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(serviceAccountsManageClientSecretRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Manage the client secret of an organization-level service account by the service account ID.
         * @summary Manage an organization service account\'s client secret.
         * @param {string} orgId The ID of the Snyk Organization that owns the service account.
         * @param {string} serviceaccountId The ID of the service account.
         * @param {string} version The requested version of the endpoint to process the request
         * @param {ServiceAccountsManageClientSecretForOrganizationServiceAccountRequest} serviceAccountsManageClientSecretForOrganizationServiceAccountRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        manageClientSecretForOrganizationServiceAccount: async (orgId: string, serviceaccountId: string, version: string, serviceAccountsManageClientSecretForOrganizationServiceAccountRequest: ServiceAccountsManageClientSecretForOrganizationServiceAccountRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('manageClientSecretForOrganizationServiceAccount', 'orgId', orgId)
            // verify required parameter 'serviceaccountId' is not null or undefined
            assertParamExists('manageClientSecretForOrganizationServiceAccount', 'serviceaccountId', serviceaccountId)
            // verify required parameter 'version' is not null or undefined
            assertParamExists('manageClientSecretForOrganizationServiceAccount', 'version', version)
            // verify required parameter 'serviceAccountsManageClientSecretForOrganizationServiceAccountRequest' is not null or undefined
            assertParamExists('manageClientSecretForOrganizationServiceAccount', 'serviceAccountsManageClientSecretForOrganizationServiceAccountRequest', serviceAccountsManageClientSecretForOrganizationServiceAccountRequest)
            const localVarPath = `/orgs/{org_id}/service_accounts/{serviceaccount_id}/secrets`
                .replace(`{${"org_id"}}`, encodeURIComponent(String(orgId !== undefined ? orgId : `-org_id-`)))
                .replace(`{${"serviceaccount_id"}}`, encodeURIComponent(String(serviceaccountId !== undefined ? serviceaccountId : `-serviceaccount_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: serviceAccountsManageClientSecretForOrganizationServiceAccountRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/orgs/{org_id}/service_accounts/{serviceaccount_id}/secrets',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(serviceAccountsManageClientSecretForOrganizationServiceAccountRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the name of a group\'s service account by its ID.
         * @summary Update a group service account.
         * @param {string} groupId The ID of the Snyk Group that owns the service account.
         * @param {string} serviceaccountId The ID of the service account.
         * @param {string} version The requested version of the endpoint to process the request
         * @param {ServiceAccountsUpdateGroupNameByIdRequest} serviceAccountsUpdateGroupNameByIdRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGroupNameById: async (groupId: string, serviceaccountId: string, version: string, serviceAccountsUpdateGroupNameByIdRequest: ServiceAccountsUpdateGroupNameByIdRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('updateGroupNameById', 'groupId', groupId)
            // verify required parameter 'serviceaccountId' is not null or undefined
            assertParamExists('updateGroupNameById', 'serviceaccountId', serviceaccountId)
            // verify required parameter 'version' is not null or undefined
            assertParamExists('updateGroupNameById', 'version', version)
            // verify required parameter 'serviceAccountsUpdateGroupNameByIdRequest' is not null or undefined
            assertParamExists('updateGroupNameById', 'serviceAccountsUpdateGroupNameByIdRequest', serviceAccountsUpdateGroupNameByIdRequest)
            const localVarPath = `/groups/{group_id}/service_accounts/{serviceaccount_id}`
                .replace(`{${"group_id"}}`, encodeURIComponent(String(groupId !== undefined ? groupId : `-group_id-`)))
                .replace(`{${"serviceaccount_id"}}`, encodeURIComponent(String(serviceaccountId !== undefined ? serviceaccountId : `-serviceaccount_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: serviceAccountsUpdateGroupNameByIdRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/groups/{group_id}/service_accounts/{serviceaccount_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(serviceAccountsUpdateGroupNameByIdRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the name of an organization-level service account by its ID.
         * @summary Update an organization service account.
         * @param {string} orgId The ID of the Snyk Organization that owns the service account.
         * @param {string} serviceaccountId The ID of the service account.
         * @param {string} version The requested version of the endpoint to process the request
         * @param {ServiceAccountsUpdateOrganizationServiceAccountNameRequest} serviceAccountsUpdateOrganizationServiceAccountNameRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrganizationServiceAccountName: async (orgId: string, serviceaccountId: string, version: string, serviceAccountsUpdateOrganizationServiceAccountNameRequest: ServiceAccountsUpdateOrganizationServiceAccountNameRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('updateOrganizationServiceAccountName', 'orgId', orgId)
            // verify required parameter 'serviceaccountId' is not null or undefined
            assertParamExists('updateOrganizationServiceAccountName', 'serviceaccountId', serviceaccountId)
            // verify required parameter 'version' is not null or undefined
            assertParamExists('updateOrganizationServiceAccountName', 'version', version)
            // verify required parameter 'serviceAccountsUpdateOrganizationServiceAccountNameRequest' is not null or undefined
            assertParamExists('updateOrganizationServiceAccountName', 'serviceAccountsUpdateOrganizationServiceAccountNameRequest', serviceAccountsUpdateOrganizationServiceAccountNameRequest)
            const localVarPath = `/orgs/{org_id}/service_accounts/{serviceaccount_id}`
                .replace(`{${"org_id"}}`, encodeURIComponent(String(orgId !== undefined ? orgId : `-org_id-`)))
                .replace(`{${"serviceaccount_id"}}`, encodeURIComponent(String(serviceaccountId !== undefined ? serviceaccountId : `-serviceaccount_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: serviceAccountsUpdateOrganizationServiceAccountNameRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/orgs/{org_id}/service_accounts/{serviceaccount_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(serviceAccountsUpdateOrganizationServiceAccountNameRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ServiceAccountsApi - functional programming interface
 * @export
 */
export const ServiceAccountsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ServiceAccountsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a service account for an organization. The service account can be used to generate access tokens.
         * @summary Create a service account for an organization.
         * @param {ServiceAccountsApiCreateForOrganizationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createForOrganization(requestParameters: ServiceAccountsApiCreateForOrganizationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccountsCreateForOrganizationResponse>> {
            const serviceAccountsCreateForOrganizationRequest: ServiceAccountsCreateForOrganizationRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createForOrganization(requestParameters.orgId, requestParameters.version, serviceAccountsCreateForOrganizationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a service account for a group. The service account can be used to generate access tokens. Currently, we only allow group service accounts using default group roles.
         * @summary Create a service account for a group.
         * @param {ServiceAccountsApiCreateGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createGroup(requestParameters: ServiceAccountsApiCreateGroupRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccountsCreateGroupResponse>> {
            const serviceAccountsCreateGroupRequest: ServiceAccountsCreateGroupRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createGroup(requestParameters.groupId, requestParameters.version, serviceAccountsCreateGroupRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Permanently delete a group-level service account by its ID.
         * @summary Delete a group service account.
         * @param {ServiceAccountsApiDeleteGroupServiceAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteGroupServiceAccount(requestParameters: ServiceAccountsApiDeleteGroupServiceAccountRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteGroupServiceAccount(requestParameters.groupId, requestParameters.serviceaccountId, requestParameters.version, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a service account in an organization.
         * @summary Delete a service account in an organization.
         * @param {ServiceAccountsApiDeleteOrgServiceAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOrgServiceAccount(requestParameters: ServiceAccountsApiDeleteOrgServiceAccountRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOrgServiceAccount(requestParameters.orgId, requestParameters.serviceaccountId, requestParameters.version, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a group-level service account by its ID.
         * @summary Get a group service account.
         * @param {ServiceAccountsApiGetGroupServiceAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGroupServiceAccount(requestParameters: ServiceAccountsApiGetGroupServiceAccountRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccountsGetGroupServiceAccountResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGroupServiceAccount(requestParameters.groupId, requestParameters.serviceaccountId, requestParameters.version, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get an organization-level service account by its ID.
         * @summary Get an organization service account.
         * @param {ServiceAccountsApiGetOrganizationAccountByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizationAccountById(requestParameters: ServiceAccountsApiGetOrganizationAccountByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccountsGetOrganizationAccountByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganizationAccountById(requestParameters.orgId, requestParameters.serviceaccountId, requestParameters.version, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all service accounts for a group.
         * @summary Get a list of group service accounts.
         * @param {ServiceAccountsApiListGroupServiceAccountsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listGroupServiceAccounts(requestParameters: ServiceAccountsApiListGroupServiceAccountsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccountsListGroupServiceAccountsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listGroupServiceAccounts(requestParameters.groupId, requestParameters.version, requestParameters.startingAfter, requestParameters.endingBefore, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all service accounts for an organization.
         * @summary Get a list of organization service accounts.
         * @param {ServiceAccountsApiListOrganizationServiceAccountsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listOrganizationServiceAccounts(requestParameters: ServiceAccountsApiListOrganizationServiceAccountsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccountsListOrganizationServiceAccountsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listOrganizationServiceAccounts(requestParameters.orgId, requestParameters.version, requestParameters.startingAfter, requestParameters.endingBefore, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Manage the client secret of a group service account by the service account ID.
         * @summary Manage a group service account\'s client secret.
         * @param {ServiceAccountsApiManageClientSecretRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async manageClientSecret(requestParameters: ServiceAccountsApiManageClientSecretRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccountsManageClientSecretResponse>> {
            const serviceAccountsManageClientSecretRequest: ServiceAccountsManageClientSecretRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.manageClientSecret(requestParameters.groupId, requestParameters.serviceaccountId, requestParameters.version, serviceAccountsManageClientSecretRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Manage the client secret of an organization-level service account by the service account ID.
         * @summary Manage an organization service account\'s client secret.
         * @param {ServiceAccountsApiManageClientSecretForOrganizationServiceAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async manageClientSecretForOrganizationServiceAccount(requestParameters: ServiceAccountsApiManageClientSecretForOrganizationServiceAccountRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccountsManageClientSecretForOrganizationServiceAccountResponse>> {
            const serviceAccountsManageClientSecretForOrganizationServiceAccountRequest: ServiceAccountsManageClientSecretForOrganizationServiceAccountRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.manageClientSecretForOrganizationServiceAccount(requestParameters.orgId, requestParameters.serviceaccountId, requestParameters.version, serviceAccountsManageClientSecretForOrganizationServiceAccountRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update the name of a group\'s service account by its ID.
         * @summary Update a group service account.
         * @param {ServiceAccountsApiUpdateGroupNameByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateGroupNameById(requestParameters: ServiceAccountsApiUpdateGroupNameByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccountsUpdateGroupNameByIdResponse>> {
            const serviceAccountsUpdateGroupNameByIdRequest: ServiceAccountsUpdateGroupNameByIdRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateGroupNameById(requestParameters.groupId, requestParameters.serviceaccountId, requestParameters.version, serviceAccountsUpdateGroupNameByIdRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update the name of an organization-level service account by its ID.
         * @summary Update an organization service account.
         * @param {ServiceAccountsApiUpdateOrganizationServiceAccountNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOrganizationServiceAccountName(requestParameters: ServiceAccountsApiUpdateOrganizationServiceAccountNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccountsUpdateOrganizationServiceAccountNameResponse>> {
            const serviceAccountsUpdateOrganizationServiceAccountNameRequest: ServiceAccountsUpdateOrganizationServiceAccountNameRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateOrganizationServiceAccountName(requestParameters.orgId, requestParameters.serviceaccountId, requestParameters.version, serviceAccountsUpdateOrganizationServiceAccountNameRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ServiceAccountsApi - factory interface
 * @export
 */
export const ServiceAccountsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ServiceAccountsApiFp(configuration)
    return {
        /**
         * Create a service account for an organization. The service account can be used to generate access tokens.
         * @summary Create a service account for an organization.
         * @param {ServiceAccountsApiCreateForOrganizationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createForOrganization(requestParameters: ServiceAccountsApiCreateForOrganizationRequest, options?: AxiosRequestConfig): AxiosPromise<ServiceAccountsCreateForOrganizationResponse> {
            return localVarFp.createForOrganization(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a service account for a group. The service account can be used to generate access tokens. Currently, we only allow group service accounts using default group roles.
         * @summary Create a service account for a group.
         * @param {ServiceAccountsApiCreateGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGroup(requestParameters: ServiceAccountsApiCreateGroupRequest, options?: AxiosRequestConfig): AxiosPromise<ServiceAccountsCreateGroupResponse> {
            return localVarFp.createGroup(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Permanently delete a group-level service account by its ID.
         * @summary Delete a group service account.
         * @param {ServiceAccountsApiDeleteGroupServiceAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroupServiceAccount(requestParameters: ServiceAccountsApiDeleteGroupServiceAccountRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteGroupServiceAccount(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a service account in an organization.
         * @summary Delete a service account in an organization.
         * @param {ServiceAccountsApiDeleteOrgServiceAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrgServiceAccount(requestParameters: ServiceAccountsApiDeleteOrgServiceAccountRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteOrgServiceAccount(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a group-level service account by its ID.
         * @summary Get a group service account.
         * @param {ServiceAccountsApiGetGroupServiceAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupServiceAccount(requestParameters: ServiceAccountsApiGetGroupServiceAccountRequest, options?: AxiosRequestConfig): AxiosPromise<ServiceAccountsGetGroupServiceAccountResponse> {
            return localVarFp.getGroupServiceAccount(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an organization-level service account by its ID.
         * @summary Get an organization service account.
         * @param {ServiceAccountsApiGetOrganizationAccountByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationAccountById(requestParameters: ServiceAccountsApiGetOrganizationAccountByIdRequest, options?: AxiosRequestConfig): AxiosPromise<ServiceAccountsGetOrganizationAccountByIdResponse> {
            return localVarFp.getOrganizationAccountById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all service accounts for a group.
         * @summary Get a list of group service accounts.
         * @param {ServiceAccountsApiListGroupServiceAccountsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGroupServiceAccounts(requestParameters: ServiceAccountsApiListGroupServiceAccountsRequest, options?: AxiosRequestConfig): AxiosPromise<ServiceAccountsListGroupServiceAccountsResponse> {
            return localVarFp.listGroupServiceAccounts(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all service accounts for an organization.
         * @summary Get a list of organization service accounts.
         * @param {ServiceAccountsApiListOrganizationServiceAccountsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrganizationServiceAccounts(requestParameters: ServiceAccountsApiListOrganizationServiceAccountsRequest, options?: AxiosRequestConfig): AxiosPromise<ServiceAccountsListOrganizationServiceAccountsResponse> {
            return localVarFp.listOrganizationServiceAccounts(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Manage the client secret of a group service account by the service account ID.
         * @summary Manage a group service account\'s client secret.
         * @param {ServiceAccountsApiManageClientSecretRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        manageClientSecret(requestParameters: ServiceAccountsApiManageClientSecretRequest, options?: AxiosRequestConfig): AxiosPromise<ServiceAccountsManageClientSecretResponse> {
            return localVarFp.manageClientSecret(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Manage the client secret of an organization-level service account by the service account ID.
         * @summary Manage an organization service account\'s client secret.
         * @param {ServiceAccountsApiManageClientSecretForOrganizationServiceAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        manageClientSecretForOrganizationServiceAccount(requestParameters: ServiceAccountsApiManageClientSecretForOrganizationServiceAccountRequest, options?: AxiosRequestConfig): AxiosPromise<ServiceAccountsManageClientSecretForOrganizationServiceAccountResponse> {
            return localVarFp.manageClientSecretForOrganizationServiceAccount(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the name of a group\'s service account by its ID.
         * @summary Update a group service account.
         * @param {ServiceAccountsApiUpdateGroupNameByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGroupNameById(requestParameters: ServiceAccountsApiUpdateGroupNameByIdRequest, options?: AxiosRequestConfig): AxiosPromise<ServiceAccountsUpdateGroupNameByIdResponse> {
            return localVarFp.updateGroupNameById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the name of an organization-level service account by its ID.
         * @summary Update an organization service account.
         * @param {ServiceAccountsApiUpdateOrganizationServiceAccountNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrganizationServiceAccountName(requestParameters: ServiceAccountsApiUpdateOrganizationServiceAccountNameRequest, options?: AxiosRequestConfig): AxiosPromise<ServiceAccountsUpdateOrganizationServiceAccountNameResponse> {
            return localVarFp.updateOrganizationServiceAccountName(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createForOrganization operation in ServiceAccountsApi.
 * @export
 * @interface ServiceAccountsApiCreateForOrganizationRequest
 */
export type ServiceAccountsApiCreateForOrganizationRequest = {
    
    /**
    * The ID of the Snyk Organization that is creating and will own the service account.
    * @type {string}
    * @memberof ServiceAccountsApiCreateForOrganization
    */
    readonly orgId: string
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof ServiceAccountsApiCreateForOrganization
    */
    readonly version: string
    
} & ServiceAccountsCreateForOrganizationRequest

/**
 * Request parameters for createGroup operation in ServiceAccountsApi.
 * @export
 * @interface ServiceAccountsApiCreateGroupRequest
 */
export type ServiceAccountsApiCreateGroupRequest = {
    
    /**
    * The ID of the Snyk Group that is creating and owns the service account
    * @type {string}
    * @memberof ServiceAccountsApiCreateGroup
    */
    readonly groupId: string
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof ServiceAccountsApiCreateGroup
    */
    readonly version: string
    
} & ServiceAccountsCreateGroupRequest

/**
 * Request parameters for deleteGroupServiceAccount operation in ServiceAccountsApi.
 * @export
 * @interface ServiceAccountsApiDeleteGroupServiceAccountRequest
 */
export type ServiceAccountsApiDeleteGroupServiceAccountRequest = {
    
    /**
    * The ID of the Snyk Group that owns the service account.
    * @type {string}
    * @memberof ServiceAccountsApiDeleteGroupServiceAccount
    */
    readonly groupId: string
    
    /**
    * The ID of the service account.
    * @type {string}
    * @memberof ServiceAccountsApiDeleteGroupServiceAccount
    */
    readonly serviceaccountId: string
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof ServiceAccountsApiDeleteGroupServiceAccount
    */
    readonly version: string
    
}

/**
 * Request parameters for deleteOrgServiceAccount operation in ServiceAccountsApi.
 * @export
 * @interface ServiceAccountsApiDeleteOrgServiceAccountRequest
 */
export type ServiceAccountsApiDeleteOrgServiceAccountRequest = {
    
    /**
    * The ID of org to which the service account belongs.
    * @type {string}
    * @memberof ServiceAccountsApiDeleteOrgServiceAccount
    */
    readonly orgId: string
    
    /**
    * The ID of the service account.
    * @type {string}
    * @memberof ServiceAccountsApiDeleteOrgServiceAccount
    */
    readonly serviceaccountId: string
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof ServiceAccountsApiDeleteOrgServiceAccount
    */
    readonly version: string
    
}

/**
 * Request parameters for getGroupServiceAccount operation in ServiceAccountsApi.
 * @export
 * @interface ServiceAccountsApiGetGroupServiceAccountRequest
 */
export type ServiceAccountsApiGetGroupServiceAccountRequest = {
    
    /**
    * The ID of the Snyk Group that owns the service account.
    * @type {string}
    * @memberof ServiceAccountsApiGetGroupServiceAccount
    */
    readonly groupId: string
    
    /**
    * The ID of the service account.
    * @type {string}
    * @memberof ServiceAccountsApiGetGroupServiceAccount
    */
    readonly serviceaccountId: string
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof ServiceAccountsApiGetGroupServiceAccount
    */
    readonly version: string
    
}

/**
 * Request parameters for getOrganizationAccountById operation in ServiceAccountsApi.
 * @export
 * @interface ServiceAccountsApiGetOrganizationAccountByIdRequest
 */
export type ServiceAccountsApiGetOrganizationAccountByIdRequest = {
    
    /**
    * The ID of the Snyk Organization that owns the service account.
    * @type {string}
    * @memberof ServiceAccountsApiGetOrganizationAccountById
    */
    readonly orgId: string
    
    /**
    * The ID of the service account.
    * @type {string}
    * @memberof ServiceAccountsApiGetOrganizationAccountById
    */
    readonly serviceaccountId: string
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof ServiceAccountsApiGetOrganizationAccountById
    */
    readonly version: string
    
}

/**
 * Request parameters for listGroupServiceAccounts operation in ServiceAccountsApi.
 * @export
 * @interface ServiceAccountsApiListGroupServiceAccountsRequest
 */
export type ServiceAccountsApiListGroupServiceAccountsRequest = {
    
    /**
    * The ID of the Snyk Group that owns the service accounts.
    * @type {string}
    * @memberof ServiceAccountsApiListGroupServiceAccounts
    */
    readonly groupId: string
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof ServiceAccountsApiListGroupServiceAccounts
    */
    readonly version: string
    
    /**
    * Return the page of results immediately after this cursor
    * @type {string}
    * @memberof ServiceAccountsApiListGroupServiceAccounts
    */
    readonly startingAfter?: string
    
    /**
    * Return the page of results immediately before this cursor
    * @type {string}
    * @memberof ServiceAccountsApiListGroupServiceAccounts
    */
    readonly endingBefore?: string
    
    /**
    * Number of results to return per page
    * @type {number}
    * @memberof ServiceAccountsApiListGroupServiceAccounts
    */
    readonly limit?: number
    
}

/**
 * Request parameters for listOrganizationServiceAccounts operation in ServiceAccountsApi.
 * @export
 * @interface ServiceAccountsApiListOrganizationServiceAccountsRequest
 */
export type ServiceAccountsApiListOrganizationServiceAccountsRequest = {
    
    /**
    * The ID of the Snyk Organization that owns the service accounts.
    * @type {string}
    * @memberof ServiceAccountsApiListOrganizationServiceAccounts
    */
    readonly orgId: string
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof ServiceAccountsApiListOrganizationServiceAccounts
    */
    readonly version: string
    
    /**
    * Return the page of results immediately after this cursor
    * @type {string}
    * @memberof ServiceAccountsApiListOrganizationServiceAccounts
    */
    readonly startingAfter?: string
    
    /**
    * Return the page of results immediately before this cursor
    * @type {string}
    * @memberof ServiceAccountsApiListOrganizationServiceAccounts
    */
    readonly endingBefore?: string
    
    /**
    * Number of results to return per page
    * @type {number}
    * @memberof ServiceAccountsApiListOrganizationServiceAccounts
    */
    readonly limit?: number
    
}

/**
 * Request parameters for manageClientSecret operation in ServiceAccountsApi.
 * @export
 * @interface ServiceAccountsApiManageClientSecretRequest
 */
export type ServiceAccountsApiManageClientSecretRequest = {
    
    /**
    * The ID of the Snyk Group that owns the service account.
    * @type {string}
    * @memberof ServiceAccountsApiManageClientSecret
    */
    readonly groupId: string
    
    /**
    * The ID of the service account.
    * @type {string}
    * @memberof ServiceAccountsApiManageClientSecret
    */
    readonly serviceaccountId: string
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof ServiceAccountsApiManageClientSecret
    */
    readonly version: string
    
} & ServiceAccountsManageClientSecretRequest

/**
 * Request parameters for manageClientSecretForOrganizationServiceAccount operation in ServiceAccountsApi.
 * @export
 * @interface ServiceAccountsApiManageClientSecretForOrganizationServiceAccountRequest
 */
export type ServiceAccountsApiManageClientSecretForOrganizationServiceAccountRequest = {
    
    /**
    * The ID of the Snyk Organization that owns the service account.
    * @type {string}
    * @memberof ServiceAccountsApiManageClientSecretForOrganizationServiceAccount
    */
    readonly orgId: string
    
    /**
    * The ID of the service account.
    * @type {string}
    * @memberof ServiceAccountsApiManageClientSecretForOrganizationServiceAccount
    */
    readonly serviceaccountId: string
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof ServiceAccountsApiManageClientSecretForOrganizationServiceAccount
    */
    readonly version: string
    
} & ServiceAccountsManageClientSecretForOrganizationServiceAccountRequest

/**
 * Request parameters for updateGroupNameById operation in ServiceAccountsApi.
 * @export
 * @interface ServiceAccountsApiUpdateGroupNameByIdRequest
 */
export type ServiceAccountsApiUpdateGroupNameByIdRequest = {
    
    /**
    * The ID of the Snyk Group that owns the service account.
    * @type {string}
    * @memberof ServiceAccountsApiUpdateGroupNameById
    */
    readonly groupId: string
    
    /**
    * The ID of the service account.
    * @type {string}
    * @memberof ServiceAccountsApiUpdateGroupNameById
    */
    readonly serviceaccountId: string
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof ServiceAccountsApiUpdateGroupNameById
    */
    readonly version: string
    
} & ServiceAccountsUpdateGroupNameByIdRequest

/**
 * Request parameters for updateOrganizationServiceAccountName operation in ServiceAccountsApi.
 * @export
 * @interface ServiceAccountsApiUpdateOrganizationServiceAccountNameRequest
 */
export type ServiceAccountsApiUpdateOrganizationServiceAccountNameRequest = {
    
    /**
    * The ID of the Snyk Organization that owns the service account.
    * @type {string}
    * @memberof ServiceAccountsApiUpdateOrganizationServiceAccountName
    */
    readonly orgId: string
    
    /**
    * The ID of the service account.
    * @type {string}
    * @memberof ServiceAccountsApiUpdateOrganizationServiceAccountName
    */
    readonly serviceaccountId: string
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof ServiceAccountsApiUpdateOrganizationServiceAccountName
    */
    readonly version: string
    
} & ServiceAccountsUpdateOrganizationServiceAccountNameRequest

/**
 * ServiceAccountsApiGenerated - object-oriented interface
 * @export
 * @class ServiceAccountsApiGenerated
 * @extends {BaseAPI}
 */
export class ServiceAccountsApiGenerated extends BaseAPI {
    /**
     * Create a service account for an organization. The service account can be used to generate access tokens.
     * @summary Create a service account for an organization.
     * @param {ServiceAccountsApiCreateForOrganizationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceAccountsApiGenerated
     */
    public createForOrganization(requestParameters: ServiceAccountsApiCreateForOrganizationRequest, options?: AxiosRequestConfig) {
        return ServiceAccountsApiFp(this.configuration).createForOrganization(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a service account for a group. The service account can be used to generate access tokens. Currently, we only allow group service accounts using default group roles.
     * @summary Create a service account for a group.
     * @param {ServiceAccountsApiCreateGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceAccountsApiGenerated
     */
    public createGroup(requestParameters: ServiceAccountsApiCreateGroupRequest, options?: AxiosRequestConfig) {
        return ServiceAccountsApiFp(this.configuration).createGroup(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Permanently delete a group-level service account by its ID.
     * @summary Delete a group service account.
     * @param {ServiceAccountsApiDeleteGroupServiceAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceAccountsApiGenerated
     */
    public deleteGroupServiceAccount(requestParameters: ServiceAccountsApiDeleteGroupServiceAccountRequest, options?: AxiosRequestConfig) {
        return ServiceAccountsApiFp(this.configuration).deleteGroupServiceAccount(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a service account in an organization.
     * @summary Delete a service account in an organization.
     * @param {ServiceAccountsApiDeleteOrgServiceAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceAccountsApiGenerated
     */
    public deleteOrgServiceAccount(requestParameters: ServiceAccountsApiDeleteOrgServiceAccountRequest, options?: AxiosRequestConfig) {
        return ServiceAccountsApiFp(this.configuration).deleteOrgServiceAccount(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a group-level service account by its ID.
     * @summary Get a group service account.
     * @param {ServiceAccountsApiGetGroupServiceAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceAccountsApiGenerated
     */
    public getGroupServiceAccount(requestParameters: ServiceAccountsApiGetGroupServiceAccountRequest, options?: AxiosRequestConfig) {
        return ServiceAccountsApiFp(this.configuration).getGroupServiceAccount(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get an organization-level service account by its ID.
     * @summary Get an organization service account.
     * @param {ServiceAccountsApiGetOrganizationAccountByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceAccountsApiGenerated
     */
    public getOrganizationAccountById(requestParameters: ServiceAccountsApiGetOrganizationAccountByIdRequest, options?: AxiosRequestConfig) {
        return ServiceAccountsApiFp(this.configuration).getOrganizationAccountById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all service accounts for a group.
     * @summary Get a list of group service accounts.
     * @param {ServiceAccountsApiListGroupServiceAccountsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceAccountsApiGenerated
     */
    public listGroupServiceAccounts(requestParameters: ServiceAccountsApiListGroupServiceAccountsRequest, options?: AxiosRequestConfig) {
        return ServiceAccountsApiFp(this.configuration).listGroupServiceAccounts(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all service accounts for an organization.
     * @summary Get a list of organization service accounts.
     * @param {ServiceAccountsApiListOrganizationServiceAccountsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceAccountsApiGenerated
     */
    public listOrganizationServiceAccounts(requestParameters: ServiceAccountsApiListOrganizationServiceAccountsRequest, options?: AxiosRequestConfig) {
        return ServiceAccountsApiFp(this.configuration).listOrganizationServiceAccounts(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Manage the client secret of a group service account by the service account ID.
     * @summary Manage a group service account\'s client secret.
     * @param {ServiceAccountsApiManageClientSecretRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceAccountsApiGenerated
     */
    public manageClientSecret(requestParameters: ServiceAccountsApiManageClientSecretRequest, options?: AxiosRequestConfig) {
        return ServiceAccountsApiFp(this.configuration).manageClientSecret(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Manage the client secret of an organization-level service account by the service account ID.
     * @summary Manage an organization service account\'s client secret.
     * @param {ServiceAccountsApiManageClientSecretForOrganizationServiceAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceAccountsApiGenerated
     */
    public manageClientSecretForOrganizationServiceAccount(requestParameters: ServiceAccountsApiManageClientSecretForOrganizationServiceAccountRequest, options?: AxiosRequestConfig) {
        return ServiceAccountsApiFp(this.configuration).manageClientSecretForOrganizationServiceAccount(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the name of a group\'s service account by its ID.
     * @summary Update a group service account.
     * @param {ServiceAccountsApiUpdateGroupNameByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceAccountsApiGenerated
     */
    public updateGroupNameById(requestParameters: ServiceAccountsApiUpdateGroupNameByIdRequest, options?: AxiosRequestConfig) {
        return ServiceAccountsApiFp(this.configuration).updateGroupNameById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the name of an organization-level service account by its ID.
     * @summary Update an organization service account.
     * @param {ServiceAccountsApiUpdateOrganizationServiceAccountNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceAccountsApiGenerated
     */
    public updateOrganizationServiceAccountName(requestParameters: ServiceAccountsApiUpdateOrganizationServiceAccountNameRequest, options?: AxiosRequestConfig) {
        return ServiceAccountsApiFp(this.configuration).updateOrganizationServiceAccountName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
