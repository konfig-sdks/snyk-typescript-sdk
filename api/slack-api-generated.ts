/* tslint:disable */
/* eslint-disable */
/*
Snyk API

Missing description placeholder

The version of the OpenAPI document: REST


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorDocument } from '../models';
// @ts-ignore
import { SlackGetChannelNameByIdResponse } from '../models';
// @ts-ignore
import { SlackGetChannelsResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * SlackApi - axios parameter creator
 * @export
 */
export const SlackApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Requires the Snyk Slack App to be set up for this org. It will return the Slack channel name for the provided Slack channel ID.
         * @summary Get Slack Channel name by Slack Channel ID.
         * @param {string} version The requested version of the endpoint to process the request
         * @param {string} orgId Org ID
         * @param {string} channelId Slack Channel ID
         * @param {string} tenantId Tenant ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannelNameById: async (version: string, orgId: string, channelId: string, tenantId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('getChannelNameById', 'version', version)
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getChannelNameById', 'orgId', orgId)
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('getChannelNameById', 'channelId', channelId)
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('getChannelNameById', 'tenantId', tenantId)
            const localVarPath = `/orgs/{org_id}/slack_app/{tenant_id}/channels/{channel_id}`
                .replace(`{${"org_id"}}`, encodeURIComponent(String(orgId !== undefined ? orgId : `-org_id-`)))
                .replace(`{${"channel_id"}}`, encodeURIComponent(String(channelId !== undefined ? channelId : `-channel_id-`)))
                .replace(`{${"tenant_id"}}`, encodeURIComponent(String(tenantId !== undefined ? tenantId : `-tenant_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/orgs/{org_id}/slack_app/{tenant_id}/channels/{channel_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Requires the Snyk Slack App to be set up for this org, will retrieve a list of channels the Snyk Slack App can access. Note that it is currently only possible to page forwards through this collection, no prev links will be generated and the ending_before parameter will not function.
         * @summary Get a list of Slack channels
         * @param {string} version The requested version of the endpoint to process the request
         * @param {string} orgId Org ID
         * @param {string} tenantId Tenant ID
         * @param {string} [startingAfter] Return the page of results immediately after this cursor
         * @param {string} [endingBefore] Return the page of results immediately before this cursor
         * @param {number} [limit] Number of results to return per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannels: async (version: string, orgId: string, tenantId: string, startingAfter?: string, endingBefore?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('getChannels', 'version', version)
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getChannels', 'orgId', orgId)
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('getChannels', 'tenantId', tenantId)
            const localVarPath = `/orgs/{org_id}/slack_app/{tenant_id}/channels`
                .replace(`{${"org_id"}}`, encodeURIComponent(String(orgId !== undefined ? orgId : `-org_id-`)))
                .replace(`{${"tenant_id"}}`, encodeURIComponent(String(tenantId !== undefined ? tenantId : `-tenant_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (startingAfter !== undefined) {
                localVarQueryParameter['starting_after'] = startingAfter;
            }

            if (endingBefore !== undefined) {
                localVarQueryParameter['ending_before'] = endingBefore;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/orgs/{org_id}/slack_app/{tenant_id}/channels',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SlackApi - functional programming interface
 * @export
 */
export const SlackApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SlackApiAxiosParamCreator(configuration)
    return {
        /**
         * Requires the Snyk Slack App to be set up for this org. It will return the Slack channel name for the provided Slack channel ID.
         * @summary Get Slack Channel name by Slack Channel ID.
         * @param {SlackApiGetChannelNameByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChannelNameById(requestParameters: SlackApiGetChannelNameByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SlackGetChannelNameByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getChannelNameById(requestParameters.version, requestParameters.orgId, requestParameters.channelId, requestParameters.tenantId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Requires the Snyk Slack App to be set up for this org, will retrieve a list of channels the Snyk Slack App can access. Note that it is currently only possible to page forwards through this collection, no prev links will be generated and the ending_before parameter will not function.
         * @summary Get a list of Slack channels
         * @param {SlackApiGetChannelsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChannels(requestParameters: SlackApiGetChannelsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SlackGetChannelsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getChannels(requestParameters.version, requestParameters.orgId, requestParameters.tenantId, requestParameters.startingAfter, requestParameters.endingBefore, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SlackApi - factory interface
 * @export
 */
export const SlackApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SlackApiFp(configuration)
    return {
        /**
         * Requires the Snyk Slack App to be set up for this org. It will return the Slack channel name for the provided Slack channel ID.
         * @summary Get Slack Channel name by Slack Channel ID.
         * @param {SlackApiGetChannelNameByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannelNameById(requestParameters: SlackApiGetChannelNameByIdRequest, options?: AxiosRequestConfig): AxiosPromise<SlackGetChannelNameByIdResponse> {
            return localVarFp.getChannelNameById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Requires the Snyk Slack App to be set up for this org, will retrieve a list of channels the Snyk Slack App can access. Note that it is currently only possible to page forwards through this collection, no prev links will be generated and the ending_before parameter will not function.
         * @summary Get a list of Slack channels
         * @param {SlackApiGetChannelsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannels(requestParameters: SlackApiGetChannelsRequest, options?: AxiosRequestConfig): AxiosPromise<SlackGetChannelsResponse> {
            return localVarFp.getChannels(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getChannelNameById operation in SlackApi.
 * @export
 * @interface SlackApiGetChannelNameByIdRequest
 */
export type SlackApiGetChannelNameByIdRequest = {
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof SlackApiGetChannelNameById
    */
    readonly version: string
    
    /**
    * Org ID
    * @type {string}
    * @memberof SlackApiGetChannelNameById
    */
    readonly orgId: string
    
    /**
    * Slack Channel ID
    * @type {string}
    * @memberof SlackApiGetChannelNameById
    */
    readonly channelId: string
    
    /**
    * Tenant ID
    * @type {string}
    * @memberof SlackApiGetChannelNameById
    */
    readonly tenantId: string
    
}

/**
 * Request parameters for getChannels operation in SlackApi.
 * @export
 * @interface SlackApiGetChannelsRequest
 */
export type SlackApiGetChannelsRequest = {
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof SlackApiGetChannels
    */
    readonly version: string
    
    /**
    * Org ID
    * @type {string}
    * @memberof SlackApiGetChannels
    */
    readonly orgId: string
    
    /**
    * Tenant ID
    * @type {string}
    * @memberof SlackApiGetChannels
    */
    readonly tenantId: string
    
    /**
    * Return the page of results immediately after this cursor
    * @type {string}
    * @memberof SlackApiGetChannels
    */
    readonly startingAfter?: string
    
    /**
    * Return the page of results immediately before this cursor
    * @type {string}
    * @memberof SlackApiGetChannels
    */
    readonly endingBefore?: string
    
    /**
    * Number of results to return per page
    * @type {number}
    * @memberof SlackApiGetChannels
    */
    readonly limit?: number
    
}

/**
 * SlackApiGenerated - object-oriented interface
 * @export
 * @class SlackApiGenerated
 * @extends {BaseAPI}
 */
export class SlackApiGenerated extends BaseAPI {
    /**
     * Requires the Snyk Slack App to be set up for this org. It will return the Slack channel name for the provided Slack channel ID.
     * @summary Get Slack Channel name by Slack Channel ID.
     * @param {SlackApiGetChannelNameByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SlackApiGenerated
     */
    public getChannelNameById(requestParameters: SlackApiGetChannelNameByIdRequest, options?: AxiosRequestConfig) {
        return SlackApiFp(this.configuration).getChannelNameById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Requires the Snyk Slack App to be set up for this org, will retrieve a list of channels the Snyk Slack App can access. Note that it is currently only possible to page forwards through this collection, no prev links will be generated and the ending_before parameter will not function.
     * @summary Get a list of Slack channels
     * @param {SlackApiGetChannelsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SlackApiGenerated
     */
    public getChannels(requestParameters: SlackApiGetChannelsRequest, options?: AxiosRequestConfig) {
        return SlackApiFp(this.configuration).getChannels(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
