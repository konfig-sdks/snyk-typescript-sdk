/* tslint:disable */
/* eslint-disable */
/*
Snyk API

Snyk helps software-driven businesses develop fast and stay secure. Continuously find and fix vulnerabilities for npm, Maven, NuGet, RubyGems, PyPI and more.

The version of the OpenAPI document: REST


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CustomBaseImageCollectionResponse } from '../models';
// @ts-ignore
import { CustomBaseImagePatchRequest } from '../models';
// @ts-ignore
import { CustomBaseImagePatchRequestData } from '../models';
// @ts-ignore
import { CustomBaseImagePostRequest } from '../models';
// @ts-ignore
import { CustomBaseImagePostRequestData } from '../models';
// @ts-ignore
import { CustomBaseImageResponse } from '../models';
// @ts-ignore
import { ErrorDocument } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CustomBaseImagesApi - axios parameter creator
 * @export
 */
export const CustomBaseImagesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get a custom base image
         * @summary Get a custom base image
         * @param {string} version The requested version of the endpoint to process the request
         * @param {string} custombaseimageId Unique identifier for custom base image
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (version: string, custombaseimageId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('getById', 'version', version)
            // verify required parameter 'custombaseimageId' is not null or undefined
            assertParamExists('getById', 'custombaseimageId', custombaseimageId)
            const localVarPath = `/custom_base_images/{custombaseimage_id}`
                .replace(`{${"custombaseimage_id"}}`, encodeURIComponent(String(custombaseimageId !== undefined ? custombaseimageId : `-custombaseimage_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/custom_base_images/{custombaseimage_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of custom base images with support for ordering and filtering. Either the org_id or group_id parameters must be set to authorize successfully. If sorting by version, the repository filter is required. 
         * @summary Get a custom base image collection
         * @param {string} version The requested version of the endpoint to process the request
         * @param {string} [startingAfter] Return the page of results immediately after this cursor
         * @param {string} [endingBefore] Return the page of results immediately before this cursor
         * @param {number} [limit] Number of results to return per page
         * @param {string} [projectId] The ID of the container project that the custom base image is based off of.
         * @param {string} [orgId] The organization ID of the custom base image
         * @param {string} [groupId] The group ID of the custom base image
         * @param {string} [repository] The image repository
         * @param {string} [tag] The image tag
         * @param {boolean} [includeInRecommendations] Whether this image should be recommended as a base image upgrade
         * @param {'repository' | 'tag' | 'version'} [sortBy] Which column to sort by.  If sorting by version, the versioning schema is used. 
         * @param {'ASC' | 'DESC'} [sortDirection] Which direction to sort
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (version: string, startingAfter?: string, endingBefore?: string, limit?: number, projectId?: string, orgId?: string, groupId?: string, repository?: string, tag?: string, includeInRecommendations?: boolean, sortBy?: 'repository' | 'tag' | 'version', sortDirection?: 'ASC' | 'DESC', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('list', 'version', version)
            const localVarPath = `/custom_base_images`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }

            if (startingAfter !== undefined) {
                localVarQueryParameter['starting_after'] = startingAfter;
            }

            if (endingBefore !== undefined) {
                localVarQueryParameter['ending_before'] = endingBefore;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (orgId !== undefined) {
                localVarQueryParameter['org_id'] = orgId;
            }

            if (groupId !== undefined) {
                localVarQueryParameter['group_id'] = groupId;
            }

            if (repository !== undefined) {
                localVarQueryParameter['repository'] = repository;
            }

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (includeInRecommendations !== undefined) {
                localVarQueryParameter['include_in_recommendations'] = includeInRecommendations;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (sortDirection !== undefined) {
                localVarQueryParameter['sort_direction'] = sortDirection;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/custom_base_images',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * In order to create a custom base image, you first need to import your base images into Snyk. You can do this through the CLI, UI, or API.  This endpoint marks an image as a custom base image. This means that the image will get added to the pool of images from which Snyk can recommend base image upgrades.  Note, after the first image in a repository gets added, a versioning schema cannot be passed in this endpoint. To update the versioning schema, the PATCH endpoint must be used. 
         * @summary Create a Custom Base Image from an existing container project
         * @param {string} version The requested version of the endpoint to process the request
         * @param {CustomBaseImagePostRequest} [customBaseImagePostRequest] The properties used in the creation of a custom base image
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markImageAsCustomBase: async (version: string, customBaseImagePostRequest?: CustomBaseImagePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('markImageAsCustomBase', 'version', version)
            const localVarPath = `/custom_base_images`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: customBaseImagePostRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/custom_base_images',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(customBaseImagePostRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a custom base image resource. (the related container project is unaffected)
         * @summary Delete a custom base image
         * @param {string} version The requested version of the endpoint to process the request
         * @param {string} custombaseimageId Unique identifier for custom base image
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeCustomBaseImage: async (version: string, custombaseimageId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('removeCustomBaseImage', 'version', version)
            // verify required parameter 'custombaseimageId' is not null or undefined
            assertParamExists('removeCustomBaseImage', 'custombaseimageId', custombaseimageId)
            const localVarPath = `/custom_base_images/{custombaseimage_id}`
                .replace(`{${"custombaseimage_id"}}`, encodeURIComponent(String(custombaseimageId !== undefined ? custombaseimageId : `-custombaseimage_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/custom_base_images/{custombaseimage_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a custom base image\'s attributes
         * @summary Update a custom base image
         * @param {string} version The requested version of the endpoint to process the request
         * @param {string} custombaseimageId Unique identifier for custom base image
         * @param {CustomBaseImagePatchRequest} [customBaseImagePatchRequest] custom base image to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAttributes: async (version: string, custombaseimageId: string, customBaseImagePatchRequest?: CustomBaseImagePatchRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('updateAttributes', 'version', version)
            // verify required parameter 'custombaseimageId' is not null or undefined
            assertParamExists('updateAttributes', 'custombaseimageId', custombaseimageId)
            const localVarPath = `/custom_base_images/{custombaseimage_id}`
                .replace(`{${"custombaseimage_id"}}`, encodeURIComponent(String(custombaseimageId !== undefined ? custombaseimageId : `-custombaseimage_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: customBaseImagePatchRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/custom_base_images/{custombaseimage_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(customBaseImagePatchRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomBaseImagesApi - functional programming interface
 * @export
 */
export const CustomBaseImagesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomBaseImagesApiAxiosParamCreator(configuration)
    return {
        /**
         * Get a custom base image
         * @summary Get a custom base image
         * @param {CustomBaseImagesApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: CustomBaseImagesApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomBaseImageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.version, requestParameters.custombaseimageId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of custom base images with support for ordering and filtering. Either the org_id or group_id parameters must be set to authorize successfully. If sorting by version, the repository filter is required. 
         * @summary Get a custom base image collection
         * @param {CustomBaseImagesApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(requestParameters: CustomBaseImagesApiListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomBaseImageCollectionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(requestParameters.version, requestParameters.startingAfter, requestParameters.endingBefore, requestParameters.limit, requestParameters.projectId, requestParameters.orgId, requestParameters.groupId, requestParameters.repository, requestParameters.tag, requestParameters.includeInRecommendations, requestParameters.sortBy, requestParameters.sortDirection, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * In order to create a custom base image, you first need to import your base images into Snyk. You can do this through the CLI, UI, or API.  This endpoint marks an image as a custom base image. This means that the image will get added to the pool of images from which Snyk can recommend base image upgrades.  Note, after the first image in a repository gets added, a versioning schema cannot be passed in this endpoint. To update the versioning schema, the PATCH endpoint must be used. 
         * @summary Create a Custom Base Image from an existing container project
         * @param {CustomBaseImagesApiMarkImageAsCustomBaseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async markImageAsCustomBase(requestParameters: CustomBaseImagesApiMarkImageAsCustomBaseRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomBaseImageResponse>> {
            const customBaseImagePostRequest: CustomBaseImagePostRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.markImageAsCustomBase(requestParameters.version, customBaseImagePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a custom base image resource. (the related container project is unaffected)
         * @summary Delete a custom base image
         * @param {CustomBaseImagesApiRemoveCustomBaseImageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeCustomBaseImage(requestParameters: CustomBaseImagesApiRemoveCustomBaseImageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeCustomBaseImage(requestParameters.version, requestParameters.custombaseimageId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates a custom base image\'s attributes
         * @summary Update a custom base image
         * @param {CustomBaseImagesApiUpdateAttributesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAttributes(requestParameters: CustomBaseImagesApiUpdateAttributesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomBaseImageResponse>> {
            const customBaseImagePatchRequest: CustomBaseImagePatchRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAttributes(requestParameters.version, requestParameters.custombaseimageId, customBaseImagePatchRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustomBaseImagesApi - factory interface
 * @export
 */
export const CustomBaseImagesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomBaseImagesApiFp(configuration)
    return {
        /**
         * Get a custom base image
         * @summary Get a custom base image
         * @param {CustomBaseImagesApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: CustomBaseImagesApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<CustomBaseImageResponse> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of custom base images with support for ordering and filtering. Either the org_id or group_id parameters must be set to authorize successfully. If sorting by version, the repository filter is required. 
         * @summary Get a custom base image collection
         * @param {CustomBaseImagesApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(requestParameters: CustomBaseImagesApiListRequest, options?: AxiosRequestConfig): AxiosPromise<CustomBaseImageCollectionResponse> {
            return localVarFp.list(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * In order to create a custom base image, you first need to import your base images into Snyk. You can do this through the CLI, UI, or API.  This endpoint marks an image as a custom base image. This means that the image will get added to the pool of images from which Snyk can recommend base image upgrades.  Note, after the first image in a repository gets added, a versioning schema cannot be passed in this endpoint. To update the versioning schema, the PATCH endpoint must be used. 
         * @summary Create a Custom Base Image from an existing container project
         * @param {CustomBaseImagesApiMarkImageAsCustomBaseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markImageAsCustomBase(requestParameters: CustomBaseImagesApiMarkImageAsCustomBaseRequest, options?: AxiosRequestConfig): AxiosPromise<CustomBaseImageResponse> {
            return localVarFp.markImageAsCustomBase(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a custom base image resource. (the related container project is unaffected)
         * @summary Delete a custom base image
         * @param {CustomBaseImagesApiRemoveCustomBaseImageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeCustomBaseImage(requestParameters: CustomBaseImagesApiRemoveCustomBaseImageRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeCustomBaseImage(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a custom base image\'s attributes
         * @summary Update a custom base image
         * @param {CustomBaseImagesApiUpdateAttributesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAttributes(requestParameters: CustomBaseImagesApiUpdateAttributesRequest, options?: AxiosRequestConfig): AxiosPromise<CustomBaseImageResponse> {
            return localVarFp.updateAttributes(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getById operation in CustomBaseImagesApi.
 * @export
 * @interface CustomBaseImagesApiGetByIdRequest
 */
export type CustomBaseImagesApiGetByIdRequest = {
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof CustomBaseImagesApiGetById
    */
    readonly version: string
    
    /**
    * Unique identifier for custom base image
    * @type {string}
    * @memberof CustomBaseImagesApiGetById
    */
    readonly custombaseimageId: string
    
}

/**
 * Request parameters for list operation in CustomBaseImagesApi.
 * @export
 * @interface CustomBaseImagesApiListRequest
 */
export type CustomBaseImagesApiListRequest = {
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof CustomBaseImagesApiList
    */
    readonly version: string
    
    /**
    * Return the page of results immediately after this cursor
    * @type {string}
    * @memberof CustomBaseImagesApiList
    */
    readonly startingAfter?: string
    
    /**
    * Return the page of results immediately before this cursor
    * @type {string}
    * @memberof CustomBaseImagesApiList
    */
    readonly endingBefore?: string
    
    /**
    * Number of results to return per page
    * @type {number}
    * @memberof CustomBaseImagesApiList
    */
    readonly limit?: number
    
    /**
    * The ID of the container project that the custom base image is based off of.
    * @type {string}
    * @memberof CustomBaseImagesApiList
    */
    readonly projectId?: string
    
    /**
    * The organization ID of the custom base image
    * @type {string}
    * @memberof CustomBaseImagesApiList
    */
    readonly orgId?: string
    
    /**
    * The group ID of the custom base image
    * @type {string}
    * @memberof CustomBaseImagesApiList
    */
    readonly groupId?: string
    
    /**
    * The image repository
    * @type {string}
    * @memberof CustomBaseImagesApiList
    */
    readonly repository?: string
    
    /**
    * The image tag
    * @type {string}
    * @memberof CustomBaseImagesApiList
    */
    readonly tag?: string
    
    /**
    * Whether this image should be recommended as a base image upgrade
    * @type {boolean}
    * @memberof CustomBaseImagesApiList
    */
    readonly includeInRecommendations?: boolean
    
    /**
    * Which column to sort by.  If sorting by version, the versioning schema is used. 
    * @type {'repository' | 'tag' | 'version'}
    * @memberof CustomBaseImagesApiList
    */
    readonly sortBy?: 'repository' | 'tag' | 'version'
    
    /**
    * Which direction to sort
    * @type {'ASC' | 'DESC'}
    * @memberof CustomBaseImagesApiList
    */
    readonly sortDirection?: 'ASC' | 'DESC'
    
}

/**
 * Request parameters for markImageAsCustomBase operation in CustomBaseImagesApi.
 * @export
 * @interface CustomBaseImagesApiMarkImageAsCustomBaseRequest
 */
export type CustomBaseImagesApiMarkImageAsCustomBaseRequest = {
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof CustomBaseImagesApiMarkImageAsCustomBase
    */
    readonly version: string
    
} & CustomBaseImagePostRequest

/**
 * Request parameters for removeCustomBaseImage operation in CustomBaseImagesApi.
 * @export
 * @interface CustomBaseImagesApiRemoveCustomBaseImageRequest
 */
export type CustomBaseImagesApiRemoveCustomBaseImageRequest = {
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof CustomBaseImagesApiRemoveCustomBaseImage
    */
    readonly version: string
    
    /**
    * Unique identifier for custom base image
    * @type {string}
    * @memberof CustomBaseImagesApiRemoveCustomBaseImage
    */
    readonly custombaseimageId: string
    
}

/**
 * Request parameters for updateAttributes operation in CustomBaseImagesApi.
 * @export
 * @interface CustomBaseImagesApiUpdateAttributesRequest
 */
export type CustomBaseImagesApiUpdateAttributesRequest = {
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof CustomBaseImagesApiUpdateAttributes
    */
    readonly version: string
    
    /**
    * Unique identifier for custom base image
    * @type {string}
    * @memberof CustomBaseImagesApiUpdateAttributes
    */
    readonly custombaseimageId: string
    
} & CustomBaseImagePatchRequest

/**
 * CustomBaseImagesApiGenerated - object-oriented interface
 * @export
 * @class CustomBaseImagesApiGenerated
 * @extends {BaseAPI}
 */
export class CustomBaseImagesApiGenerated extends BaseAPI {
    /**
     * Get a custom base image
     * @summary Get a custom base image
     * @param {CustomBaseImagesApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomBaseImagesApiGenerated
     */
    public getById(requestParameters: CustomBaseImagesApiGetByIdRequest, options?: AxiosRequestConfig) {
        return CustomBaseImagesApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of custom base images with support for ordering and filtering. Either the org_id or group_id parameters must be set to authorize successfully. If sorting by version, the repository filter is required. 
     * @summary Get a custom base image collection
     * @param {CustomBaseImagesApiListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomBaseImagesApiGenerated
     */
    public list(requestParameters: CustomBaseImagesApiListRequest, options?: AxiosRequestConfig) {
        return CustomBaseImagesApiFp(this.configuration).list(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * In order to create a custom base image, you first need to import your base images into Snyk. You can do this through the CLI, UI, or API.  This endpoint marks an image as a custom base image. This means that the image will get added to the pool of images from which Snyk can recommend base image upgrades.  Note, after the first image in a repository gets added, a versioning schema cannot be passed in this endpoint. To update the versioning schema, the PATCH endpoint must be used. 
     * @summary Create a Custom Base Image from an existing container project
     * @param {CustomBaseImagesApiMarkImageAsCustomBaseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomBaseImagesApiGenerated
     */
    public markImageAsCustomBase(requestParameters: CustomBaseImagesApiMarkImageAsCustomBaseRequest, options?: AxiosRequestConfig) {
        return CustomBaseImagesApiFp(this.configuration).markImageAsCustomBase(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a custom base image resource. (the related container project is unaffected)
     * @summary Delete a custom base image
     * @param {CustomBaseImagesApiRemoveCustomBaseImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomBaseImagesApiGenerated
     */
    public removeCustomBaseImage(requestParameters: CustomBaseImagesApiRemoveCustomBaseImageRequest, options?: AxiosRequestConfig) {
        return CustomBaseImagesApiFp(this.configuration).removeCustomBaseImage(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a custom base image\'s attributes
     * @summary Update a custom base image
     * @param {CustomBaseImagesApiUpdateAttributesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomBaseImagesApiGenerated
     */
    public updateAttributes(requestParameters: CustomBaseImagesApiUpdateAttributesRequest, options?: AxiosRequestConfig) {
        return CustomBaseImagesApiFp(this.configuration).updateAttributes(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
