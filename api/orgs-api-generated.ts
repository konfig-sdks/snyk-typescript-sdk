/* tslint:disable */
/* eslint-disable */
/*
Snyk API

Snyk helps software-driven businesses develop fast and stay secure. Continuously find and fix vulnerabilities for npm, Maven, NuGet, RubyGems, PyPI and more.

The version of the OpenAPI document: REST


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorDocument } from '../models';
// @ts-ignore
import { OrgsGetDetailsResponse } from '../models';
// @ts-ignore
import { OrgsListAccessibleOrganizationsResponse } from '../models';
// @ts-ignore
import { OrgsListGroupOrgsResponse } from '../models';
// @ts-ignore
import { OrgsUpdateDetailsRequest } from '../models';
// @ts-ignore
import { OrgsUpdateDetailsRequestData } from '../models';
// @ts-ignore
import { OrgsUpdateDetailsResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * OrgsApi - axios parameter creator
 * @export
 */
export const OrgsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get the full details of an organization.
         * @summary Get organization
         * @param {string} version The requested version of the endpoint to process the request
         * @param {string} orgId Unique identifier for org
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetails: async (version: string, orgId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('getDetails', 'version', version)
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getDetails', 'orgId', orgId)
            const localVarPath = `/orgs/{org_id}`
                .replace(`{${"org_id"}}`, encodeURIComponent(String(orgId !== undefined ? orgId : `-org_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/orgs/{org_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a paginated list of organizations you have access to.
         * @summary List accessible organizations
         * @param {string} version The requested version of the endpoint to process the request
         * @param {string} [startingAfter] Return the page of results immediately after this cursor
         * @param {string} [endingBefore] Return the page of results immediately before this cursor
         * @param {number} [limit] Number of results to return per page
         * @param {string} [groupId] If set, only return organizations within the specified group
         * @param {boolean} [isPersonal] If true, only return organizations that are not part of a group.
         * @param {string} [slug] Only return orgs whose slug exactly matches this value.
         * @param {string} [name] Only return orgs whose name contains this value.
         * @param {Array<'member_role'>} [expand] Expand the specified related resources in the response to include their attributes.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAccessibleOrganizations: async (version: string, startingAfter?: string, endingBefore?: string, limit?: number, groupId?: string, isPersonal?: boolean, slug?: string, name?: string, expand?: Array<'member_role'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('listAccessibleOrganizations', 'version', version)
            const localVarPath = `/orgs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }

            if (startingAfter !== undefined) {
                localVarQueryParameter['starting_after'] = startingAfter;
            }

            if (endingBefore !== undefined) {
                localVarQueryParameter['ending_before'] = endingBefore;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (groupId !== undefined) {
                localVarQueryParameter['group_id'] = groupId;
            }

            if (isPersonal !== undefined) {
                localVarQueryParameter['is_personal'] = isPersonal;
            }

            if (slug !== undefined) {
                localVarQueryParameter['slug'] = slug;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (expand) {
                localVarQueryParameter['expand'] = expand;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/orgs',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a paginated list of all the organizations belonging to the group. By default, this endpoint returns the organizations in alphabetical order of their name.
         * @summary List all organizations in group
         * @param {string} version The requested version of the endpoint to process the request
         * @param {string} groupId Unique identifier for group
         * @param {string} [startingAfter] Return the page of results immediately after this cursor
         * @param {string} [endingBefore] Return the page of results immediately before this cursor
         * @param {number} [limit] Number of results to return per page
         * @param {string} [name] Only return organizations whose name contains this value. Case insensitive.
         * @param {string} [slug] Only return organizations whose slug exactly matches this value. Case sensitive.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGroupOrgs: async (version: string, groupId: string, startingAfter?: string, endingBefore?: string, limit?: number, name?: string, slug?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('listGroupOrgs', 'version', version)
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('listGroupOrgs', 'groupId', groupId)
            const localVarPath = `/groups/{group_id}/orgs`
                .replace(`{${"group_id"}}`, encodeURIComponent(String(groupId !== undefined ? groupId : `-group_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }

            if (startingAfter !== undefined) {
                localVarQueryParameter['starting_after'] = startingAfter;
            }

            if (endingBefore !== undefined) {
                localVarQueryParameter['ending_before'] = endingBefore;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (slug !== undefined) {
                localVarQueryParameter['slug'] = slug;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/groups/{group_id}/orgs',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the details of an organization
         * @summary Update organization
         * @param {string} version The requested version of the endpoint to process the request
         * @param {string} orgId Unique identifier for org
         * @param {OrgsUpdateDetailsRequest} [orgsUpdateDetailsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDetails: async (version: string, orgId: string, orgsUpdateDetailsRequest?: OrgsUpdateDetailsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('updateDetails', 'version', version)
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('updateDetails', 'orgId', orgId)
            const localVarPath = `/orgs/{org_id}`
                .replace(`{${"org_id"}}`, encodeURIComponent(String(orgId !== undefined ? orgId : `-org_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: orgsUpdateDetailsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/orgs/{org_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(orgsUpdateDetailsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrgsApi - functional programming interface
 * @export
 */
export const OrgsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrgsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get the full details of an organization.
         * @summary Get organization
         * @param {OrgsApiGetDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDetails(requestParameters: OrgsApiGetDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgsGetDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDetails(requestParameters.version, requestParameters.orgId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a paginated list of organizations you have access to.
         * @summary List accessible organizations
         * @param {OrgsApiListAccessibleOrganizationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAccessibleOrganizations(requestParameters: OrgsApiListAccessibleOrganizationsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgsListAccessibleOrganizationsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAccessibleOrganizations(requestParameters.version, requestParameters.startingAfter, requestParameters.endingBefore, requestParameters.limit, requestParameters.groupId, requestParameters.isPersonal, requestParameters.slug, requestParameters.name, requestParameters.expand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a paginated list of all the organizations belonging to the group. By default, this endpoint returns the organizations in alphabetical order of their name.
         * @summary List all organizations in group
         * @param {OrgsApiListGroupOrgsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listGroupOrgs(requestParameters: OrgsApiListGroupOrgsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgsListGroupOrgsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listGroupOrgs(requestParameters.version, requestParameters.groupId, requestParameters.startingAfter, requestParameters.endingBefore, requestParameters.limit, requestParameters.name, requestParameters.slug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update the details of an organization
         * @summary Update organization
         * @param {OrgsApiUpdateDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDetails(requestParameters: OrgsApiUpdateDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgsUpdateDetailsResponse>> {
            const orgsUpdateDetailsRequest: OrgsUpdateDetailsRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDetails(requestParameters.version, requestParameters.orgId, orgsUpdateDetailsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrgsApi - factory interface
 * @export
 */
export const OrgsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrgsApiFp(configuration)
    return {
        /**
         * Get the full details of an organization.
         * @summary Get organization
         * @param {OrgsApiGetDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetails(requestParameters: OrgsApiGetDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<OrgsGetDetailsResponse> {
            return localVarFp.getDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a paginated list of organizations you have access to.
         * @summary List accessible organizations
         * @param {OrgsApiListAccessibleOrganizationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAccessibleOrganizations(requestParameters: OrgsApiListAccessibleOrganizationsRequest, options?: AxiosRequestConfig): AxiosPromise<OrgsListAccessibleOrganizationsResponse> {
            return localVarFp.listAccessibleOrganizations(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a paginated list of all the organizations belonging to the group. By default, this endpoint returns the organizations in alphabetical order of their name.
         * @summary List all organizations in group
         * @param {OrgsApiListGroupOrgsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGroupOrgs(requestParameters: OrgsApiListGroupOrgsRequest, options?: AxiosRequestConfig): AxiosPromise<OrgsListGroupOrgsResponse> {
            return localVarFp.listGroupOrgs(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the details of an organization
         * @summary Update organization
         * @param {OrgsApiUpdateDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDetails(requestParameters: OrgsApiUpdateDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<OrgsUpdateDetailsResponse> {
            return localVarFp.updateDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getDetails operation in OrgsApi.
 * @export
 * @interface OrgsApiGetDetailsRequest
 */
export type OrgsApiGetDetailsRequest = {
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof OrgsApiGetDetails
    */
    readonly version: string
    
    /**
    * Unique identifier for org
    * @type {string}
    * @memberof OrgsApiGetDetails
    */
    readonly orgId: string
    
}

/**
 * Request parameters for listAccessibleOrganizations operation in OrgsApi.
 * @export
 * @interface OrgsApiListAccessibleOrganizationsRequest
 */
export type OrgsApiListAccessibleOrganizationsRequest = {
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof OrgsApiListAccessibleOrganizations
    */
    readonly version: string
    
    /**
    * Return the page of results immediately after this cursor
    * @type {string}
    * @memberof OrgsApiListAccessibleOrganizations
    */
    readonly startingAfter?: string
    
    /**
    * Return the page of results immediately before this cursor
    * @type {string}
    * @memberof OrgsApiListAccessibleOrganizations
    */
    readonly endingBefore?: string
    
    /**
    * Number of results to return per page
    * @type {number}
    * @memberof OrgsApiListAccessibleOrganizations
    */
    readonly limit?: number
    
    /**
    * If set, only return organizations within the specified group
    * @type {string}
    * @memberof OrgsApiListAccessibleOrganizations
    */
    readonly groupId?: string
    
    /**
    * If true, only return organizations that are not part of a group.
    * @type {boolean}
    * @memberof OrgsApiListAccessibleOrganizations
    */
    readonly isPersonal?: boolean
    
    /**
    * Only return orgs whose slug exactly matches this value.
    * @type {string}
    * @memberof OrgsApiListAccessibleOrganizations
    */
    readonly slug?: string
    
    /**
    * Only return orgs whose name contains this value.
    * @type {string}
    * @memberof OrgsApiListAccessibleOrganizations
    */
    readonly name?: string
    
    /**
    * Expand the specified related resources in the response to include their attributes.
    * @type {Array<'member_role'>}
    * @memberof OrgsApiListAccessibleOrganizations
    */
    readonly expand?: Array<'member_role'>
    
}

/**
 * Request parameters for listGroupOrgs operation in OrgsApi.
 * @export
 * @interface OrgsApiListGroupOrgsRequest
 */
export type OrgsApiListGroupOrgsRequest = {
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof OrgsApiListGroupOrgs
    */
    readonly version: string
    
    /**
    * Unique identifier for group
    * @type {string}
    * @memberof OrgsApiListGroupOrgs
    */
    readonly groupId: string
    
    /**
    * Return the page of results immediately after this cursor
    * @type {string}
    * @memberof OrgsApiListGroupOrgs
    */
    readonly startingAfter?: string
    
    /**
    * Return the page of results immediately before this cursor
    * @type {string}
    * @memberof OrgsApiListGroupOrgs
    */
    readonly endingBefore?: string
    
    /**
    * Number of results to return per page
    * @type {number}
    * @memberof OrgsApiListGroupOrgs
    */
    readonly limit?: number
    
    /**
    * Only return organizations whose name contains this value. Case insensitive.
    * @type {string}
    * @memberof OrgsApiListGroupOrgs
    */
    readonly name?: string
    
    /**
    * Only return organizations whose slug exactly matches this value. Case sensitive.
    * @type {string}
    * @memberof OrgsApiListGroupOrgs
    */
    readonly slug?: string
    
}

/**
 * Request parameters for updateDetails operation in OrgsApi.
 * @export
 * @interface OrgsApiUpdateDetailsRequest
 */
export type OrgsApiUpdateDetailsRequest = {
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof OrgsApiUpdateDetails
    */
    readonly version: string
    
    /**
    * Unique identifier for org
    * @type {string}
    * @memberof OrgsApiUpdateDetails
    */
    readonly orgId: string
    
} & OrgsUpdateDetailsRequest

/**
 * OrgsApiGenerated - object-oriented interface
 * @export
 * @class OrgsApiGenerated
 * @extends {BaseAPI}
 */
export class OrgsApiGenerated extends BaseAPI {
    /**
     * Get the full details of an organization.
     * @summary Get organization
     * @param {OrgsApiGetDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgsApiGenerated
     */
    public getDetails(requestParameters: OrgsApiGetDetailsRequest, options?: AxiosRequestConfig) {
        return OrgsApiFp(this.configuration).getDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a paginated list of organizations you have access to.
     * @summary List accessible organizations
     * @param {OrgsApiListAccessibleOrganizationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgsApiGenerated
     */
    public listAccessibleOrganizations(requestParameters: OrgsApiListAccessibleOrganizationsRequest, options?: AxiosRequestConfig) {
        return OrgsApiFp(this.configuration).listAccessibleOrganizations(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a paginated list of all the organizations belonging to the group. By default, this endpoint returns the organizations in alphabetical order of their name.
     * @summary List all organizations in group
     * @param {OrgsApiListGroupOrgsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgsApiGenerated
     */
    public listGroupOrgs(requestParameters: OrgsApiListGroupOrgsRequest, options?: AxiosRequestConfig) {
        return OrgsApiFp(this.configuration).listGroupOrgs(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the details of an organization
     * @summary Update organization
     * @param {OrgsApiUpdateDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgsApiGenerated
     */
    public updateDetails(requestParameters: OrgsApiUpdateDetailsRequest, options?: AxiosRequestConfig) {
        return OrgsApiFp(this.configuration).updateDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
