/* tslint:disable */
/* eslint-disable */
/*
Snyk API

Missing description placeholder

The version of the OpenAPI document: REST


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorDocument } from '../models';
// @ts-ignore
import { SastSettingsGetForOrgResponse } from '../models';
// @ts-ignore
import { SastSettingsToggleSnykCodeSettingsRequest } from '../models';
// @ts-ignore
import { SastSettingsToggleSnykCodeSettingsRequestData } from '../models';
// @ts-ignore
import { SastSettingsToggleSnykCodeSettingsResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * SastSettingsApi - axios parameter creator
 * @export
 */
export const SastSettingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves the SAST settings for an org
         * @summary Retrieves the SAST settings for an org
         * @param {string} version The requested version of the endpoint to process the request
         * @param {string} orgId The id of the org for which we want to retrieve the SAST settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getForOrg: async (version: string, orgId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('getForOrg', 'version', version)
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getForOrg', 'orgId', orgId)
            const localVarPath = `/orgs/{org_id}/settings/sast`
                .replace(`{${"org_id"}}`, encodeURIComponent(String(orgId !== undefined ? orgId : `-org_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/orgs/{org_id}/settings/sast',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Enable/Disable the Snyk Code settings for an org
         * @summary Enable/Disable the Snyk Code settings for an org
         * @param {string} version The requested version of the endpoint to process the request
         * @param {string} orgId The id of the org for which we want to update the Snyk Code setting
         * @param {SastSettingsToggleSnykCodeSettingsRequest} sastSettingsToggleSnykCodeSettingsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toggleSnykCodeSettings: async (version: string, orgId: string, sastSettingsToggleSnykCodeSettingsRequest: SastSettingsToggleSnykCodeSettingsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('toggleSnykCodeSettings', 'version', version)
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('toggleSnykCodeSettings', 'orgId', orgId)
            // verify required parameter 'sastSettingsToggleSnykCodeSettingsRequest' is not null or undefined
            assertParamExists('toggleSnykCodeSettings', 'sastSettingsToggleSnykCodeSettingsRequest', sastSettingsToggleSnykCodeSettingsRequest)
            const localVarPath = `/orgs/{org_id}/settings/sast`
                .replace(`{${"org_id"}}`, encodeURIComponent(String(orgId !== undefined ? orgId : `-org_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: sastSettingsToggleSnykCodeSettingsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/orgs/{org_id}/settings/sast',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(sastSettingsToggleSnykCodeSettingsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SastSettingsApi - functional programming interface
 * @export
 */
export const SastSettingsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SastSettingsApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves the SAST settings for an org
         * @summary Retrieves the SAST settings for an org
         * @param {SastSettingsApiGetForOrgRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getForOrg(requestParameters: SastSettingsApiGetForOrgRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SastSettingsGetForOrgResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getForOrg(requestParameters.version, requestParameters.orgId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Enable/Disable the Snyk Code settings for an org
         * @summary Enable/Disable the Snyk Code settings for an org
         * @param {SastSettingsApiToggleSnykCodeSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async toggleSnykCodeSettings(requestParameters: SastSettingsApiToggleSnykCodeSettingsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SastSettingsToggleSnykCodeSettingsResponse>> {
            const sastSettingsToggleSnykCodeSettingsRequest: SastSettingsToggleSnykCodeSettingsRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.toggleSnykCodeSettings(requestParameters.version, requestParameters.orgId, sastSettingsToggleSnykCodeSettingsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SastSettingsApi - factory interface
 * @export
 */
export const SastSettingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SastSettingsApiFp(configuration)
    return {
        /**
         * Retrieves the SAST settings for an org
         * @summary Retrieves the SAST settings for an org
         * @param {SastSettingsApiGetForOrgRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getForOrg(requestParameters: SastSettingsApiGetForOrgRequest, options?: AxiosRequestConfig): AxiosPromise<SastSettingsGetForOrgResponse> {
            return localVarFp.getForOrg(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Enable/Disable the Snyk Code settings for an org
         * @summary Enable/Disable the Snyk Code settings for an org
         * @param {SastSettingsApiToggleSnykCodeSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toggleSnykCodeSettings(requestParameters: SastSettingsApiToggleSnykCodeSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<SastSettingsToggleSnykCodeSettingsResponse> {
            return localVarFp.toggleSnykCodeSettings(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getForOrg operation in SastSettingsApi.
 * @export
 * @interface SastSettingsApiGetForOrgRequest
 */
export type SastSettingsApiGetForOrgRequest = {
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof SastSettingsApiGetForOrg
    */
    readonly version: string
    
    /**
    * The id of the org for which we want to retrieve the SAST settings
    * @type {string}
    * @memberof SastSettingsApiGetForOrg
    */
    readonly orgId: string
    
}

/**
 * Request parameters for toggleSnykCodeSettings operation in SastSettingsApi.
 * @export
 * @interface SastSettingsApiToggleSnykCodeSettingsRequest
 */
export type SastSettingsApiToggleSnykCodeSettingsRequest = {
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof SastSettingsApiToggleSnykCodeSettings
    */
    readonly version: string
    
    /**
    * The id of the org for which we want to update the Snyk Code setting
    * @type {string}
    * @memberof SastSettingsApiToggleSnykCodeSettings
    */
    readonly orgId: string
    
} & SastSettingsToggleSnykCodeSettingsRequest

/**
 * SastSettingsApiGenerated - object-oriented interface
 * @export
 * @class SastSettingsApiGenerated
 * @extends {BaseAPI}
 */
export class SastSettingsApiGenerated extends BaseAPI {
    /**
     * Retrieves the SAST settings for an org
     * @summary Retrieves the SAST settings for an org
     * @param {SastSettingsApiGetForOrgRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SastSettingsApiGenerated
     */
    public getForOrg(requestParameters: SastSettingsApiGetForOrgRequest, options?: AxiosRequestConfig) {
        return SastSettingsApiFp(this.configuration).getForOrg(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Enable/Disable the Snyk Code settings for an org
     * @summary Enable/Disable the Snyk Code settings for an org
     * @param {SastSettingsApiToggleSnykCodeSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SastSettingsApiGenerated
     */
    public toggleSnykCodeSettings(requestParameters: SastSettingsApiToggleSnykCodeSettingsRequest, options?: AxiosRequestConfig) {
        return SastSettingsApiFp(this.configuration).toggleSnykCodeSettings(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
