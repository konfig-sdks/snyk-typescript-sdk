/* tslint:disable */
/* eslint-disable */
/*
Snyk API

Missing description placeholder

The version of the OpenAPI document: REST


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorDocument } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * OpenAPIApi - axios parameter creator
 * @export
 */
export const OpenAPIApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get OpenAPI specification effective at version.
         * @param {string} version The requested version of the API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEffectiveVersion: async (version: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('getEffectiveVersion', 'version', version)
            const localVarPath = `/openapi/{version}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version !== undefined ? version : `-version-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/openapi/{version}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List available versions of OpenAPI specification
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAvailableVersions: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/openapi`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/openapi',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OpenAPIApi - functional programming interface
 * @export
 */
export const OpenAPIApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OpenAPIApiAxiosParamCreator(configuration)
    return {
        /**
         * Get OpenAPI specification effective at version.
         * @param {OpenAPIApiGetEffectiveVersionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEffectiveVersion(requestParameters: OpenAPIApiGetEffectiveVersionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEffectiveVersion(requestParameters.version, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List available versions of OpenAPI specification
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAvailableVersions(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAvailableVersions(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OpenAPIApi - factory interface
 * @export
 */
export const OpenAPIApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OpenAPIApiFp(configuration)
    return {
        /**
         * Get OpenAPI specification effective at version.
         * @param {OpenAPIApiGetEffectiveVersionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEffectiveVersion(requestParameters: OpenAPIApiGetEffectiveVersionRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getEffectiveVersion(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List available versions of OpenAPI specification
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAvailableVersions(options?: AxiosRequestConfig): AxiosPromise<Array<string>> {
            return localVarFp.listAvailableVersions(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getEffectiveVersion operation in OpenAPIApi.
 * @export
 * @interface OpenAPIApiGetEffectiveVersionRequest
 */
export type OpenAPIApiGetEffectiveVersionRequest = {
    
    /**
    * The requested version of the API
    * @type {string}
    * @memberof OpenAPIApiGetEffectiveVersion
    */
    readonly version: string
    
}

/**
 * OpenAPIApiGenerated - object-oriented interface
 * @export
 * @class OpenAPIApiGenerated
 * @extends {BaseAPI}
 */
export class OpenAPIApiGenerated extends BaseAPI {
    /**
     * Get OpenAPI specification effective at version.
     * @param {OpenAPIApiGetEffectiveVersionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenAPIApiGenerated
     */
    public getEffectiveVersion(requestParameters: OpenAPIApiGetEffectiveVersionRequest, options?: AxiosRequestConfig) {
        return OpenAPIApiFp(this.configuration).getEffectiveVersion(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List available versions of OpenAPI specification
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenAPIApiGenerated
     */
    public listAvailableVersions(options?: AxiosRequestConfig) {
        return OpenAPIApiFp(this.configuration).listAvailableVersions(options).then((request) => request(this.axios, this.basePath));
    }
}
