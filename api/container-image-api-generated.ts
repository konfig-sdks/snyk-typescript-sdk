/* tslint:disable */
/* eslint-disable */
/*
Snyk API

Missing description placeholder

The version of the OpenAPI document: REST


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ContainerImageGetInstanceResponse } from '../models';
// @ts-ignore
import { ContainerImageListImageTargetRefsResponse } from '../models';
// @ts-ignore
import { ContainerImageListInstancesOfContainerImageResponse } from '../models';
// @ts-ignore
import { ErrorDocument } from '../models';
// @ts-ignore
import { Platform } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ContainerImageApi - axios parameter creator
 * @export
 */
export const ContainerImageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get instance of container image
         * @summary Get instance of container image
         * @param {string} version The requested version of the endpoint to process the request
         * @param {string} orgId Org ID
         * @param {string} imageId Image ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstance: async (version: string, orgId: string, imageId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('getInstance', 'version', version)
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getInstance', 'orgId', orgId)
            // verify required parameter 'imageId' is not null or undefined
            assertParamExists('getInstance', 'imageId', imageId)
            const localVarPath = `/orgs/{org_id}/container_images/{image_id}`
                .replace(`{${"org_id"}}`, encodeURIComponent(String(orgId !== undefined ? orgId : `-org_id-`)))
                .replace(`{${"image_id"}}`, encodeURIComponent(String(imageId !== undefined ? imageId : `-image_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/orgs/{org_id}/container_images/{image_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List instances of image target references for a container image
         * @summary List instances of image target references for a container image
         * @param {string} orgId Org ID
         * @param {string} imageId Image ID
         * @param {string} version The requested version of the endpoint to process the request
         * @param {number} [limit] Number of results to return per page
         * @param {string} [startingAfter] Return the page of results immediately after this cursor
         * @param {string} [endingBefore] Return the page of results immediately before this cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listImageTargetRefs: async (orgId: string, imageId: string, version: string, limit?: number, startingAfter?: string, endingBefore?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('listImageTargetRefs', 'orgId', orgId)
            // verify required parameter 'imageId' is not null or undefined
            assertParamExists('listImageTargetRefs', 'imageId', imageId)
            // verify required parameter 'version' is not null or undefined
            assertParamExists('listImageTargetRefs', 'version', version)
            const localVarPath = `/orgs/{org_id}/container_images/{image_id}/relationships/image_target_refs`
                .replace(`{${"org_id"}}`, encodeURIComponent(String(orgId !== undefined ? orgId : `-org_id-`)))
                .replace(`{${"image_id"}}`, encodeURIComponent(String(imageId !== undefined ? imageId : `-image_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (startingAfter !== undefined) {
                localVarQueryParameter['starting_after'] = startingAfter;
            }

            if (endingBefore !== undefined) {
                localVarQueryParameter['ending_before'] = endingBefore;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/orgs/{org_id}/container_images/{image_id}/relationships/image_target_refs',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List instances of container image
         * @summary List instances of container image
         * @param {string} orgId Org ID
         * @param {string} version The requested version of the endpoint to process the request
         * @param {Array<string>} [imageIds] A comma-separated list of Image IDs
         * @param {Platform} [platform] The image Operating System and processor architecture
         * @param {Array<string>} [names] The container registry names
         * @param {number} [limit] Number of results to return per page
         * @param {string} [startingAfter] Return the page of results immediately after this cursor
         * @param {string} [endingBefore] Return the page of results immediately before this cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInstancesOfContainerImage: async (orgId: string, version: string, imageIds?: Array<string>, platform?: Platform, names?: Array<string>, limit?: number, startingAfter?: string, endingBefore?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('listInstancesOfContainerImage', 'orgId', orgId)
            // verify required parameter 'version' is not null or undefined
            assertParamExists('listInstancesOfContainerImage', 'version', version)
            const localVarPath = `/orgs/{org_id}/container_images`
                .replace(`{${"org_id"}}`, encodeURIComponent(String(orgId !== undefined ? orgId : `-org_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (imageIds) {
                localVarQueryParameter['image_ids'] = imageIds.join(COLLECTION_FORMATS.csv);
            }

            if (platform !== undefined) {
                localVarQueryParameter['platform'] = platform;
            }

            if (names) {
                localVarQueryParameter['names'] = names.join(COLLECTION_FORMATS.csv);
            }

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (startingAfter !== undefined) {
                localVarQueryParameter['starting_after'] = startingAfter;
            }

            if (endingBefore !== undefined) {
                localVarQueryParameter['ending_before'] = endingBefore;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/orgs/{org_id}/container_images',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ContainerImageApi - functional programming interface
 * @export
 */
export const ContainerImageApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ContainerImageApiAxiosParamCreator(configuration)
    return {
        /**
         * Get instance of container image
         * @summary Get instance of container image
         * @param {ContainerImageApiGetInstanceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInstance(requestParameters: ContainerImageApiGetInstanceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContainerImageGetInstanceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInstance(requestParameters.version, requestParameters.orgId, requestParameters.imageId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List instances of image target references for a container image
         * @summary List instances of image target references for a container image
         * @param {ContainerImageApiListImageTargetRefsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listImageTargetRefs(requestParameters: ContainerImageApiListImageTargetRefsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContainerImageListImageTargetRefsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listImageTargetRefs(requestParameters.orgId, requestParameters.imageId, requestParameters.version, requestParameters.limit, requestParameters.startingAfter, requestParameters.endingBefore, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List instances of container image
         * @summary List instances of container image
         * @param {ContainerImageApiListInstancesOfContainerImageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listInstancesOfContainerImage(requestParameters: ContainerImageApiListInstancesOfContainerImageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContainerImageListInstancesOfContainerImageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listInstancesOfContainerImage(requestParameters.orgId, requestParameters.version, requestParameters.imageIds, requestParameters.platform, requestParameters.names, requestParameters.limit, requestParameters.startingAfter, requestParameters.endingBefore, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ContainerImageApi - factory interface
 * @export
 */
export const ContainerImageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ContainerImageApiFp(configuration)
    return {
        /**
         * Get instance of container image
         * @summary Get instance of container image
         * @param {ContainerImageApiGetInstanceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstance(requestParameters: ContainerImageApiGetInstanceRequest, options?: AxiosRequestConfig): AxiosPromise<ContainerImageGetInstanceResponse> {
            return localVarFp.getInstance(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List instances of image target references for a container image
         * @summary List instances of image target references for a container image
         * @param {ContainerImageApiListImageTargetRefsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listImageTargetRefs(requestParameters: ContainerImageApiListImageTargetRefsRequest, options?: AxiosRequestConfig): AxiosPromise<ContainerImageListImageTargetRefsResponse> {
            return localVarFp.listImageTargetRefs(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List instances of container image
         * @summary List instances of container image
         * @param {ContainerImageApiListInstancesOfContainerImageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInstancesOfContainerImage(requestParameters: ContainerImageApiListInstancesOfContainerImageRequest, options?: AxiosRequestConfig): AxiosPromise<ContainerImageListInstancesOfContainerImageResponse> {
            return localVarFp.listInstancesOfContainerImage(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getInstance operation in ContainerImageApi.
 * @export
 * @interface ContainerImageApiGetInstanceRequest
 */
export type ContainerImageApiGetInstanceRequest = {
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof ContainerImageApiGetInstance
    */
    readonly version: string
    
    /**
    * Org ID
    * @type {string}
    * @memberof ContainerImageApiGetInstance
    */
    readonly orgId: string
    
    /**
    * Image ID
    * @type {string}
    * @memberof ContainerImageApiGetInstance
    */
    readonly imageId: string
    
}

/**
 * Request parameters for listImageTargetRefs operation in ContainerImageApi.
 * @export
 * @interface ContainerImageApiListImageTargetRefsRequest
 */
export type ContainerImageApiListImageTargetRefsRequest = {
    
    /**
    * Org ID
    * @type {string}
    * @memberof ContainerImageApiListImageTargetRefs
    */
    readonly orgId: string
    
    /**
    * Image ID
    * @type {string}
    * @memberof ContainerImageApiListImageTargetRefs
    */
    readonly imageId: string
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof ContainerImageApiListImageTargetRefs
    */
    readonly version: string
    
    /**
    * Number of results to return per page
    * @type {number}
    * @memberof ContainerImageApiListImageTargetRefs
    */
    readonly limit?: number
    
    /**
    * Return the page of results immediately after this cursor
    * @type {string}
    * @memberof ContainerImageApiListImageTargetRefs
    */
    readonly startingAfter?: string
    
    /**
    * Return the page of results immediately before this cursor
    * @type {string}
    * @memberof ContainerImageApiListImageTargetRefs
    */
    readonly endingBefore?: string
    
}

/**
 * Request parameters for listInstancesOfContainerImage operation in ContainerImageApi.
 * @export
 * @interface ContainerImageApiListInstancesOfContainerImageRequest
 */
export type ContainerImageApiListInstancesOfContainerImageRequest = {
    
    /**
    * Org ID
    * @type {string}
    * @memberof ContainerImageApiListInstancesOfContainerImage
    */
    readonly orgId: string
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof ContainerImageApiListInstancesOfContainerImage
    */
    readonly version: string
    
    /**
    * A comma-separated list of Image IDs
    * @type {Array<string>}
    * @memberof ContainerImageApiListInstancesOfContainerImage
    */
    readonly imageIds?: Array<string>
    
    /**
    * The image Operating System and processor architecture
    * @type {Platform}
    * @memberof ContainerImageApiListInstancesOfContainerImage
    */
    readonly platform?: Platform
    
    /**
    * The container registry names
    * @type {Array<string>}
    * @memberof ContainerImageApiListInstancesOfContainerImage
    */
    readonly names?: Array<string>
    
    /**
    * Number of results to return per page
    * @type {number}
    * @memberof ContainerImageApiListInstancesOfContainerImage
    */
    readonly limit?: number
    
    /**
    * Return the page of results immediately after this cursor
    * @type {string}
    * @memberof ContainerImageApiListInstancesOfContainerImage
    */
    readonly startingAfter?: string
    
    /**
    * Return the page of results immediately before this cursor
    * @type {string}
    * @memberof ContainerImageApiListInstancesOfContainerImage
    */
    readonly endingBefore?: string
    
}

/**
 * ContainerImageApiGenerated - object-oriented interface
 * @export
 * @class ContainerImageApiGenerated
 * @extends {BaseAPI}
 */
export class ContainerImageApiGenerated extends BaseAPI {
    /**
     * Get instance of container image
     * @summary Get instance of container image
     * @param {ContainerImageApiGetInstanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerImageApiGenerated
     */
    public getInstance(requestParameters: ContainerImageApiGetInstanceRequest, options?: AxiosRequestConfig) {
        return ContainerImageApiFp(this.configuration).getInstance(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List instances of image target references for a container image
     * @summary List instances of image target references for a container image
     * @param {ContainerImageApiListImageTargetRefsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerImageApiGenerated
     */
    public listImageTargetRefs(requestParameters: ContainerImageApiListImageTargetRefsRequest, options?: AxiosRequestConfig) {
        return ContainerImageApiFp(this.configuration).listImageTargetRefs(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List instances of container image
     * @summary List instances of container image
     * @param {ContainerImageApiListInstancesOfContainerImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerImageApiGenerated
     */
    public listInstancesOfContainerImage(requestParameters: ContainerImageApiListInstancesOfContainerImageRequest, options?: AxiosRequestConfig) {
        return ContainerImageApiFp(this.configuration).listInstancesOfContainerImage(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
