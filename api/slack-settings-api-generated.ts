/* tslint:disable */
/* eslint-disable */
/*
Snyk API

Missing description placeholder

The version of the OpenAPI document: REST


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorDocument } from '../models';
// @ts-ignore
import { GetProjectSettingsCollection } from '../models';
// @ts-ignore
import { ProjectSettingsPatchRequest } from '../models';
// @ts-ignore
import { ProjectSettingsPatchRequestData } from '../models';
// @ts-ignore
import { SettingsRequest } from '../models';
// @ts-ignore
import { SettingsRequestData } from '../models';
// @ts-ignore
import { SlackSettingsCreateDefaultNotificationSettingsResponse } from '../models';
// @ts-ignore
import { SlackSettingsGetDefaultNotificationSettingsResponse } from '../models';
// @ts-ignore
import { SlackSettingsProjectOverrideResponse } from '../models';
// @ts-ignore
import { SlackSettingsUpdateNotificationSettingsForProjectResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * SlackSettingsApi - axios parameter creator
 * @export
 */
export const SlackSettingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create new Slack notification default settings for a given tenant.
         * @summary Create new Slack notification default settings.
         * @param {string} version The requested version of the endpoint to process the request
         * @param {string} orgId Org ID
         * @param {string} botId Bot ID
         * @param {SettingsRequest} [settingsRequest] Create new Slack notification default settings for a tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDefaultNotificationSettings: async (version: string, orgId: string, botId: string, settingsRequest?: SettingsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('createDefaultNotificationSettings', 'version', version)
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('createDefaultNotificationSettings', 'orgId', orgId)
            // verify required parameter 'botId' is not null or undefined
            assertParamExists('createDefaultNotificationSettings', 'botId', botId)
            const localVarPath = `/orgs/{org_id}/slack_app/{bot_id}`
                .replace(`{${"org_id"}}`, encodeURIComponent(String(orgId !== undefined ? orgId : `-org_id-`)))
                .replace(`{${"bot_id"}}`, encodeURIComponent(String(botId !== undefined ? botId : `-bot_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: settingsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/orgs/{org_id}/slack_app/{bot_id}',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(settingsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Slack integration default notification settings for the provided tenant ID and bot ID.
         * @summary Get Slack integration default notification settings.
         * @param {string} version The requested version of the endpoint to process the request
         * @param {string} orgId Org ID
         * @param {string} botId Bot ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDefaultNotificationSettings: async (version: string, orgId: string, botId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('getDefaultNotificationSettings', 'version', version)
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getDefaultNotificationSettings', 'orgId', orgId)
            // verify required parameter 'botId' is not null or undefined
            assertParamExists('getDefaultNotificationSettings', 'botId', botId)
            const localVarPath = `/orgs/{org_id}/slack_app/{bot_id}`
                .replace(`{${"org_id"}}`, encodeURIComponent(String(orgId !== undefined ? orgId : `-org_id-`)))
                .replace(`{${"bot_id"}}`, encodeURIComponent(String(botId !== undefined ? botId : `-bot_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/orgs/{org_id}/slack_app/{bot_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Slack notification settings overrides for projects. These settings overrides the default settings configured for the tenant.
         * @summary Slack notification settings overrides for projects
         * @param {string} version The requested version of the endpoint to process the request
         * @param {string} orgId Org ID
         * @param {string} botId Bot ID
         * @param {string} [startingAfter] Return the page of results immediately after this cursor
         * @param {string} [endingBefore] Return the page of results immediately before this cursor
         * @param {number} [limit] Number of results to return per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOverridesForProjects: async (version: string, orgId: string, botId: string, startingAfter?: string, endingBefore?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('getOverridesForProjects', 'version', version)
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getOverridesForProjects', 'orgId', orgId)
            // verify required parameter 'botId' is not null or undefined
            assertParamExists('getOverridesForProjects', 'botId', botId)
            const localVarPath = `/orgs/{org_id}/slack_app/{bot_id}/projects`
                .replace(`{${"org_id"}}`, encodeURIComponent(String(orgId !== undefined ? orgId : `-org_id-`)))
                .replace(`{${"bot_id"}}`, encodeURIComponent(String(botId !== undefined ? botId : `-bot_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }

            if (startingAfter !== undefined) {
                localVarQueryParameter['starting_after'] = startingAfter;
            }

            if (endingBefore !== undefined) {
                localVarQueryParameter['ending_before'] = endingBefore;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/orgs/{org_id}/slack_app/{bot_id}/projects',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create Slack settings override for a project.
         * @summary Create a new Slack settings override for a given project.
         * @param {string} version The requested version of the endpoint to process the request
         * @param {string} orgId Org ID
         * @param {string} projectId Project ID
         * @param {string} botId Bot ID
         * @param {SettingsRequest} [settingsRequest] Create new Slack notification default settings for a tenant.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectOverride: async (version: string, orgId: string, projectId: string, botId: string, settingsRequest?: SettingsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('projectOverride', 'version', version)
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('projectOverride', 'orgId', orgId)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('projectOverride', 'projectId', projectId)
            // verify required parameter 'botId' is not null or undefined
            assertParamExists('projectOverride', 'botId', botId)
            const localVarPath = `/orgs/{org_id}/slack_app/{bot_id}/projects/{project_id}`
                .replace(`{${"org_id"}}`, encodeURIComponent(String(orgId !== undefined ? orgId : `-org_id-`)))
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-project_id-`)))
                .replace(`{${"bot_id"}}`, encodeURIComponent(String(botId !== undefined ? botId : `-bot_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: settingsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/orgs/{org_id}/slack_app/{bot_id}/projects/{project_id}',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(settingsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove the given Slack App integration
         * @summary Remove the given Slack App integration
         * @param {string} version The requested version of the endpoint to process the request
         * @param {string} orgId Org ID
         * @param {string} botId Bot ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeIntegration: async (version: string, orgId: string, botId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('removeIntegration', 'version', version)
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('removeIntegration', 'orgId', orgId)
            // verify required parameter 'botId' is not null or undefined
            assertParamExists('removeIntegration', 'botId', botId)
            const localVarPath = `/orgs/{org_id}/slack_app/{bot_id}`
                .replace(`{${"org_id"}}`, encodeURIComponent(String(orgId !== undefined ? orgId : `-org_id-`)))
                .replace(`{${"bot_id"}}`, encodeURIComponent(String(botId !== undefined ? botId : `-bot_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/orgs/{org_id}/slack_app/{bot_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove Slack settings override for a project.
         * @summary Remove Slack settings override for a project.
         * @param {string} version The requested version of the endpoint to process the request
         * @param {string} orgId Org ID
         * @param {string} projectId Project ID
         * @param {string} botId Bot ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeProjectOverride: async (version: string, orgId: string, projectId: string, botId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('removeProjectOverride', 'version', version)
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('removeProjectOverride', 'orgId', orgId)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('removeProjectOverride', 'projectId', projectId)
            // verify required parameter 'botId' is not null or undefined
            assertParamExists('removeProjectOverride', 'botId', botId)
            const localVarPath = `/orgs/{org_id}/slack_app/{bot_id}/projects/{project_id}`
                .replace(`{${"org_id"}}`, encodeURIComponent(String(orgId !== undefined ? orgId : `-org_id-`)))
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-project_id-`)))
                .replace(`{${"bot_id"}}`, encodeURIComponent(String(botId !== undefined ? botId : `-bot_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/orgs/{org_id}/slack_app/{bot_id}/projects/{project_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update Slack notification settings for a project.
         * @summary Update Slack notification settings for a project.
         * @param {string} version The requested version of the endpoint to process the request
         * @param {string} orgId Org ID
         * @param {string} botId Bot ID
         * @param {string} projectId Project ID
         * @param {ProjectSettingsPatchRequest} [projectSettingsPatchRequest] Update existing project specific settings for a project.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNotificationSettingsForProject: async (version: string, orgId: string, botId: string, projectId: string, projectSettingsPatchRequest?: ProjectSettingsPatchRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('updateNotificationSettingsForProject', 'version', version)
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('updateNotificationSettingsForProject', 'orgId', orgId)
            // verify required parameter 'botId' is not null or undefined
            assertParamExists('updateNotificationSettingsForProject', 'botId', botId)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('updateNotificationSettingsForProject', 'projectId', projectId)
            const localVarPath = `/orgs/{org_id}/slack_app/{bot_id}/projects/{project_id}`
                .replace(`{${"org_id"}}`, encodeURIComponent(String(orgId !== undefined ? orgId : `-org_id-`)))
                .replace(`{${"bot_id"}}`, encodeURIComponent(String(botId !== undefined ? botId : `-bot_id-`)))
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-project_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: projectSettingsPatchRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/orgs/{org_id}/slack_app/{bot_id}/projects/{project_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(projectSettingsPatchRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SlackSettingsApi - functional programming interface
 * @export
 */
export const SlackSettingsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SlackSettingsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create new Slack notification default settings for a given tenant.
         * @summary Create new Slack notification default settings.
         * @param {SlackSettingsApiCreateDefaultNotificationSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDefaultNotificationSettings(requestParameters: SlackSettingsApiCreateDefaultNotificationSettingsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SlackSettingsCreateDefaultNotificationSettingsResponse>> {
            const settingsRequest: SettingsRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDefaultNotificationSettings(requestParameters.version, requestParameters.orgId, requestParameters.botId, settingsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Slack integration default notification settings for the provided tenant ID and bot ID.
         * @summary Get Slack integration default notification settings.
         * @param {SlackSettingsApiGetDefaultNotificationSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDefaultNotificationSettings(requestParameters: SlackSettingsApiGetDefaultNotificationSettingsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SlackSettingsGetDefaultNotificationSettingsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDefaultNotificationSettings(requestParameters.version, requestParameters.orgId, requestParameters.botId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Slack notification settings overrides for projects. These settings overrides the default settings configured for the tenant.
         * @summary Slack notification settings overrides for projects
         * @param {SlackSettingsApiGetOverridesForProjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOverridesForProjects(requestParameters: SlackSettingsApiGetOverridesForProjectsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetProjectSettingsCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOverridesForProjects(requestParameters.version, requestParameters.orgId, requestParameters.botId, requestParameters.startingAfter, requestParameters.endingBefore, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create Slack settings override for a project.
         * @summary Create a new Slack settings override for a given project.
         * @param {SlackSettingsApiProjectOverrideRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectOverride(requestParameters: SlackSettingsApiProjectOverrideRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SlackSettingsProjectOverrideResponse>> {
            const settingsRequest: SettingsRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectOverride(requestParameters.version, requestParameters.orgId, requestParameters.projectId, requestParameters.botId, settingsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove the given Slack App integration
         * @summary Remove the given Slack App integration
         * @param {SlackSettingsApiRemoveIntegrationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeIntegration(requestParameters: SlackSettingsApiRemoveIntegrationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeIntegration(requestParameters.version, requestParameters.orgId, requestParameters.botId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove Slack settings override for a project.
         * @summary Remove Slack settings override for a project.
         * @param {SlackSettingsApiRemoveProjectOverrideRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeProjectOverride(requestParameters: SlackSettingsApiRemoveProjectOverrideRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeProjectOverride(requestParameters.version, requestParameters.orgId, requestParameters.projectId, requestParameters.botId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update Slack notification settings for a project.
         * @summary Update Slack notification settings for a project.
         * @param {SlackSettingsApiUpdateNotificationSettingsForProjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateNotificationSettingsForProject(requestParameters: SlackSettingsApiUpdateNotificationSettingsForProjectRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SlackSettingsUpdateNotificationSettingsForProjectResponse>> {
            const projectSettingsPatchRequest: ProjectSettingsPatchRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateNotificationSettingsForProject(requestParameters.version, requestParameters.orgId, requestParameters.botId, requestParameters.projectId, projectSettingsPatchRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SlackSettingsApi - factory interface
 * @export
 */
export const SlackSettingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SlackSettingsApiFp(configuration)
    return {
        /**
         * Create new Slack notification default settings for a given tenant.
         * @summary Create new Slack notification default settings.
         * @param {SlackSettingsApiCreateDefaultNotificationSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDefaultNotificationSettings(requestParameters: SlackSettingsApiCreateDefaultNotificationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<SlackSettingsCreateDefaultNotificationSettingsResponse> {
            return localVarFp.createDefaultNotificationSettings(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Slack integration default notification settings for the provided tenant ID and bot ID.
         * @summary Get Slack integration default notification settings.
         * @param {SlackSettingsApiGetDefaultNotificationSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDefaultNotificationSettings(requestParameters: SlackSettingsApiGetDefaultNotificationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<SlackSettingsGetDefaultNotificationSettingsResponse> {
            return localVarFp.getDefaultNotificationSettings(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Slack notification settings overrides for projects. These settings overrides the default settings configured for the tenant.
         * @summary Slack notification settings overrides for projects
         * @param {SlackSettingsApiGetOverridesForProjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOverridesForProjects(requestParameters: SlackSettingsApiGetOverridesForProjectsRequest, options?: AxiosRequestConfig): AxiosPromise<GetProjectSettingsCollection> {
            return localVarFp.getOverridesForProjects(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create Slack settings override for a project.
         * @summary Create a new Slack settings override for a given project.
         * @param {SlackSettingsApiProjectOverrideRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectOverride(requestParameters: SlackSettingsApiProjectOverrideRequest, options?: AxiosRequestConfig): AxiosPromise<SlackSettingsProjectOverrideResponse> {
            return localVarFp.projectOverride(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove the given Slack App integration
         * @summary Remove the given Slack App integration
         * @param {SlackSettingsApiRemoveIntegrationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeIntegration(requestParameters: SlackSettingsApiRemoveIntegrationRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeIntegration(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove Slack settings override for a project.
         * @summary Remove Slack settings override for a project.
         * @param {SlackSettingsApiRemoveProjectOverrideRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeProjectOverride(requestParameters: SlackSettingsApiRemoveProjectOverrideRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeProjectOverride(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update Slack notification settings for a project.
         * @summary Update Slack notification settings for a project.
         * @param {SlackSettingsApiUpdateNotificationSettingsForProjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNotificationSettingsForProject(requestParameters: SlackSettingsApiUpdateNotificationSettingsForProjectRequest, options?: AxiosRequestConfig): AxiosPromise<SlackSettingsUpdateNotificationSettingsForProjectResponse> {
            return localVarFp.updateNotificationSettingsForProject(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createDefaultNotificationSettings operation in SlackSettingsApi.
 * @export
 * @interface SlackSettingsApiCreateDefaultNotificationSettingsRequest
 */
export type SlackSettingsApiCreateDefaultNotificationSettingsRequest = {
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof SlackSettingsApiCreateDefaultNotificationSettings
    */
    readonly version: string
    
    /**
    * Org ID
    * @type {string}
    * @memberof SlackSettingsApiCreateDefaultNotificationSettings
    */
    readonly orgId: string
    
    /**
    * Bot ID
    * @type {string}
    * @memberof SlackSettingsApiCreateDefaultNotificationSettings
    */
    readonly botId: string
    
} & SettingsRequest

/**
 * Request parameters for getDefaultNotificationSettings operation in SlackSettingsApi.
 * @export
 * @interface SlackSettingsApiGetDefaultNotificationSettingsRequest
 */
export type SlackSettingsApiGetDefaultNotificationSettingsRequest = {
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof SlackSettingsApiGetDefaultNotificationSettings
    */
    readonly version: string
    
    /**
    * Org ID
    * @type {string}
    * @memberof SlackSettingsApiGetDefaultNotificationSettings
    */
    readonly orgId: string
    
    /**
    * Bot ID
    * @type {string}
    * @memberof SlackSettingsApiGetDefaultNotificationSettings
    */
    readonly botId: string
    
}

/**
 * Request parameters for getOverridesForProjects operation in SlackSettingsApi.
 * @export
 * @interface SlackSettingsApiGetOverridesForProjectsRequest
 */
export type SlackSettingsApiGetOverridesForProjectsRequest = {
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof SlackSettingsApiGetOverridesForProjects
    */
    readonly version: string
    
    /**
    * Org ID
    * @type {string}
    * @memberof SlackSettingsApiGetOverridesForProjects
    */
    readonly orgId: string
    
    /**
    * Bot ID
    * @type {string}
    * @memberof SlackSettingsApiGetOverridesForProjects
    */
    readonly botId: string
    
    /**
    * Return the page of results immediately after this cursor
    * @type {string}
    * @memberof SlackSettingsApiGetOverridesForProjects
    */
    readonly startingAfter?: string
    
    /**
    * Return the page of results immediately before this cursor
    * @type {string}
    * @memberof SlackSettingsApiGetOverridesForProjects
    */
    readonly endingBefore?: string
    
    /**
    * Number of results to return per page
    * @type {number}
    * @memberof SlackSettingsApiGetOverridesForProjects
    */
    readonly limit?: number
    
}

/**
 * Request parameters for projectOverride operation in SlackSettingsApi.
 * @export
 * @interface SlackSettingsApiProjectOverrideRequest
 */
export type SlackSettingsApiProjectOverrideRequest = {
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof SlackSettingsApiProjectOverride
    */
    readonly version: string
    
    /**
    * Org ID
    * @type {string}
    * @memberof SlackSettingsApiProjectOverride
    */
    readonly orgId: string
    
    /**
    * Project ID
    * @type {string}
    * @memberof SlackSettingsApiProjectOverride
    */
    readonly projectId: string
    
    /**
    * Bot ID
    * @type {string}
    * @memberof SlackSettingsApiProjectOverride
    */
    readonly botId: string
    
} & SettingsRequest

/**
 * Request parameters for removeIntegration operation in SlackSettingsApi.
 * @export
 * @interface SlackSettingsApiRemoveIntegrationRequest
 */
export type SlackSettingsApiRemoveIntegrationRequest = {
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof SlackSettingsApiRemoveIntegration
    */
    readonly version: string
    
    /**
    * Org ID
    * @type {string}
    * @memberof SlackSettingsApiRemoveIntegration
    */
    readonly orgId: string
    
    /**
    * Bot ID
    * @type {string}
    * @memberof SlackSettingsApiRemoveIntegration
    */
    readonly botId: string
    
}

/**
 * Request parameters for removeProjectOverride operation in SlackSettingsApi.
 * @export
 * @interface SlackSettingsApiRemoveProjectOverrideRequest
 */
export type SlackSettingsApiRemoveProjectOverrideRequest = {
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof SlackSettingsApiRemoveProjectOverride
    */
    readonly version: string
    
    /**
    * Org ID
    * @type {string}
    * @memberof SlackSettingsApiRemoveProjectOverride
    */
    readonly orgId: string
    
    /**
    * Project ID
    * @type {string}
    * @memberof SlackSettingsApiRemoveProjectOverride
    */
    readonly projectId: string
    
    /**
    * Bot ID
    * @type {string}
    * @memberof SlackSettingsApiRemoveProjectOverride
    */
    readonly botId: string
    
}

/**
 * Request parameters for updateNotificationSettingsForProject operation in SlackSettingsApi.
 * @export
 * @interface SlackSettingsApiUpdateNotificationSettingsForProjectRequest
 */
export type SlackSettingsApiUpdateNotificationSettingsForProjectRequest = {
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof SlackSettingsApiUpdateNotificationSettingsForProject
    */
    readonly version: string
    
    /**
    * Org ID
    * @type {string}
    * @memberof SlackSettingsApiUpdateNotificationSettingsForProject
    */
    readonly orgId: string
    
    /**
    * Bot ID
    * @type {string}
    * @memberof SlackSettingsApiUpdateNotificationSettingsForProject
    */
    readonly botId: string
    
    /**
    * Project ID
    * @type {string}
    * @memberof SlackSettingsApiUpdateNotificationSettingsForProject
    */
    readonly projectId: string
    
} & ProjectSettingsPatchRequest

/**
 * SlackSettingsApiGenerated - object-oriented interface
 * @export
 * @class SlackSettingsApiGenerated
 * @extends {BaseAPI}
 */
export class SlackSettingsApiGenerated extends BaseAPI {
    /**
     * Create new Slack notification default settings for a given tenant.
     * @summary Create new Slack notification default settings.
     * @param {SlackSettingsApiCreateDefaultNotificationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SlackSettingsApiGenerated
     */
    public createDefaultNotificationSettings(requestParameters: SlackSettingsApiCreateDefaultNotificationSettingsRequest, options?: AxiosRequestConfig) {
        return SlackSettingsApiFp(this.configuration).createDefaultNotificationSettings(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Slack integration default notification settings for the provided tenant ID and bot ID.
     * @summary Get Slack integration default notification settings.
     * @param {SlackSettingsApiGetDefaultNotificationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SlackSettingsApiGenerated
     */
    public getDefaultNotificationSettings(requestParameters: SlackSettingsApiGetDefaultNotificationSettingsRequest, options?: AxiosRequestConfig) {
        return SlackSettingsApiFp(this.configuration).getDefaultNotificationSettings(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Slack notification settings overrides for projects. These settings overrides the default settings configured for the tenant.
     * @summary Slack notification settings overrides for projects
     * @param {SlackSettingsApiGetOverridesForProjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SlackSettingsApiGenerated
     */
    public getOverridesForProjects(requestParameters: SlackSettingsApiGetOverridesForProjectsRequest, options?: AxiosRequestConfig) {
        return SlackSettingsApiFp(this.configuration).getOverridesForProjects(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create Slack settings override for a project.
     * @summary Create a new Slack settings override for a given project.
     * @param {SlackSettingsApiProjectOverrideRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SlackSettingsApiGenerated
     */
    public projectOverride(requestParameters: SlackSettingsApiProjectOverrideRequest, options?: AxiosRequestConfig) {
        return SlackSettingsApiFp(this.configuration).projectOverride(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove the given Slack App integration
     * @summary Remove the given Slack App integration
     * @param {SlackSettingsApiRemoveIntegrationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SlackSettingsApiGenerated
     */
    public removeIntegration(requestParameters: SlackSettingsApiRemoveIntegrationRequest, options?: AxiosRequestConfig) {
        return SlackSettingsApiFp(this.configuration).removeIntegration(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove Slack settings override for a project.
     * @summary Remove Slack settings override for a project.
     * @param {SlackSettingsApiRemoveProjectOverrideRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SlackSettingsApiGenerated
     */
    public removeProjectOverride(requestParameters: SlackSettingsApiRemoveProjectOverrideRequest, options?: AxiosRequestConfig) {
        return SlackSettingsApiFp(this.configuration).removeProjectOverride(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update Slack notification settings for a project.
     * @summary Update Slack notification settings for a project.
     * @param {SlackSettingsApiUpdateNotificationSettingsForProjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SlackSettingsApiGenerated
     */
    public updateNotificationSettingsForProject(requestParameters: SlackSettingsApiUpdateNotificationSettingsForProjectRequest, options?: AxiosRequestConfig) {
        return SlackSettingsApiFp(this.configuration).updateNotificationSettingsForProject(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
