/* tslint:disable */
/* eslint-disable */
/*
Snyk API

Missing description placeholder

The version of the OpenAPI document: REST


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorDocument } from '../models';
// @ts-ignore
import { GroupIacSettingsRequest } from '../models';
// @ts-ignore
import { IacSettingsGetForGroupResponse } from '../models';
// @ts-ignore
import { IacSettingsGetForOrgIacResponse } from '../models';
// @ts-ignore
import { IacSettingsUpdateForGroupRequest } from '../models';
// @ts-ignore
import { IacSettingsUpdateForGroupResponse } from '../models';
// @ts-ignore
import { IacSettingsUpdateForOrgRequest } from '../models';
// @ts-ignore
import { IacSettingsUpdateForOrgResponse } from '../models';
// @ts-ignore
import { OrgIacSettingsRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * IacSettingsApi - axios parameter creator
 * @export
 */
export const IacSettingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get the Infrastructure as Code Settings for a group.
         * @summary Get the Infrastructure as Code Settings for a group
         * @param {string} version The requested version of the endpoint to process the request
         * @param {string} groupId The id of the group whose Infrastructure as Code settings are requested
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getForGroup: async (version: string, groupId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('getForGroup', 'version', version)
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('getForGroup', 'groupId', groupId)
            const localVarPath = `/groups/{group_id}/settings/iac`
                .replace(`{${"group_id"}}`, encodeURIComponent(String(groupId !== undefined ? groupId : `-group_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/groups/{group_id}/settings/iac',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the Infrastructure as Code Settings for an org.
         * @summary Get the Infrastructure as Code Settings for an org.
         * @param {string} version The requested version of the endpoint to process the request
         * @param {string} orgId The id of the org whose Infrastructure as Code settings are requested.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getForOrgIac: async (version: string, orgId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('getForOrgIac', 'version', version)
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getForOrgIac', 'orgId', orgId)
            const localVarPath = `/orgs/{org_id}/settings/iac`
                .replace(`{${"org_id"}}`, encodeURIComponent(String(orgId !== undefined ? orgId : `-org_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/orgs/{org_id}/settings/iac',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the Infrastructure as Code Settings for a group.
         * @summary Update the Infrastructure as Code Settings for a group
         * @param {string} version The requested version of the endpoint to process the request
         * @param {string} groupId The id of the group whose Infrastructure as Code settings are getting updated
         * @param {IacSettingsUpdateForGroupRequest} [iacSettingsUpdateForGroupRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateForGroup: async (version: string, groupId: string, iacSettingsUpdateForGroupRequest?: IacSettingsUpdateForGroupRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('updateForGroup', 'version', version)
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('updateForGroup', 'groupId', groupId)
            const localVarPath = `/groups/{group_id}/settings/iac`
                .replace(`{${"group_id"}}`, encodeURIComponent(String(groupId !== undefined ? groupId : `-group_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: iacSettingsUpdateForGroupRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/groups/{group_id}/settings/iac',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(iacSettingsUpdateForGroupRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the Infrastructure as Code Settings for an org.
         * @summary Update the Infrastructure as Code Settings for an org
         * @param {string} version The requested version of the endpoint to process the request
         * @param {string} orgId The id of the org whose Infrastructure as Code settings are getting updated
         * @param {IacSettingsUpdateForOrgRequest} [iacSettingsUpdateForOrgRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateForOrg: async (version: string, orgId: string, iacSettingsUpdateForOrgRequest?: IacSettingsUpdateForOrgRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('updateForOrg', 'version', version)
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('updateForOrg', 'orgId', orgId)
            const localVarPath = `/orgs/{org_id}/settings/iac`
                .replace(`{${"org_id"}}`, encodeURIComponent(String(orgId !== undefined ? orgId : `-org_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "aPIToken", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: iacSettingsUpdateForOrgRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/orgs/{org_id}/settings/iac',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(iacSettingsUpdateForOrgRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IacSettingsApi - functional programming interface
 * @export
 */
export const IacSettingsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IacSettingsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get the Infrastructure as Code Settings for a group.
         * @summary Get the Infrastructure as Code Settings for a group
         * @param {IacSettingsApiGetForGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getForGroup(requestParameters: IacSettingsApiGetForGroupRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IacSettingsGetForGroupResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getForGroup(requestParameters.version, requestParameters.groupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the Infrastructure as Code Settings for an org.
         * @summary Get the Infrastructure as Code Settings for an org.
         * @param {IacSettingsApiGetForOrgIacRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getForOrgIac(requestParameters: IacSettingsApiGetForOrgIacRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IacSettingsGetForOrgIacResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getForOrgIac(requestParameters.version, requestParameters.orgId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update the Infrastructure as Code Settings for a group.
         * @summary Update the Infrastructure as Code Settings for a group
         * @param {IacSettingsApiUpdateForGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateForGroup(requestParameters: IacSettingsApiUpdateForGroupRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IacSettingsUpdateForGroupResponse>> {
            const iacSettingsUpdateForGroupRequest: IacSettingsUpdateForGroupRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateForGroup(requestParameters.version, requestParameters.groupId, iacSettingsUpdateForGroupRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update the Infrastructure as Code Settings for an org.
         * @summary Update the Infrastructure as Code Settings for an org
         * @param {IacSettingsApiUpdateForOrgRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateForOrg(requestParameters: IacSettingsApiUpdateForOrgRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IacSettingsUpdateForOrgResponse>> {
            const iacSettingsUpdateForOrgRequest: IacSettingsUpdateForOrgRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateForOrg(requestParameters.version, requestParameters.orgId, iacSettingsUpdateForOrgRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * IacSettingsApi - factory interface
 * @export
 */
export const IacSettingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IacSettingsApiFp(configuration)
    return {
        /**
         * Get the Infrastructure as Code Settings for a group.
         * @summary Get the Infrastructure as Code Settings for a group
         * @param {IacSettingsApiGetForGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getForGroup(requestParameters: IacSettingsApiGetForGroupRequest, options?: AxiosRequestConfig): AxiosPromise<IacSettingsGetForGroupResponse> {
            return localVarFp.getForGroup(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the Infrastructure as Code Settings for an org.
         * @summary Get the Infrastructure as Code Settings for an org.
         * @param {IacSettingsApiGetForOrgIacRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getForOrgIac(requestParameters: IacSettingsApiGetForOrgIacRequest, options?: AxiosRequestConfig): AxiosPromise<IacSettingsGetForOrgIacResponse> {
            return localVarFp.getForOrgIac(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the Infrastructure as Code Settings for a group.
         * @summary Update the Infrastructure as Code Settings for a group
         * @param {IacSettingsApiUpdateForGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateForGroup(requestParameters: IacSettingsApiUpdateForGroupRequest, options?: AxiosRequestConfig): AxiosPromise<IacSettingsUpdateForGroupResponse> {
            return localVarFp.updateForGroup(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the Infrastructure as Code Settings for an org.
         * @summary Update the Infrastructure as Code Settings for an org
         * @param {IacSettingsApiUpdateForOrgRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateForOrg(requestParameters: IacSettingsApiUpdateForOrgRequest, options?: AxiosRequestConfig): AxiosPromise<IacSettingsUpdateForOrgResponse> {
            return localVarFp.updateForOrg(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getForGroup operation in IacSettingsApi.
 * @export
 * @interface IacSettingsApiGetForGroupRequest
 */
export type IacSettingsApiGetForGroupRequest = {
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof IacSettingsApiGetForGroup
    */
    readonly version: string
    
    /**
    * The id of the group whose Infrastructure as Code settings are requested
    * @type {string}
    * @memberof IacSettingsApiGetForGroup
    */
    readonly groupId: string
    
}

/**
 * Request parameters for getForOrgIac operation in IacSettingsApi.
 * @export
 * @interface IacSettingsApiGetForOrgIacRequest
 */
export type IacSettingsApiGetForOrgIacRequest = {
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof IacSettingsApiGetForOrgIac
    */
    readonly version: string
    
    /**
    * The id of the org whose Infrastructure as Code settings are requested.
    * @type {string}
    * @memberof IacSettingsApiGetForOrgIac
    */
    readonly orgId: string
    
}

/**
 * Request parameters for updateForGroup operation in IacSettingsApi.
 * @export
 * @interface IacSettingsApiUpdateForGroupRequest
 */
export type IacSettingsApiUpdateForGroupRequest = {
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof IacSettingsApiUpdateForGroup
    */
    readonly version: string
    
    /**
    * The id of the group whose Infrastructure as Code settings are getting updated
    * @type {string}
    * @memberof IacSettingsApiUpdateForGroup
    */
    readonly groupId: string
    
} & IacSettingsUpdateForGroupRequest

/**
 * Request parameters for updateForOrg operation in IacSettingsApi.
 * @export
 * @interface IacSettingsApiUpdateForOrgRequest
 */
export type IacSettingsApiUpdateForOrgRequest = {
    
    /**
    * The requested version of the endpoint to process the request
    * @type {string}
    * @memberof IacSettingsApiUpdateForOrg
    */
    readonly version: string
    
    /**
    * The id of the org whose Infrastructure as Code settings are getting updated
    * @type {string}
    * @memberof IacSettingsApiUpdateForOrg
    */
    readonly orgId: string
    
} & IacSettingsUpdateForOrgRequest

/**
 * IacSettingsApiGenerated - object-oriented interface
 * @export
 * @class IacSettingsApiGenerated
 * @extends {BaseAPI}
 */
export class IacSettingsApiGenerated extends BaseAPI {
    /**
     * Get the Infrastructure as Code Settings for a group.
     * @summary Get the Infrastructure as Code Settings for a group
     * @param {IacSettingsApiGetForGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IacSettingsApiGenerated
     */
    public getForGroup(requestParameters: IacSettingsApiGetForGroupRequest, options?: AxiosRequestConfig) {
        return IacSettingsApiFp(this.configuration).getForGroup(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the Infrastructure as Code Settings for an org.
     * @summary Get the Infrastructure as Code Settings for an org.
     * @param {IacSettingsApiGetForOrgIacRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IacSettingsApiGenerated
     */
    public getForOrgIac(requestParameters: IacSettingsApiGetForOrgIacRequest, options?: AxiosRequestConfig) {
        return IacSettingsApiFp(this.configuration).getForOrgIac(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the Infrastructure as Code Settings for a group.
     * @summary Update the Infrastructure as Code Settings for a group
     * @param {IacSettingsApiUpdateForGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IacSettingsApiGenerated
     */
    public updateForGroup(requestParameters: IacSettingsApiUpdateForGroupRequest, options?: AxiosRequestConfig) {
        return IacSettingsApiFp(this.configuration).updateForGroup(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the Infrastructure as Code Settings for an org.
     * @summary Update the Infrastructure as Code Settings for an org
     * @param {IacSettingsApiUpdateForOrgRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IacSettingsApiGenerated
     */
    public updateForOrg(requestParameters: IacSettingsApiUpdateForOrgRequest, options?: AxiosRequestConfig) {
        return IacSettingsApiFp(this.configuration).updateForOrg(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
